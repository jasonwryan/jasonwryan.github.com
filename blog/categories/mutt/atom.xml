<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mutt | jasonwryan.com]]></title>
  <link href="http://jasonwryan.com/blog/categories/mutt/atom.xml" rel="self"/>
  <link href="http://jasonwryan.com/"/>
  <updated>2020-01-13T20:49:41+13:00</updated>
  <id>http://jasonwryan.com/</id>
  <author>
    <name><![CDATA[Jason Ryan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Syncing with khal]]></title>
    <link href="http://jasonwryan.com/blog/2014/04/18/vdir/"/>
    <updated>2014-04-18T10:32:00+12:00</updated>
    <id>http://jasonwryan.com/blog/2014/04/18/vdir</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/post_images/arrows.png" title="Creative Commons image" >
Following up on my post from last week, about using
<a href="http://jasonwryan.com/blog/2014/04/05/calendar/" title="Check it out…">khal and mutt</a>,
where I covered off a couple of simple hacks to integrate command line
calendaring with <a href="http://www.mutt.org/" title="Mutt hompeage">Mutt</a>, I had been using
the main development branch of
<a href="https://github.com/geier/khal" title="Master branch on github">khal</a> which includes
syncing capability. However, as I was conversing with the developer, Christian,
around
<a href="https://github.com/geier/khal/issues/47" title="Issue on khal github repo">a bug report</a>,
he indicated that this functionality would be superseded by development in a
separate branch that uses
<a href="https://github.com/untitaker/vdirsyncer" title="Github repo">vdirsyncer</a> to
synchronise calendars.</p>

<p>As Christian intimated that this change would happen in the
<a href="https://github.com/geier/khal/issues/47#issuecomment-40175915" title="Relevant comment">very near future</a>,
and “js” had commented on my last post to the effect that it was working well, I
thought I should take a look for myself.</p>

<p>There are packages in the AUR for
<a href="https://aur.archlinux.org/packages/python2-vdirsyncer/" title="Grab it">vdirsyncer-git</a> and
<a href="https://aur.archlinux.org/packages/python2-argvard/" title="Same deal…">python2-argvard</a>
so you will just need to grab the khal branch that uses <code>vdirsyncer</code> as it&rsquo;s
syncing engine. I have thrown up a
<a href="https://gist.github.com/jasonwryan/10949540" title="Nothing too flash…">PKGBUILD gist</a>,
or—as we are only talking about a couple of simple scripts—you could install the
complete set using
<a href="http://www.pip-installer.org/en/latest/" title="Official documentation">pip</a>, the
Python package manager; in which case it would be a straightforward:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo pacman -S python2-pip
</span><span class='line'>pip2 install <span class="p">&amp;</span>ndash<span class="p">;</span>user git+&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/geier/khal.git@vdir&quot;</span>&gt;https://github.com/geier/khal.git@vdir&lt;/a&gt;
</span><span class='line'>pip2 install <span class="p">&amp;</span>ndash<span class="p">;</span>user vdirsyncer
</span></code></pre></td></tr></table></div></figure></p>

<p>…and then remember to make sure that <span class="file">$HOME/.local/bin</span>
is included in your <code>$PATH</code>.</p>

<p>I wanted to have vdirsyncer manage two of my calendars, my
<a href="http://en.wikipedia.org/wiki/CalDAV" title="Wikipedia page">CalDav</a> work calendar and
a simple <a href="http://en.wikipedia.org/wiki/ICalendar" title="Wikipedia, again…">iCalendar</a>
with all of the New Zealand public holidays. Configuring vdirsyncer to
successfully do this took me a <em>lot</em> longer than I would like to admit: a
combination of my ineptitude, a bug and a broken schema in the original
<span class="file">holidays.ics</span> that I wanted to use.</p>

<p>The <code>collections</code> variable in the config file merits a mention in this regard.
If you choose to use it, be aware that your <acronym title="Unique Resource Locator">URL</acronym>
will have this value appended to it, which may throw
<a href="http://en.wikipedia.org/wiki/HTTP_404" title="Wikipedia entry">a 404</a>. Using the
<code>DEBUG</code> verbosity level will identify this issue if you are struck by it.</p>

<p>Eventually, with the help of both Christian and Markus, the vdirsyncer
developer, I got it set up and running smoothly. I then just had to create
a <code>cron</code> job to sync my work calendar every two hours and it was done.</p>

<p>As you would expect with such a simple tool, there is not a lot to say, or do,
with vdirsycner. It runs on a similar model to
<a href="http://offlineimap.org/" title="Home page">OfflineIMAP</a>, in that it synchronises a
remote and local repository. There are a couple of nice touches: it will read
your credentials from <span class="file">$HOME/.netrc</span> so you don&rsquo;t have
to worry about sensitive information in plain text in yet another file, and there
is a <code>VDIRSYNCER_CONFIG</code> variable, so you can place the config file wherever it
suits.</p>

<h4>Notes</h4>

<p><a href="https://flic.kr/p/Re9Sb">Elevator</a>, a Creative Commons image on Flickr by Mykl Roventine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mutt and iCal]]></title>
    <link href="http://jasonwryan.com/blog/2014/04/05/calendar/"/>
    <updated>2014-04-05T09:48:00+13:00</updated>
    <id>http://jasonwryan.com/blog/2014/04/05/calendar</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/post_images/calendar.jpg" title="Creative Commons Calendar image" >
I have posted a few times now about how I use
<a href="http://www.mutt.org/" title="Mutt homepage">Mutt</a><sup>1</sup>, that most superlative
of email clients. Using a variety of different tools, I have
settled on an effective and satisfying workflow for managing both my personal
and professional email, with one glaring exception: calendaring. This, I should
stress, is not for want of trying. It is not necessarily a nagging concern in
terms of my personal use of email, but professionally it is a daily frustration.</p>

<p>Day after day, I receive a <em>lot</em> of meeting invitations and, when these show up
in my inbox they are, for all intents and purposes, unintelligble. Yes, with
careful scrutiny you can decypher the
<a href="http://en.wikipedia.org/wiki/ICalendar" title="Wikipedia entry">iCalendar files</a>, but
doing so is more likely to induce a seizure than a punctual appearance at an
important meeting. To get around this, I had been using a basic Awk script that
would parse the most important parts of the message and print them out. This was
working well enough until I started to receive invitations from people using
OSX. For some god-unknown reason, Apple&rsquo;s “interpretation” of the
standard<sup>2</sup> is different enough to those sent from Evolution and
Thunderbird that my script wouldn&rsquo;t successfully print some of the data (just
the start and end times of the meeting, nothing too important).</p>

<p>I started to try and expand the capability of the script and then realized that
I would be much better off seeing if someone else had solved this problem;
satisfactorily, that is.
<a href="https://github.com/terabyte/mutt-filters" title="Github fork of the repo">And they had</a>.
In a further delightful coincidence, the original author of the script,
<a href="https://github.com/martynsmith" title="Martyn's Github repo">Martyn Smith</a> is an
ex-colleague who, in 2004, first got me interested in Linux (thank you, Martyn).
Armed with this script and entries in <span class="file">$HOME/.mutt/{mailcap,muttrc}</span>
now, whenever I open a calendar invitation, the pertinent details are printed
out perfectly legibly. It&rsquo;s a small step, but an important one.</p>

<p>Next I started playing around with
<a href="http://lostpackets.de/khal/" title="khal homepage">khal</a>, a command line calendaring
application that uses
<a href="http://en.wikipedia.org/wiki/CalDAV" title="Wikipedia page">CalDav</a> to sync to
calendar servers. It is described as being in “the early stages of development”
and that certainly is the case. Nonetheless, it is incredibly promising as—even
in this rudimentary form—it performs well and offers most of the basics that I
require. khal is simple to setup, does not have too many (python2) dependencies
and handles multiple calendars<sup>3</sup>. Yes, there are bugs, but nothing
grievous and the developer,
<a href="http://lostpackets.de/blog/" title="Christian's blog">Christian Geier</a>, is very
responsive and helpful<sup>4</sup>.</p>

<p>The <a href="http://lostpackets.de/khal/pages/usage.html" title="Usage page">khal documentation</a>
gives you a pretty good idea of the current feature set. Set up your
<span class="file">khal.conf</span> with the calendars you want synched and then
you have two modes of interaction: directly via the command line or an
interactive mode invoked with <code>ikhal</code>. Both modes allow you to perform the basic
functions of adding, editing or deleting events.</p>

<p><img class="center" src="/images/post_images/khal.png" title="Simple screenshot of khal" ></p>

<p>While the interactive mode is very simple and straightforward, what I am most
excited about is the ability to add events from the command line, as per the
example in the documentation:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>khal <span class="p">&amp;</span>ndash<span class="p">;</span>new 25.10. 16:00 18:00 Another Event :: with Alice and Bob
</span></code></pre></td></tr></table></div></figure></p>

<p>I just needed to figure out a way to extract the relevant fields from the iCal
file and pass them to khal. My first attempt is unashamedly ugly, both in
conception and execution. However, I don&rsquo;t know Perl (and at this stage of my
life
<a href="https://twitter.com/jasonwryan/status/204660063669989376" title="Sad, but true…">I have run out of time to learn it</a>),
and it actually works. I
<a href="https://bitbucket.org/jasonwryan/shiv/src/tip/Scripts/ical_filter.pl" title="In my bitbucket repo">modified</a>
Martyn&rsquo;s script to write to a temp file and then, for iCal events I want to
import to khal, I bound a key sequence in Mutt to a simple Awk
script<sup>5</sup>:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='awk'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;!</span><span class="err">/usr/bin/awk -f&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">read</span> <span class="nx">from</span> <span class="nx">ical_filter</span><span class="p">.</span><span class="nx">pl</span> <span class="nx">and</span> <span class="nx">then</span> <span class="nx">send</span> <span class="nx">ical</span> <span class="nx">invitation</span> <span class="nx">details</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;in</span> <span class="nx">mutt</span> <span class="nx">to</span> <span class="nx">khal</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="sr">/^Summary/</span>   <span class="p">{</span> <span class="k">for</span> <span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="err">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">=</span><span class="nb">NF</span><span class="o">-</span><span class="mi">2</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="o">$</span><span class="nx">i</span> <span class="o">=</span> <span class="o">$</span><span class="p">(</span><span class="nx">i</span><span class="o">+</span><span class="mi">2</span><span class="p">);</span> <span class="nb">NF</span><span class="o">-=</span><span class="mi">2</span><span class="p">;</span> <span class="nx">summ</span> <span class="o">=</span> <span class="o">$</span><span class="mi">0</span> <span class="p">}</span>
</span><span class='line'><span class="sr">/^Location/</span>  <span class="p">{</span> <span class="k">for</span> <span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="err">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">=</span><span class="nb">NF</span><span class="o">-</span><span class="mi">2</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="o">$</span><span class="nx">i</span> <span class="o">=</span> <span class="o">$</span><span class="p">(</span><span class="nx">i</span><span class="o">+</span><span class="mi">2</span><span class="p">);</span> <span class="nb">NF</span><span class="o">-=</span><span class="mi">2</span><span class="p">;</span> <span class="nx">meet</span> <span class="o">=</span> <span class="o">$</span><span class="mi">0</span> <span class="p">}</span>
</span><span class='line'><span class="sr">/^Dtstart/</span>   <span class="p">{</span> <span class="nx">date_st</span> <span class="o">=</span> <span class="o">$</span><span class="mi">3</span><span class="p">;</span> <span class="nx">time_st</span> <span class="o">=</span> <span class="o">$</span><span class="mi">4</span> <span class="p">}</span>
</span><span class='line'><span class="sr">/^Dtend/</span>     <span class="p">{</span> <span class="nx">time_nd</span> <span class="o">=</span> <span class="o">$</span><span class="mi">4</span> <span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">END</span>          <span class="p">{</span> <span class="kr">print</span>  <span class="nx">date_st</span><span class="err">&quot;</span> <span class="err">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">time_st</span><span class="err">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="err">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">time_nd</span><span class="err">&amp;</span><span class="nx">rdquo</span><span class="p">;</span> <span class="err">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">summ</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>In <span class="file">$HOME/.mutt/muttrc</span>, I have
<kbd>Ctrl</kbd><kbd>k</kbd> in pager view trigger the script like so:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;save iCal to khal&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;macro pager <span class="se">\C</span>k  <span class="p">&amp;</span>ldquo<span class="p">;</span>!/usr/bin/khal <span class="p">&amp;</span>ndash<span class="p">;</span>new <span class="k">$(</span>~/Scripts/mutt2khal ~/.mutt/temp/caldata<span class="k">)</span><span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>Saving Calendar event<span class="p">&amp;</span>rdquo<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Neither elegant nor imaginative, I know; but for a first attempt, it gets the
job done. If I did know any Perl, I am sure I would be able to avoid the
additional temp file and the need to reread the information before handing it
off to khal, but you work with the skills (or lack thereof) that you have.
Needless to say, patches are welcomed.</p>

<h4>Notes</h4>

<ol>
<li>See all my mutt posts:

<ul>
<li><a href="http://jasonwryan.com/blog/2012/04/21/lbdb/">Using Mutt, LDAP and SSL</a></li>
<li><a href="http://jasonwryan.com/blog/2012/05/12/mutt/">Mutt and HTML Email</a></li>
<li><a href="http://jasonwryan.com/blog/2012/05/23/notmuch/">Using Notmuch with Mutt</a></li>
<li><a href="http://jasonwryan.com/blog/2013/07/20/gnupg/">Encrypting Mutt</a></li>
</ul>
</li>
<li>Yes, I understand how special Apple is but this is particularly annoying…</li>
<li>There is a <a href="https://aur.archlinux.org/packages/khal-git/">package in AUR</a>.</li>
<li>I <a href="https://github.com/geier/khal/issues/36">logged a bug</a> and it was fixed in a matter of hours.</li>
<li>The script is <a href="https://bitbucket.org/jasonwryan/shiv/src/tip/Scripts/mutt2khal">in my bitbucket repo</a>.</li>
</ol>


<p>Creative Commons image, <a href="https://flic.kr/p/4h1oE5">Calendar</a> by Angela Mabray.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Encrypting Mutt]]></title>
    <link href="http://jasonwryan.com/blog/2013/07/20/gnupg/"/>
    <updated>2013-07-20T09:36:00+12:00</updated>
    <id>http://jasonwryan.com/blog/2013/07/20/gnupg</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/post_images/key-board.jpg" title="Encrypted mail" >
With the torrent of recent revelations about the enthusiasm with which
the governments of most of the first world have been systematically and
unlawfully violating the privacy of their citizens by intercepting their digital
communications, I thought it worth adding to the posts I have written about
<a href="http://jasonwryan.com/blog/categories/mutt/" title="Posts on mutt">Mutt</a>—that most
peerless of email clients—specifically how, combined with
<a href="http://gnupg.org/" title="GPG home page">GnuPG</a>, you can encrypt all of your mail and
ensure that the only person reading it is the intended recipient.</p>

<p>The definitive guide for this setup remains Justin Miller&rsquo;s venerable page,
<a href="http://codesorcery.net/old/mutt/mutt-gnupg-howto" title="The title says it all, really…">Everything You Need To Know To Start Using GnuPG with Mutt</a>,
last edited in 2001 and <em>still</em> the authoritative source. The setup I will
describe differs only insofar as it covers how to use multiple keys associated
with different mail accounts. Mutt gives you the flexibility sign or encrypt all
of the email in your work account with one key, and your personal email with
another.</p>

<p>Once you have set up your GPG keys<sup>1</sup>, the first step is to configure
Mutt to use your keys. You can include these directives in your
<span class="file">muttrc</span> but, in the interests of readability, I prefer
to split them out into <span class="file">gpg.rc</span> and source them from
<span class="file">muttrc</span>. The settings are self-explanatory, those most
relevant to this post control how mutt handles your mail with respect to
encryption or just signing<sup>2</sup>:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">set </span><span class="nv">pgp_use_gpg_agent</span> <span class="o">=</span> yes
</span><span class='line'><span class="nb">set </span><span class="nv">pgp_sign_as</span> <span class="o">=</span> 43A5CE95
</span><span class='line'><span class="nb">set </span><span class="nv">pgp_timeout</span> <span class="o">=</span> 3600
</span><span class='line'><span class="nb">set </span><span class="nv">crypt_autosign</span> <span class="o">=</span> yes
</span><span class='line'><span class="nb">set </span><span class="nv">crypt_replyencrypt</span> <span class="o">=</span> yes
</span></code></pre></td></tr></table></div></figure></p>

<p>This sets my work key as the primary key and a couple of other sane (for me)
defaults. All of these options are described in <code>muttrc(5)</code>.
You can see my complete file in my
<a href="https://bitbucket.org/jasonwryan/shiv/src/default/.mutt/gpg.rc" title="mutt config files">bitbucket repo</a>.</p>

<p>The rest of the recipe is in <span class="file">muttrc</span>:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">source</span> ~/.mutt/gpg.rc            <span class="c"># use GPG&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;gpg key&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;send-hook <span class="p">&amp;</span>ldquo<span class="p">;</span>~f @catalyst.net.nz<span class="p">&amp;</span>rdquo<span class="p">;</span>  <span class="nb">set </span><span class="nv">pgp_sign_as</span><span class="o">=</span>43A5CE95
</span><span class='line'>send-hook <span class="p">&amp;</span>ldquo<span class="p">;</span>~f @jasonwryan.com<span class="p">&amp;</span>rdquo<span class="p">;</span>   <span class="nb">set </span><span class="nv">pgp_sign_as</span><span class="o">=</span>B1BD4E40&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;key binds&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;bind compose p  pgp-menu
</span><span class='line'>macro compose Y pfy <span class="p">&amp;</span>ldquo<span class="p">;</span>send mail without GPG<span class="p">&amp;</span>rdquo<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Sourcing the <span class="file">gpg.rc</span> reads all the relevant options
and then a series of <code>send-hooks</code> allow you to use specific keys for each of
your accounts.</p>

<p>Now, when you receive encrypted mail, if your key agent is running, Mutt will
decrypt your mail on the fly. Otherwise you will be prompted for your key
phrase. Similarly, when you send email, it will by default be signed by the key
associated with that account, and you can encrypt individual mail by bringing up
the GPG menu in the compose screen by hitting <kbd>p</kbd>.</p>

<p>And for those friends and acquaintances you correspond with for whom
encryption is the equivalent of white powder spilling from an envelope, you can
always elect to send without any GPG by selecting <kbd>Y</kbd> to send the
email.</p>

<p>These and a number of other interesting tips and macros are on the
<a href="http://dev.mutt.org/trac/wiki/MuttGuide/UseGPG" title="Using GPG">Mutt Wiki</a>
and are worth following up once you have the basics working. Like so much of
this sort of software, it takes a little longer to set up <em>exactly</em> the way that
you want it, but once you are done, it is good for decades…</p>

<h4>Notes</h4>

<ol>
<li>A good introduction to this procedure is detailed in the
<a href="https://wiki.archlinux.org/index.php/GPG">Arch Wiki article</a>.</li>
<li>This assumes that you do want to distinguish between the two; you could, of
course, just encrypt <em>everything</em>—assuming that your correspondents were
willing and able to decrypt it…</li>
</ol>


<p>Creative Commons image by <a href="http://www.flickr.com/photos/54450095@N05/8229504229/">Intel Free Press</a> on Flickr.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Notmuch with Mutt]]></title>
    <link href="http://jasonwryan.com/blog/2012/05/23/notmuch/"/>
    <updated>2012-05-23T19:37:00+12:00</updated>
    <id>http://jasonwryan.com/blog/2012/05/23/notmuch</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/post_images/magnifier.png" title="day 307 on Flickr" >
Seeing as I have been focussing on my mail client, I thought I would round out the trifecta of
<a href="http://www.mutt.org/" title="Mutt homepage">Mutt</a> posts<sup>1</sup> with what I am assuming is the
final piece of the puzzle: searching <code>mutt's</code> maildirs. For a small to average size mailbox, <code>mutt's</code>
searching works fine, but as your mail volume grows this simple search doesn&rsquo;t really scale. That&rsquo;s
where the rather modestly named <a href="http://notmuchmail.org/" title="Notmuch website">Notmuch</a> comes into play.</p>

<p>It can be run as a standalone mail client, but you can also use it with <code>mutt</code> to provide
a ruthlessly efficient and fast search tool for your email. I had looked at it and
<a href="http://sup.rubyforge.org/" title="A console client for people with lots of mail">Sup</a>
a couple of years ago, but was spurred to do something about it this week when
<a href="https://twitter.com/#!/chosig" title="Chosig on Twitter">Gunnar Lundström</a> pinged me on twitter and
suggested I check it out. So I did.</p>

<p><blockquote><p>&ldquo;Not much mail&rdquo; is what Notmuch thinks about your email collection. Even if you receive 12000<br/>messages per month or have on the order of  millions of messages that you&rsquo;ve been saving for decades.<br/>Regardless, Notmuch will be able to quickly search all of it. It&rsquo;s just plain not much mail.</p><footer><strong>Notmuch website <a href="http://notmuchmail.org">http://notmuchmail.org</a></strong></footer></blockquote></p>

<p>There was previously a
<a href="http://upsilon.cc/~zack/blog/posts/2011/01/how_to_use_Notmuch_with_Mutt/">mutt-notmuch script</a>
for integrating the two, but the functionality was included upstream at the start of this year
so it is quite straightforward to set it up. There is a
<a href="http://aur.archlinux.org/packages.php?ID=36289" title="Arch User Repository package">package in the AUR</a>
but it is intended as the full mail client, complete with, <em>shudder</em>, emacs support amongst
other things. I have stripped out the uneeded bindings and included the relevant <code>perl</code> libraries in a
<a href="https://bitbucket.org/jasonwryan/centurion/src/6ff0f252961f/Build/notmuch/PKGBUILD" title="…in my bitbucket repo">modified PKGBUILD</a>
if you just want the basic search with <code>mutt</code>.</p>

<p>Otherwise, you&rsquo;ll need to step through it manually.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>pacman -S perl perl-mailtools perl-mail-box perl-string-shellquote
</span><span class='line'>cowerd notmuch perl-term-readline-gnu
</span></code></pre></td></tr></table></div></figure></p>

<p>As you will see from the PKGBUILD, you will need to copy the <code>notmuch-mutt</code> script
into your <code>$PATH</code>: you&rsquo;ll find it in <span class="file">contrib/notmuch-mutt/</span>.</p>

<p>There is a simple interative setup, which you can complete before running the index the first time:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>notmuch setup
</span><span class='line'>notmuch new
</span></code></pre></td></tr></table></div></figure></p>

<p>The final step is to copy across the <code>mutt</code> macros included with the script:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>cat src/notmuch-0.13/contrib/notmuch-mutt/notmuch-mutt.rc &gt;&gt; <span class="nv">$HOME</span>/.mutt/muttrc
</span></code></pre></td></tr></table></div></figure></p>

<p>Now, from within <code>mutt</code>, <kbd>F8</kbd>, <kbd>F9</kbd> and <kbd>F6</kbd> will respectively
search, create the relevant threads from search results, and tag mails with <code>notmuch</code>.</p>

<p>As I use <code>offlineimap</code> to retrieve my mail, I simply added <code>notmuch new</code> to the script that
runs as a <code>cron</code> job to synch my mail and <code>notmuch</code> reindexes all of my mail as soon as it arrives.</p>

<h3>Updated 27/5/12</h3>

<p>Two of the <code>mutt</code> macros that are shipped in <span class="file">contrib/notmuch-mutt/notmuch-mutt.rc</span>
do not work. I have written a patch to fix this and
<a href="http://notmuchmail.org/pipermail/notmuch/2012/011263.html" title="Patch on notmuch list">posted it to the ML</a>.</p>

<h4>Notes</h4>

<ol>
<li><a href="http://jasonwryan.com/blog/2012/04/21/lbdb/">Using Mutt, LDAP and SSL</a> and
<a href="http://jasonwryan.com/blog/2012/05/12/mutt/">Mutt and HTML email</a></li>
</ol>


<p>Creative Commons image by
<a href="http://www.flickr.com/photos/mjtmail/3008566512/in/photostream/">mjtmail on Flickr</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mutt and HTML email]]></title>
    <link href="http://jasonwryan.com/blog/2012/05/12/mutt/"/>
    <updated>2012-05-12T15:49:00+12:00</updated>
    <id>http://jasonwryan.com/blog/2012/05/12/mutt</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/post_images/mutt-1.png" title="&lsquo;mutt logo&rsquo;" ></p>

<p>Following on from my <a href="http://jasonwryan.com/blog/2012/04/21/lbdb/" title="Using Mutt, LDAP and SSL">last post about Mutt</a>,
I have been tinkering more with the most suckless of mail clients to
get it to deal with—of all things—<acronym title="HyperText Markup Language">HTML</acronym>
emails. I will preface this post with a remark or two that amounts to a warning about
intemperate language, ranting and a generally cranky disposition: repeated contact with
email marketers can do that to you…</p>

<p>A further  brief digression is warranted here. HTML email is, without doubt,
evidence of the imminent end of civilized life as we know it; much like the
<a href="http://en.wikipedia.org/wiki/Places_in_The_Hitchhiker's_Guide_to_the_Galaxy#Golgafrincham" title="Wikipedia entry on HHGTTG">Golgafrincham diaspora</a>, it is attributable to a depraved cabal of marketing consultants
and provides the same level of social good as syphilis and fistulas. Suffice to say, it is a blight.</p>

<p>Sadly, it is a blight that I have to deal with. Up until now, I had done that by using the
excellent <a href="http://w3m.sourceforge.net/" title="w3m homepage on sourceforge">w3m</a> to render
HTML as text in Mutt itself. That is accomplished easily enough with an entry in
<span class="file">muttrc</span> and another in a <span class="file">mailcap</span> file.</p>

<p><figure class='code'><figcaption><span>~/.mutt/muttrc </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>auto_view text/html                                      <span class="c"># view html automatically</span>
</span><span class='line'>alternative_order text/plain text/enriched text/html     <span class="c"># save html for last</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>~/.mutt/mailcap </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>text/html; w3m -I %<span class="o">{</span>charset<span class="o">}</span> -T text/html; copiousoutput;
</span></code></pre></td></tr></table></div></figure></p>

<p>This works for 80 percent of the HTML email I get. It is enough to confirm that the mail is useless
and can be discarded. The other 20 percent, however, is slightly more problematic. The initial
view in w3m is enough to tell me that, due to the outstanding incompetence of the idiots that
generated the email, there <em>is</em> actually some information that is contained in the email that I need
to access <strong>but it is not viewable in a text browser.</strong></p>

<p><img class="left" src="/images/post_images/mutt-2.png" title="&lsquo;An example…&rsquo;" ></p>

<p>For this special level of retardation, I need to be able to open the email in a graphical browser.
As I use vimprobable, that means sending the file to
<a href="http://jasonwryan.com/blog/2011/06/26/using-vimprobable/" title="My post on Using vimprobable">vimprobable running in tabbed</a>. Fortunately, as you would expect with superior software,
<code>mutt</code> has a way of handling this gracefully. In Mutt&rsquo;s extensive documentation, there is a
<a href="http://www.mutt.org/doc/manual/manual-5.html" title="Go and read it…">page on Mutt&rsquo;s MIME support</a>
that details how to set up a graduated response to this pernicious issue:</p>

<p><blockquote><p>In addition, you can use this with Autoview to denote two commands for viewing<br/>an attachment, one to be viewed automatically, the other to be viewed<br/>interactively from the attachment menu.</p><footer><strong>Mutt manual <a href="http://www.mutt.org/doc/manual/manual-5.html">http://www.mutt.org/doc/manual/manual-5.html</a></strong></footer></blockquote></p>

<p>So, you can have <code>mutt</code> render the HTML abomination in <code>w3m</code> in most cases, and when those
instances of particularly cretinous behaviour make it to your inbox, you can choose to
view them in your web browser. In my case, by altering the <span class="file">mailcap</span>
entry to look like this:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>text/html<span class="p">;</span> vimprobtab.sh %s <span class="p">&amp;;</span> <span class="nb">test</span><span class="o">=</span><span class="nb">test</span> -n <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$DISPLAY</span><span class="p">&amp;</span>rdquo<span class="p">;;</span> needsterminal<span class="p">;</span>
</span><span class='line'>text/html<span class="p">;</span> w3m -I %<span class="o">{</span>charset<span class="o">}</span> -T text/html<span class="p">;</span> copiousoutput<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The first entry tests that X is running, and if it is, it hands the file to <code>vimprobable</code>. The
default, however, is determined by the <code>copiousoutput</code> tag. So, in <code>mutt</code> it is just a matter
of hitting <kbd>v</kbd> to view the attached HTML and then <kbd>m</kbd> to send it to <code>mailcap</code>.
For convenience, I bind <kbd>Enter</kbd> to that function in <span class="file">muttrc</span>:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">bind </span>attach &lt;<span class="k">return</span>&gt;    view-mailcap
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
</feed>
