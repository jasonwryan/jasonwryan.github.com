<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: bash | jasonwryan.com]]></title>
  <link href="http://jasonwryan.com/blog/categories/bash/atom.xml" rel="self"/>
  <link href="http://jasonwryan.com/"/>
  <updated>2021-01-03T20:29:57+13:00</updated>
  <id>http://jasonwryan.com/</id>
  <author>
    <name><![CDATA[Jason Ryan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Playing with overlayfs]]></title>
    <link href="http://jasonwryan.com/blog/2015/01/19/overlayfs/"/>
    <updated>2015-01-19T08:20:00+13:00</updated>
    <id>http://jasonwryan.com/blog/2015/01/19/overlayfs</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/post_images/jello.jpg" title="Creative Commons Image" >
Around this time last year, I posted about setting up a
<a href="http://jasonwryan.com/blog/2014/01/20/udev/" title="Post in Jan 14">udev rule to run a script</a>
when I plugged my USB drive containing all of my music into one of my
laptops; the script, a
<a href="https://gist.github.com/jasonwryan/0df98a396af89bf82eb6" title="A gist…">couple of lines of bash</a>,
removes all pre-existing symlinks to <span class="file">$HOME/Music</span> and
repopulates the directory with an updated set. Almost. The one flaw that has
been an irritant of variable intensity, depending on what I felt like listening
at any given time, is that the symlinks aren&rsquo;t written for directories that
already exist on the target filesystem.</p>

<p>In order that I am able to play some music if I forget the USB drive, each of
the laptops has a subset of albums on it, depending on the size of their
respective hard drives. If I add a new album to the USB drive, then that change won&rsquo;t
get written to either of the laptops when the drive is plugged in. Not entirely
satisfactory. I had tinkered around with
<a href="http://mywiki.wooledge.org/glob" title="Wooledge wiki entry">globbing</a>, or with
having <a href="http://mywiki.wooledge.org/UsingFind" title="Wooledge again, because it is so great…"><code>find(1)</code></a>
scan deeper into the tree, or even a loop to check for the presence of directories in an array…</p>

<p>It just got too hard. My rudimentary scripting skills and the spectre of recursion,
I am sorry to admit, conspired to undermine my resolve. So, rather than concede
unconditional surrender, I
<a href="http://unix.stackexchange.com/q/179397/6761%20'Question%20on%20Unix%20&amp;%20Linux%20SE">asked for help</a>.
As is almost always the case in these situations, this proved to be a particularly
wise move; the response I received was neither what I expected, nor was it anything I
was even remotely familiar with: so in addition to an excellent solution (one far
better suited to what I was trying to achieve), I learned something new.</p>

<p>The first comment on my question proved singularly insightful.</p>

<p><blockquote><p>Care to use union mounts, for example via overlayfs?</p><footer><strong>muru on U&amp;L <a href="https://unix.stackexchange.com/questions/179397/create-symlink-tree-in-existing-directories#comment298386_179397">https://unix.stackexchange.com/questions/179397/create-symlink-tree-in-existing-directories#comment298386_179397</a></strong></footer></blockquote></p>

<p>A union mount, something until now I was blissfully unaware of, is according to Wikipedia,</p>

<p><blockquote><p>a mount that allows several filesystems to be mounted at one time, appearing to be one filesystem.</p><footer><strong><a href="https://en.wikipedia.org/wiki/Union_filesystem">https://en.wikipedia.org/wiki/Union_filesystem</a></strong></footer></blockquote></p>

<p>Union mounting has a long and storied history on Unix, beginning in 1993 with the
<a href="http://icapeople.epfl.ch/almesber/ifs.html" title="IFS page">Inheriting File System (IFS)</a>.
The genealogy of these mounts has been well covered in this 2010 LWN
<a href="http://lwn.net/Articles/396020/" title="LWN.net">article by Valerie Aurora</a>. However, it is only
in the current kernel, 3.18, that a union mount has been accepted into the kernel tree.</p>

<p>After reading the
<a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/Documentation/filesystems/overlayfs.txt" title="Kernel docs">documentation for overlayfs</a>, it seemed this was <em>exactly</em> what I
was looking for. Essentially, an overlay mount would allow me to “merge"
the underlying tree (the Music directory on the USB drive) with an “upper”
one, <span class="file">$HOME/Music</span> on the laptop, <em>completely
seamlessly</em>.</p>

<p><blockquote><p>Then whenever a lookup is requested in such a merged directory, the lookup is performed in each actual directory and the combined result is cached in the dentry belonging to the overlay filesystem.</p><footer><strong>Kernel docs</strong></footer></blockquote></p>

<p>It was the just a matter of adapting my script to use <code>overlayfs</code>, which was
trivial:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/usr/bin/env bash&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;union mount Music when Apollo plugged in&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;low<span class="o">=</span>/media/Apollo/Music
</span><span class='line'><span class="nv">upp</span><span class="o">=</span>/home/jason/Music
</span><span class='line'><span class="nv">wod</span><span class="o">=</span>/home/jason/.local/tmp
</span><span class='line'><span class="nb">export </span><span class="nv">DISPLAY</span><span class="o">=</span>:0
</span><span class='line'><span class="nb">export </span><span class="nv">XAUTHORITY</span><span class="o">=</span>/home/jason/.Xauthority&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;overlayfs mount&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;mount -t overlay -o <span class="nv">lowerdir</span><span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$low</span><span class="p">&amp;</span>rdquo<span class="p">;</span>,upperdir<span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$upp</span><span class="p">&amp;</span>rdquo<span class="p">;</span>,workdir<span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$wod</span><span class="p">&amp;</span>rdquo<span class="p">;</span> overlay <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$upp</span><span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'><span class="nv">status1</span><span class="o">=</span><span class="nv">$?</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;mpc update <span class="p">&amp;</span>amp<span class="p">;</span>&gt;/dev/null
</span><span class='line'><span class="nv">status2</span><span class="o">=</span><span class="nv">$?</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;if <span class="o">[[</span> <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$status1</span><span class="p">&amp;</span>rdquo<span class="p">;</span> -eq <span class="m">0</span> <span class="p">&amp;</span>amp<span class="p">;&amp;</span>amp<span class="p">;</span> <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$status2</span><span class="p">&amp;</span>rdquo<span class="p">;</span> -eq <span class="m">0</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    <span class="nb">printf</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>^fg<span class="o">(</span><span class="c">#BF85CC)%s\n&amp;rdquo; &amp;ldquo;Music directory updated&amp;rdquo; | dzen2 -p 3</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>And now, when I plug in the USB drive, the contents of the drive are merged
with my local music directory, and I can access whichever album I feel inclined
to listen to. I can also copy files across to the local machines, knowing if I
update the portable drive, it will no longer mean I have to forego listening to
any newer additions by that artist in the future (without manually intervening,
anyway).</p>

<p>Overall, this is a lightweight union mount. There is neither a lot of functionality,
nor complexity. As the
<a href="https://github.com/torvalds/linux/commit/e9be9d5e76e34872f0c37d72e25bc27fe9e2c54c" title="Git commit">commit note</a>
makes clear, this “simplifies the implementation and allows native performance
in these cases.” Just note the warning about attempting to write to a mounted
underlying filesystem, where the behaviour is described as “undefined”.</p>

<h4>Notes</h4>

<p>Creative Commons image, <a href="https://flic.kr/p/5RRRXP">mulitlayered jello</a> by Frank Farm.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pruning Tarsnap Archives]]></title>
    <link href="http://jasonwryan.com/blog/2014/10/25/snapclean/"/>
    <updated>2014-10-25T09:38:00+13:00</updated>
    <id>http://jasonwryan.com/blog/2014/10/25/snapclean</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/post_images/tarsnap-logo.png" title="Tarsnsap Logo" >
I started using <a href="http://www.tarsnap.com/" title="Tarsnap website">Tarsnap</a> about
<a href="http://jasonwryan.com/blog/2011/09/08/tarsnap/" title="Post on Tarsnap">three years ago</a>
and I have been nothing but impressed with it since. It is simple to use,
<em>extremely</em> cost effective and, more than once, it has saved me from myself;
making it easy to retrieve copies of files that I have inadvertently
overwritten or otherwise done stupid things with<sup>1</sup>.  When I
<a href="http://jasonwryan.com/blog/2011/09/08/tarsnap/" title="Post on Tarsnap">first posted about it</a>,
I included a
<a href="https://bitbucket.org/jasonwryan/shiv/src/tip/Scripts/snap" title="In Bitbucket repo">simple wrapper script</a>,
which has held up pretty well over that time.</p>

<p>What became apparent over the last couple of months, as I began to consciously
make more regular backups, was that pruning the archives was a relatively
tedious business. Given that Tarsnap
<a href="http://www.tarsnap.com/efficiency.html" title="Tarsnap efficiency page">de-duplicates data</a>,
there isn&rsquo;t much mileage in keeping around older archives because, if you do
have to retrieve a file, you don&rsquo;t want to have to search through a large
number of archives to find it; so there is a balance between making use of
Tarsnap&rsquo;s efficient functionality, and not creating a rod for your back if your
use case is occasionally retrieving single—or small groups of—files, rather
than large dumps.</p>

<p>I have settled on keeping five to seven archives, depending on the frequency of
my backups, which is somewhere around two to three times a week. Pruning these
archives was becoming tedious, so I wrote a simple script to make it less
onerous. Essentially, it writes a list of all the archives to a
<span class="file">tmpfile</span>, runs
<a href="http://linux.die.net/man/1/sort" title="sort man page">sort(1)</a>
to order them from oldest to newest, and then deletes the oldest minus whatever
the number to keep is set to.</p>

<p>The bulk of the code is simple enough:</p>

<p><figure class='code'><figcaption><span>snapclean </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;generate list&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;tarsnap <span class="p">&amp;</span>ndash<span class="p">;</span>list-archives &gt; <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$tmpfile</span><span class="p">&amp;</span>rdquo<span class="p">;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;sort by descending date, format is: host-ddmmyy_hh:mm&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">{</span>
</span><span class='line'>  rm <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$tmpfile</span><span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="p">&amp;</span>amp<span class="p">;&amp;</span>amp<span class="p">;</span> sort -k 1.11,1.10 -k 1.8,1.9 -k 1.7,1.6 &gt; <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$tmpfile</span><span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'><span class="o">}</span> <span class="p">&amp;</span>lt<span class="p">;</span> <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$tmpfile</span><span class="p">&amp;</span>rdquo<span class="p">;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;populate the list&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;mapfile -t archives <span class="p">&amp;</span>lt<span class="p">;</span> <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$tmpfile</span><span class="p">&amp;</span>rdquo<span class="p">;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;print the full list&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;printf <span class="p">&amp;</span>ldquo<span class="p">;</span>%s<span class="se">\n</span>%s<span class="se">\n</span><span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="k">${</span><span class="nv">cyn</span><span class="k">}</span>Current archives<span class="k">${</span><span class="nv">end</span><span class="k">}</span>:<span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="k">${</span><span class="nv">archives</span><span class="p">[@]#*-</span><span class="k">}</span><span class="p">&amp;</span>rdquo<span class="p">;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;identify oldest archives&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;remove<span class="o">=</span><span class="k">$((</span> <span class="k">${#</span><span class="nv">archives</span><span class="p">[@]</span><span class="k">}</span> <span class="o">-</span> keep <span class="k">))</span>
</span><span class='line'><span class="nv">targets</span><span class="o">=(</span> <span class="k">$(</span>head -n <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$remove</span><span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$tmpfile</span><span class="p">&amp;</span>rdquo<span class="p">;</span><span class="k">)</span> <span class="o">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;if there is at least one to remove&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;if <span class="o">((</span> <span class="k">${#</span><span class="nv">targets</span><span class="p">[@]</span><span class="k">}</span> &gt;<span class="o">=</span> <span class="m">1</span> <span class="o">))</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="nb">printf</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>%s<span class="se">\n</span><span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="k">${</span><span class="nv">red</span><span class="k">}</span>Archives to delete<span class="k">${</span><span class="nv">end</span><span class="k">}</span>:<span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>  <span class="nb">printf</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>%s<span class="se">\n</span><span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="k">${</span><span class="nv">targets</span><span class="p">[@]#*-</span><span class="k">}</span><span class="p">&amp;</span>rdquo<span class="p">;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  <span class="nb">read</span> -p <span class="p">&amp;</span>ldquo<span class="p">;</span>Proceed with deletion? <span class="o">[</span><span class="k">${</span><span class="nv">red</span><span class="k">}</span>Y<span class="k">${</span><span class="nv">end</span><span class="k">}</span>/N<span class="o">]</span> <span class="p">&amp;</span>rdquo<span class="p">;</span> YN&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  <span class="k">if</span> <span class="o">[[</span> <span class="nv">$YN</span> <span class="o">==</span> Y <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    <span class="k">for</span> archive in <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="k">${</span><span class="nv">targets</span><span class="p">[@]</span><span class="k">}</span><span class="p">&amp;</span>rdquo<span class="p">;;</span> <span class="k">do</span>
</span><span class='line'>      tarsnap -d <span class="p">&amp;</span>ndash<span class="p">;</span>no-print-stats -f <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$archive</span><span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>    <span class="k">done</span> <span class="p">&amp;</span>amp<span class="p">;&amp;</span>amp<span class="p">;</span> <span class="nb">printf</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>%s<span class="se">\n</span><span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="k">${</span><span class="nv">yel</span><span class="k">}</span>Archives successfully deleted<span class="p">&amp;</span>hellip<span class="p">;</span><span class="k">${</span><span class="nv">end</span><span class="k">}</span><span class="p">&amp;</span>rdquo<span class="p">;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;printf <span class="s2">&quot;\n%s\n&quot;</span> <span class="s2">&quot;${cyn}Remaining archives:${end}&quot;</span>
</span><span class='line'>tarsnap --list-archives
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  <span class="k">else</span>
</span><span class='line'>    <span class="nb">printf</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>%s<span class="se">\n</span><span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="k">${</span><span class="nv">yel</span><span class="k">}</span>Operation aborted<span class="k">${</span><span class="nv">end</span><span class="k">}</span><span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="nb">printf</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>%s<span class="se">\n</span><span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>Nothing to <span class="k">do</span><span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>  <span class="nb">exit </span>0
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>You can see the rest of the script in
<a href="https://bitbucket.org/jasonwryan/shiv/src/tip/Scripts/snapclean" title="snapclean in bitbucket">my bitbucket repo</a>.  It even comes <a href="/images/post_images/snapclean.png" title="Screenshot of snapclean">with colour</a>.</p>

<p>Once every couple of weeks, I run the script, review the archives marked for
deletion and then blow them away. Easy. If you aren&rsquo;t using Tarsnap, you
really should check it out; it is an excellent service and—for the almost
ridiculously small investment—you get rock solid, encrypted peace of
mind. Why would you not do that?</p>

<h3>Coda</h3>

<p>This is the <em>one hundredth</em> post on this blog: a milestone that I never
envisaged getting anywhere near. Looking back through the posts, nearly 60,000
words worth, there are a couple there that continue to draw traffic and are
obviously seen at some level as helpful.  There are also quite a few that
qualify as “filler”, but blogging is a discipline like any other and sometimes
you just have to push something up to keep the rhythm going. In any event, this
is a roundabout way of saying that, for a variety of reasons both personal and
professional, I am no longer able to fulfil my own expectations of regularly
pushing these posts out.</p>

<p>I will endeavour to, from time to time when I find something that I genuinely
think is worth sharing, make an effort to write about it, but I can&rsquo;t see that
happening all that often.  I&rsquo;d like to thank all the people that have read
these posts; especially those of you that have commented. With every post, I
always looked forward to people telling me where I got something wrong or how I
could have approached a problem differently or more effectively<sup>2</sup>; I
learned a lot from these pointers and I am grateful to the people that were
generous enough to share them.</p>

<h4>Notes</h4>

<ol>
<li>The frequency with which this happens is, admittedly, low; but not
low enough to confidently abandon a service like this…</li>
<li>Leaving a complimentary note is just as welcome, don&rsquo;t get me wrong…</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pass{,word} manager]]></title>
    <link href="http://jasonwryan.com/blog/2014/08/02/password/"/>
    <updated>2014-08-02T09:28:00+12:00</updated>
    <id>http://jasonwryan.com/blog/2014/08/02/password</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/post_images/key-board.jpg" title="Creative Commons image on Flickr" >
After posting last week about
<a href="http://jasonwryan.com/blog/2014/07/25/keepass/" title="Redundant blog post">KeePassC as a password manager</a>,
a couple of people immediately commented about a utility billed as “the
standard Unix password manager.” This is definitely one of the reasons I
continue to write up my experiences with free and open source software: as soon
as you think that you have learned something, someone will either offer a
correction or encourage you to explore something else that is similar, related
or interesting for some other tangential reason.</p>

<p>So, I was off down that path… Called simply <a href="http://www.passwordstore.org/" title="Homepage">pass</a>,
it is a 600 line bash script that uses
<a href="http://en.wikipedia.org/wiki/GNU_Privacy_Guard" title="Wikpedia entry">GPG encryption</a>
and some other standard tools and scripts to organize and manage your password
files. I had never heard of it but, based on Cayetano and Bigby&rsquo;s
recommendations, I thought it would be worth a look.</p>

<p>On of the reasons that I had not come across it before was that, after using
<a href="http://www.keepassx.org/" title="KeePassX homepage">KeePassX</a> for so long, I had
assumed that I would need to continue to use that database format; so when I
was looking for an alternative,
<a href="http://raymontag.github.io/keepassc/" title="KeePassC homepage">KeePassC</a>
was a natural fit (and a fine application). The question of migrating my data
hadn&rsquo;t even occurred to me…</p>

<p>It turns out that the migration process to pass is extraordinarily well catered
for: there are
<a href="http://git.zx2c4.com/password-store/tree/contrib/importers" title="pass git repo">10 migration scripts</a>
for a range of different formats, including
<a href="http://git.zx2c4.com/password-store/tree/contrib/importers/keepassx2pass.py" title="Said script…">keepassx2pass.py</a>,
which takes the exported <acronym title="Extensible Markup Language">XML</acronym>
KeePassX database file and creates your pass files,ordered by the schema you
had used in that application.  You just need to make sure you amend the shebang
to <code>python2</code> before running the script, otherwise it will fail with an
unhelpful error message.</p>

<p>After using KeePassX to dump my database, before I could use the script to
create my pass directories, I had to export the <code>PASSWORD_STORE_DIR</code>
environment variable to place the top level pass directory in an alternate
location. This way, instead of initializing a git repository, I could have the
store synced by
<a href="http://jasonwryan.com/blog/2014/05/10/syncthing/" title="My post on Syncthing">Syncthing</a>.
The git idea is a good one, but I&rsquo;m not particularly interested in version
controlling these directories, and I have no intention, encrypted or not, of
pushing them to someone else&rsquo;s server.</p>

<p>That constitutes the basic setup. It took a grand total of five minutes. The
real strength of pass, however, is in its integration with two other fantastic
tools:
<a href="http://www.funtoo.org/Keychain" title="Keychain homepage">keychain</a> and
<a href="http://tools.suckless.org/dmenu/" title="Another quality Suckless product">dmenu</a>.
Together with pass, these constitute a secure, convenient and effortless
workflow for managing your passwords. With your GPG key loaded into keychain,
you are only prompted for your master passphrase once<sup>1</sup> and with
Chris Down&rsquo;s excellent
<a href="http://git.zx2c4.com/password-store/tree/contrib/dmenu/passmenu" title="In the pass repo">passmenu script</a>,
you can use dmenu to sort through your password files, <kbd>Tab</kbd> complete
the one you are looking for and have it copied to your clipboard with a couple
of keystrokes.</p>

<p>After using Chris' script for a couple of days, I made a few alterations to
suit my setup: removed the <code>xdotool</code> stuff (as I don&rsquo;t need it), included dmenu
formatting options to match my
<a href="https://bitbucket.org/jasonwryan/shiv/src/tip/Scripts/dwm-status" title="In my bitbucket repo">dwm statusbar</a>
and, most significantly, changed the way that the files are printed in dmenu to
remove the visual clutter of the parent directories, ie., print <span class="file">archwiki</span>
as opposed to <span class="file">internet/archwiki</span>:</p>

<p><figure class='code'><figcaption><span>dpass </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/usr/bin/env bash&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;based on: &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/cdown/passmenu&quot;</span>&gt;https://github.com/cdown/passmenu&lt;/a&gt;&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;shopt -s nullglob globstar&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;nb<span class="o">=</span><span class="p">&amp;</span>lsquo<span class="p">;</span><span class="c">#121212&amp;rsquo;</span>
</span><span class='line'><span class="nv">nf</span><span class="o">=</span><span class="p">&amp;</span>lsquo<span class="p">;</span><span class="c">#696969&amp;rsquo;</span>
</span><span class='line'><span class="nv">sb</span><span class="o">=</span><span class="p">&amp;</span>lsquo<span class="p">;</span><span class="c">#121212&amp;rsquo;</span>
</span><span class='line'><span class="nv">sf</span><span class="o">=</span><span class="p">&amp;</span>lsquo<span class="p">;</span><span class="c">#914E89&amp;rsquo;</span>
</span><span class='line'><span class="nv">font</span><span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;</span>Dejavu Sans Mono:medium:size<span class="o">=</span>7.5<span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'><span class="nv">dmenucmd</span><span class="o">=(</span> dmenu -i -fn <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$font</span><span class="p">&amp;</span>rdquo<span class="p">;</span> -nb <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$nb</span><span class="p">&amp;</span>rdquo<span class="p">;</span> -nf <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$nf</span><span class="p">&amp;</span>rdquo<span class="p">;</span> -sb <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$sb</span><span class="p">&amp;</span>rdquo<span class="p">;</span> -sf <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$sf</span><span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="o">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;prefix<span class="o">=</span><span class="k">${</span><span class="nv">PASSWORD_STORE_DIR</span><span class="k">:-</span><span class="p">~/.password-store</span><span class="k">}</span>
</span><span class='line'><span class="nv">files</span><span class="o">=(</span> <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$prefix</span><span class="p">&amp;</span>rdquo<span class="p">;</span>/&lt;em&gt;&lt;em&gt;/&lt;/em&gt;.gpg <span class="o">)</span>
</span><span class='line'><span class="nv">files</span><span class="o">=(</span> <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="k">${</span><span class="nv">files</span><span class="p">[@]#&amp;rdquo;</span><span class="nv">$prefix</span><span class="err">&quot;</span><span class="p">/</span><span class="k">}</span><span class="p">&amp;</span>ldquo<span class="p">;</span> <span class="o">)</span>
</span><span class='line'><span class="nv">files</span><span class="o">=(</span> <span class="p">&amp;</span>rdquo<span class="p">;</span><span class="k">${</span><span class="nv">files</span><span class="p">[@]%.gpg</span><span class="k">}</span><span class="p">&amp;</span>ldquo<span class="p">;</span> <span class="o">)</span>
</span><span class='line'><span class="nv">fbase</span><span class="o">=(</span> <span class="p">&amp;</span>rdquo<span class="p">;</span><span class="k">${</span><span class="nv">files</span><span class="p">[@]##&lt;/em&gt;/</span><span class="k">}</span><span class="p">&amp;</span>ldquo<span class="p">;</span> <span class="o">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;word<span class="o">=</span><span class="k">$(</span><span class="nb">printf</span> <span class="p">&amp;</span>lsquo<span class="p">;</span>%s<span class="se">\n</span><span class="p">&amp;</span>rsquo<span class="p">;</span> <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="k">${</span><span class="nv">fbase</span><span class="p">[@]</span><span class="k">}</span><span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="p">|</span> <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="k">${</span><span class="nv">dmenucmd</span><span class="p">[@]</span><span class="k">}</span><span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$@</span><span class="p">&amp;</span>rdquo<span class="p">;</span><span class="k">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;if <span class="o">[[</span> -n <span class="nv">$word</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>  <span class="k">for</span> match in <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="k">${</span><span class="nv">files</span><span class="p">[@]</span><span class="k">}</span><span class="p">&amp;</span>rdquo<span class="p">;;</span> <span class="k">do</span>&lt;br/&gt;
</span><span class='line'>    <span class="k">if</span> <span class="o">[[</span> <span class="nv">$word</span> <span class="o">==</span> <span class="k">${</span><span class="nv">match</span><span class="p">#*/</span><span class="k">}</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>      /usr/bin/pass show -c <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$match</span><span class="p">&amp;</span>rdquo<span class="p">;</span> 2&gt;/dev/null
</span><span class='line'>    <span class="k">fi</span>&lt;br/&gt;
</span><span class='line'>  <span class="k">done</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>It does introduce some more complexity into the script, but it makes it a lot
easier for me to identify the desired password when reading it in dmenu.</p>

<p>Now, when I need a to enter a password, I hit my dmenu hotkey, type <code>dpass</code>
<kbd>Enter</kbd> and the first couple of letters of the desired password
filename, <kbd>Tab</kbd><kbd>Enter</kbd> and the password is loaded and ready
to go. There are also
<a href="http://git.zx2c4.com/password-store/tree/src/completion" title="Git repo">completion scripts</a>
for the main shells, and even one for
<a href="http://fishshell.com/" title="Fish homepage">fish</a><sup>2</sup> for the iconoclasts…</p>

<p>While I have no complaints at all with KeePassC, I have found this pass setup to
be a lot less intrusive to use, it seamlessly integrates with my workflow,
and the passwords themselves are much simpler to manage. Short of someone else
popping up in the comments with another compelling proposition, I&rsquo;m content
with the way this has worked out. Many thanks to Cayetano Santos and Bigby
James for the push.</p>

<h4>Notes</h4>

<ol>
<li>There is a very annoying <a href="https://bugs.funtoo.org/browse/FL-69">bug open for keychain</a>
that means if, as I do, you start keychain from your <span class="file">$HOME/.profile</span>
or <span class="file">$ZDOTDIR/.zprofile</span> you <em>will</em> need to enter the same
passphrase to unlock a sub-key before you can use pass (the same thing applies
to Mutt).  This gets really ugly if you attempt to use dmenu before unlocking
your key…</li>
<li><q>Finally, a command line shell for the 90s…</q> Indeed.</li>
</ol>


<p>Creative Commons image by <a href="http://www.flickr.com/photos/54450095@N05/8229504229/">Intel Free Press</a> on Flickr.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Browser tunnels]]></title>
    <link href="http://jasonwryan.com/blog/2014/05/30/tunnels/"/>
    <updated>2014-05-30T09:32:00+12:00</updated>
    <id>http://jasonwryan.com/blog/2014/05/30/tunnels</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/post_images/tunnel.jpg" title="Creative Commons image" >
Using a
<a href="http://en.wikipedia.org/wiki/SOCKS" title="Wikipedia article">Socks proxy</a> over an
<a href="http://en.wikipedia.org/wiki/Tunneling_protocol#Secure_shell_tunneling" title="Wikipedia entry">SSH tunnel</a>
is a well documented and simple if much less flexible stand in for a full-blown
<a href="http://en.wikipedia.org/wiki/Virtual_private_network%20'VPN%20on%20Wikipedia">VPN</a>. It
can provide a degree of comfort when accessing private or sensitive information
over a public Internet connection, or you might use it to get around the
terminally Canutian<sup>1</sup> construct that is known as geo-blocking; that
asinine practice of pretending that the Internet observes political boundaries…</p>

<p>By way of a digression, it occurred to me at some point while I was wrestling
with setting this up that, over the last seven or so years, much of the
“entertainment” provided by corporate content distributors has been in the form
of encouraging me to spend hundreds? thousands? of hours researching and
implementing ways to circumvent their litany of failed and defective
technological restrictions: region codes,
<a href="http://www.defectivebydesign.org/what_is_drm_digital_restrictions_management" title="Defective by Design">DRM</a>
and the like. It is worth noting that, in the vast majority of cases, I was
just seeking access to content that I already owned (in another format), or was
prepared to pay for.</p>

<p>My move to GNU/Linux in 2007 was in large part motivated by the awful
realisation that the music I had bought in iTunes was stuck in there. The
combined intellectual effort globally expended trying to legitimately route
around broken copyright law would have comfortably powered another golden age
of the sciences; it&rsquo;s not entirely implausible to think that the only reason we
still have to deal with cancer is the malignant legacy of
<a href="https://en.wikipedia.org/wiki/Sonny_Bono_Copyright_Term_Extension_Act" title="Sonny's gift…">Sonny Bono</a><sup>2</sup>.</p>

<p>Now, back to our regular programming… One of my approaches to get around this
sort of economic and policy rigor mortis has been to use a basic script to
create a proxy tunnel to my home server. It assumes that you have
<a href="http://en.wikipedia.org/wiki/Public-key_cryptography" title="Wikipedia, again">public key</a>
authentication set up and your passphrase loaded in
<a href="https://wiki.archlinux.org/index.php/SSH_Keys#Keychain" title="Arch wiki, for a change">keychain</a>,
or something similar.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/usr/bin/env bash&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;SSH_HOST<span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;</span>&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;&amp;#x6d;&amp;#97;&amp;#x69;&amp;#108;&amp;#x74;&amp;#x6f;&amp;#58;&amp;#106;&amp;#x61;&amp;#x73;&amp;#x6f;&amp;#x6e;&amp;#64;&amp;#x58;&amp;#x58;&amp;#88;&amp;#46;&amp;#88;&amp;#x58;&amp;#88;&amp;#46;&amp;#88;&amp;#88;&amp;#88;&amp;#x2e;&amp;#88;&amp;#x58;&amp;#88;&quot;</span>&gt;<span class="p">&amp;</span><span class="c">#106;&amp;#97;&amp;#x73;&amp;#111;&amp;#x6e;&amp;#64;&amp;#88;&amp;#88;&amp;#88;&amp;#46;&amp;#x58;&amp;#x58;&amp;#x58;&amp;#46;&amp;#88;&amp;#x58;&amp;#x58;&amp;#x2e;&amp;#88;&amp;#x58;&amp;#x58;&lt;/a&gt; -p XXX -i $HOME/.ssh/box1&amp;rdquo;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;up<span class="o">(){</span>
</span><span class='line'>    ssh -f -N -D <span class="m">8080</span> -M -S /tmp/ssh_tunnel_%h.sock -o <span class="nv">ExitOnForwardFailure</span><span class="o">=</span>yes <span class="nv">$SSH_HOST</span> <span class="p">&amp;</span>amp<span class="p">;&amp;</span>amp<span class="p">;</span> <span class="se">\</span>
</span><span class='line'>    <span class="nb">printf</span> <span class="p">&amp;</span>lsquo<span class="p">;</span>%s<span class="se">\n</span><span class="p">&amp;</span>rsquo<span class="p">;</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>ssh tunnel started successfully<span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="o">||</span> <span class="se">\</span>
</span><span class='line'>    <span class="nb">printf</span> <span class="p">&amp;</span>lsquo<span class="p">;</span>%s<span class="se">\n</span><span class="p">&amp;</span>rsquo<span class="p">;</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>ssh tunnel failed to start<span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'><span class="o">}</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;down<span class="o">(){</span>
</span><span class='line'>    ssh -S /tmp/ssh_tunnel_%h.sock -O <span class="nb">exit</span> <span class="nv">$SSH_HOST</span>
</span><span class='line'><span class="o">}</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;if <span class="o">[[</span> <span class="nv">$1</span> <span class="o">=</span> up <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    up <span class="p">&amp;</span>amp<span class="p">;&amp;</span>amp<span class="p">;</span> chromium <span class="p">&amp;</span>ndash<span class="p">;</span>proxy-server<span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;</span>socks://127.0.0.1:8080<span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="p">&amp;</span>amp<span class="p">;</span>
</span><span class='line'><span class="k">elif</span> <span class="o">[[</span> <span class="nv">$1</span> <span class="o">=</span> down <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    down
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="nb">printf</span> <span class="p">&amp;</span>lsquo<span class="p">;</span>%s<span class="se">\n</span><span class="p">&amp;</span>rsquo<span class="p">;</span> <span class="p">&amp;</span>ldquo<span class="p">;</span>Fail…<span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>    <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Over the last couple of weeks, though, while I have been setting up and
<a href="http://jasonwryan.com/blog/2014/05/10/syncthing/" title="Post on Syncthing">playing with Syncthing</a>,
I found this script wanting. With six nodes and, depending if I was on the
<acronym title="Local Area Network">LAN</acronym> or not, as many as four of those
hosts only accessible via SSH, then having the ability to quickly and painlessly
open a browser on any one of the nodes <em>without having to edit the script</em>
suddenly seemed like quite a good idea.</p>

<p>Accordingly I went to work on the script, including a test to determine if I
was on my home network and passing the name of the desired host as an
argument. With this approach, I simply type <code>tunnel $host</code> and chromium
opens tunneled to that host, where I can the happily open
<strike>Hulu</strike> the Syncthing GUI.</p>

<p>The updated script is posted as
<a href="https://gist.github.com/jasonwryan/715a4f3fcb55e995de0d" title="On Github">a gist</a>,
and as you can see, still needs some work to make it a little more generic.
You will need, for example, to hand edit in the hosts and ports in
<code>get_host()</code>. It is also the first time I have played with
<a href="http://mywiki.wooledge.org/BashGuide/InputAndOutput#Pipes" title="Wooledge wiki">named pipes</a>
and I am not convinced that my use of <code>mkfifo</code> here is either the correct
approach or implementation; but it works. Comments enlightening me would
be gratefully received.</p>

<h4>Notes</h4>

<ol>
<li>The good king was, appropriately enough, actually called Cnut the Great…</li>
<li>And, no, I am not referring to his musical corpus, which is as carcinogenic as his
political career was as a Myrmidon for Big Content.</li>
</ol>


<p>Flickr Creative Commons image, <a href="https://www.flickr.com/photos/lawrence_evil/113733779/">The Tunnel</a>,
by Lawrence Whitmore.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Autotext Function]]></title>
    <link href="http://jasonwryan.com/blog/2014/03/22/autotext/"/>
    <updated>2014-03-22T09:20:00+13:00</updated>
    <id>http://jasonwryan.com/blog/2014/03/22/autotext</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/post_images/cans.jpg" title="Flickr CC image" ></p>

<p>Once you have your environment set up; your
<a href="http://dwm.suckless.org" title="dwm site">window manager</a>
patched
<a href="http://jasonwryan.com/blog/2012/07/24/queues/" title="Post on mercurial queues"><em>exactly</em> the way you want</a>,
same for
<a href="http://jasonwryan.com/blog/2013/03/29/vim/" title="Post on building Vim">your editor</a>
and even
<a href="http://jasonwryan.com/blog/2013/08/24/automating-kernels/" title="Yet another post…">your kernel builds automated</a>,
then you either start from scratch and learn a whole lot more, or you start to
focus on the really small details. The endless polishing that is bred of a
mania for automation and customisation and the liberating freedom of using
software that allows, and even encourages, this approach.</p>

<p>Since I started using a couple of basic functions for managing my
<a href="http://jasonwryan.com/blog/2012/09/01/notes-updated/" title="Post on the updated functions">note taking</a>,
I have been conscious of the way I can use this tool to make my workflow a
little less onerous.</p>

<p>One of the things I find myself doing <em>a lot</em> is reusing the same snippets of
text; either prose in work documents, or links to relevant articles on the
Arch Wiki and Forums. It is simple enough to add this material to my
<span class="file">~/.notes</span>, but retrieval has always been&mdash;for the
text I reuse frequently&mdash;unwieldy.</p>

<p>How many times do you really want to open the file, search for the relevant
excerpt, highlight it and then copy it to the system clipboard before closing
the file and pasting it into your email or a web form? I must have logged
several thousand before I finally decided to do something about it.</p>

<p>I now have a couple of different files in <span class="file">~/.notes/</span>
depending upon the context; the example I&rsquo;ll use is the one for the Arch Forums
kept, naturally enough, at
<span class="file">$HOME/Sync/notes/arch</span> (I symlink to
<span class="file">~/.notes</span> so that the directory is synched using
<a href="http://jasonwryan.com/blog/2013/03/16/sync/" title="Post on using Sync">BitTorrent Sync</a>).</p>

<p>This is just a simple text file with all of the links, guidance and wisdom that
I generously share with those people, mostly new to the community, who have yet
to embrace the opportunity to commit the
<a href="https://wiki.archlinux.org/index.php/Forum_Etiquette" title="On the Wiki">Forum Etiquette</a>
to memory. The format of each file is the same and is pretty basic:</p>

<p><blockquote><p></p></p><p><h1>rules sticky</h1></p><p><p><a href="https://bbs.archlinux.org/viewtopic.php?id=130309">https://bbs.archlinux.org/viewtopic.php?id=130309</a></p></p><p><h1>smart questions</h1></p><p><p>[url=<a href="http://www.catb.org/esr/faqs/smart-questions.html">http://www.catb.org/esr/faqs/smart-questions.html</a>]How To Ask Questions The Smart Way[/url]</p></p><p><h1>arch only</h1></p><p><p><a href="https://wiki.archlinux.org/index.php/Forum_Etiquette#Arch_Linux_Distribution_Support_ONLY">https://wiki.archlinux.org/index.php/Forum_Etiquette#Arch_Linux_Distribution_Support_ONLY</a></p></blockquote></p>

<p>I use the commented title to identify the desired piece of text and then just
copy it to the clipboard, ready to pasted into a post that will undoubtedly
be gratefully received by the infractor:</p>

<p><figure class='code'><figcaption><span>$HOME/.bashrc </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;board snippets&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;bbs<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">file</span><span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$HOME</span>/.notes/arch<span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">((</span> <span class="nv">$# </span><span class="o">==</span> <span class="m">1</span> <span class="o">))</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    <span class="nb">local </span><span class="nv">opt</span><span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$1</span><span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>    awk -v <span class="nv">line</span><span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$opt</span><span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="p">&amp;</span>lsquo<span class="p">;</span>index<span class="o">(</span><span class="nv">$0</span>, line<span class="o">)</span> <span class="o">{</span> getline<span class="p">;</span> print <span class="o">}</span><span class="p">&amp;</span>rsquo<span class="p">;</span> <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$file</span><span class="p">&amp;</span>rdquo<span class="p">;</span> <span class="p">|</span> xsel -b
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    awk <span class="p">&amp;</span>lsquo<span class="p">;</span>/^# /<span class="p">&amp;</span>rsquo<span class="p">;</span> <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">$file</span><span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>So, on the rare occasion that I need to remind someone that on the Arch boards
we only support Arch Linux (I know, quite the revelation…), I just open
<a href="https://bitbucket.org/jasonwryan/dwm-patchset/src/tip/base.config.customizations#cl-76" title="Config in Bitbucket">a scratchpad</a>
and enter <code>bbs only</code> and then <kbd>Shift</kbd>+<kbd>Insert</kbd> the
text into the post and I am done. Not passing an argument just prints the
commented titles in the file in the event that I forget what the damn thing
is called.</p>

<p>I have a similar setup for work, with a couple of files that feature longer
pieces of text that I find myself reusing for proposals, email responses
and other administrivia. It&rsquo;s a simple enough approach, but it works well and
does lend a certain satisfaction to the otherwise tedious business of writing
boilerplate.</p>

<h4>Notes</h4>

<p>Flickr Creative Commons image
<a href="http://www.flickr.com/photos/shrapnel1/134674051/">how many cans</a> by shrapnel1</p>
]]></content>
  </entry>
  
</feed>
