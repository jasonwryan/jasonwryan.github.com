<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hack | jasonwryan.com]]></title>
  <link href="http://jasonwryan.github.com/blog/categories/hack/atom.xml" rel="self"/>
  <link href="http://jasonwryan.github.com/"/>
  <updated>2012-03-28T11:24:01+13:00</updated>
  <id>http://jasonwryan.github.com/</id>
  <author>
    <name><![CDATA[Jason Ryan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setting tmux statusbar if in X]]></title>
    <link href="http://jasonwryan.github.com/blog/2011/06/10/setting-tmux-statusbar-if-in-x/"/>
    <updated>2011-06-10T22:56:00+12:00</updated>
    <id>http://jasonwryan.github.com/blog/2011/06/10/setting-tmux-statusbar-if-in-x</id>
    <content type="html"><![CDATA[<p><a href="http://www.flickr.com/photos/jasonwryan/5636783883/" title="Arch Linux: dwm, tmux &amp; scratchpad by jasonwryan, on Flickr"><img src="http://farm6.static.flickr.com/5303/5636783883_5b7272453b.jpg" alt="Arch Linux: dwm, tmux &amp; scratchpad" /></a></p>

<p>I have been posting quite a bit about
<a href="http://tmux.sourceforge.net/" title="tmux homepage">tmux</a> of late<sup>1</sup>.
It is a marvellous application and lends itself to all sorts of interesting
uses. When you first install it, you will find a number of user config
files in <span class="file">/usr/share/tmux/</span>. I started with tmux by copying
<a href="http://cinderwick.ca/" title="Thayer Williams' site">Thayer’s</a> config across
and then working up from there. There is a section
<a href="http://tmux.svn.sourceforge.net/viewvc/tmux/trunk/examples/t-williams.conf?revision=1833&amp;view=markup" title="Thayer's conf in SVN">at the bottom of this file</a>
that has always puzzled me, and so I decided to get to the bottom of it.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;show some useful stats but only when tmux is started&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;outside of Xorg, otherwise dwm statusbar shows these already&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It is a great idea. If you are running tmux in X, then you have
<a href="http://dwm.suckless.org/" title="dwm homepage">dwm’s</a> status bar telling you
what the time is,
<a href="http://beta.intuxication.org/jasonwryan/archer/file/tip/Scripts/dwm-status" title="dwm status bar in my mercurial repo">how much battery you have left</a>
etc,. You don’t need to replicate that functionality in tmux. If,
however, you are in the console, you don’t have that information, unless
you print it in tmux’s statusbar.</p>

<p>I had tried to get this to work once or twice over the last couple of
years, but never persevered with it. However, as I have been doing a bit
of work making the console as functional as possible<sup>2</sup>, I thought I
would revisit it.</p>

<p><img src="http://dl.dropbox.com/u/261312/Blog-images/tmux-status1.png" alt="image" /></p>

<p>The insight that I had that got it working for me was to use the
source-file option in <span class="file">.tmux.conf</span> to call the relevant statusbar,
depending if X was running or not. I just adapted Thayer’s code, like
so:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Statusbar starting in X or not&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;if <span class="s1">&#39;[ -n &quot;$DISPLAY&quot; ]&#39;</span> <span class="s1">&#39;source-file ~/.tmux/inx&#39;</span>
</span><span class='line'><span class="k">if</span> <span class="s1">&#39;[ -z &quot;$DISPLAY&quot; ]&#39;</span> <span class="s1">&#39;source-file ~/.tmux/xless&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And then created those files with the desired statusbar options. So, for
example, if I am running tmux in the console, <span class="file">$HOME/.tmux/xless</span> is
loaded:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Statusbar <span class="k">if </span>tmux run in console&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;information normally in dwm bar&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;set -g status-right-length 50
</span><span class='line'><span class="nb">set</span> -g status-left-length 50
</span><span class='line'><span class="nb">set</span> -g status-left <span class="err">&quot;</span><span class="c">#[fg=green] #H #[default] …blah, blah, blah…</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Which prints a statusbar with the time and battery left on my laptop<sup>3</sup>:</p>

<p><img src="http://dl.dropbox.com/u/261312/Blog-images/tmux-status2.png" alt="image" /></p>

<p>All the relevant files are in
<a href="http://beta.intuxication.org/jasonwryan/archer/browse/tip/.tmux" title="My intuxication repository">my mercurial repo</a>.</p>

<h5>Notes</h5>

<ol>
<li><p><a href="http://jasonwryan.com/2011-06-07-copy-and-paste-in-tmux" title="Post on copy &amp; paste in tmux">Copy &amp; paste in tmux</a>,
<a href="http://jasonwryan.com/2010-10-03-sessions-in-tmux" title="Sessions in tmux">Sessions in tmux</a>
&amp; <a href="http://jasonwryan.com/2010-01-07-tmux-terminal-multiplexer" title="Intro to tmux">Introduction to tmux</a></p></li>
<li><p><a href="http://jasonwryan.com/2011-04-06-vim-colours-in-the-console" title="Setting Vim colours in the console">Vim colours in the console</a></p></li>
<li><p>Image squashed to fit the requirements of this blog…</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[w3m, Surfraw and Yanking URLs]]></title>
    <link href="http://jasonwryan.github.com/blog/2011/05/05/w3m/"/>
    <updated>2011-05-05T19:57:00+12:00</updated>
    <id>http://jasonwryan.github.com/blog/2011/05/05/w3m</id>
    <content type="html"><![CDATA[<p><img src="http://dl.dropbox.com/u/261312/Blog-images/w3m.png" alt="image" /></p>

<p>I posted a couple of weeks ago about
<a href="http://jasonwryan.com/2011-04-13-archwiki-elvis-for-surfraw" title="My post on the Arch Wiki elvis">how much I was enjoying Surfraw</a>,
to the point of writing a couple of my own <em>elvi</em>. As part of the
ongoing tweaking of my Surfraw experience, I have been experimenting
with different
<a href="http://en.wikipedia.org/wiki/Text-based_web_browser" title="Wikipedia entry: text browsers">text-based browsers</a>,
to see which one best fits my workflow.</p>

<p>I have previously been using both
<a href="http://www.jikos.cz/~mikulas/links/" title="Links homepage (Spartan enough for you?)">links</a>
and it’s homonym,
<a href="http://lynx.browser.org/" title="See you, and raise you...">lynx</a>. While
these have been perfectly acceptable, they weren’t quite providing the
level of functionality —and integration with my vim-oriented workflow—
that I was looking for. Enter
<a href="http://w3m.sourceforge.net/" title="Lavish, by comparison...">w3m</a>.</p>

<blockquote><p>w3m is a text-based web browser as well as a pager like `more’ or
`less’. With w3m you can browse web pages through a terminal emulator
window (xterm, rxvt or something like that). Moreover, w3m can be used
as a text formatting tool which typesets HTML into plain text.</p></blockquote>

<p>w3m is a step up from the other two for a variety of reasons. It
supports tables, frames, SSL connections, color and inline images. It
also renders pages in a form as true to their original layout as
possible. The killer features on top of that are, for me, the above
mentioned rendering of HTML as text (meaning you can save content
easily), and the customizable keybinds.</p>

<p>There was however, one significant sticking point. After countless hours
fruitlessly searching, I was unable to find a way to yank URLs to the
clipboard. As I have been spending a little time of late on
<a href="http://unix.stackexchange.com/" title="Unix &amp; Linux Stack Exchange">Unix &amp; Linux Stack Exchange</a>,
I thought I would ask the good folk there…</p>

<p>Less than fourty hours later, I had an answer so simple and elegant,
that I was literally grinning when I read it. It deserves quoting in
full. It is that ingenious.</p>

<blockquote><p>Set the “External Browser” option to
<code>sh -c 'echo "$0" | xsel'</code></p>

<p>You can use xsel -b to use the clipboard instead of the primary
selection. An alternative to
<a href="http://www.vergenet.net/~conrad/software/xsel/" title="xsel homepage">xsel</a>
is <a href="http://sourceforge.net/projects/xclip/" title="xclip homepage">xclip</a>
(xclip for the primary selection, xclip -selection CLIPBOARD for the
clipboard).</p>

<p>In <span class="file">~/.w3m/config</span>, that’s the extbrowser setting.
Then press M to copy (yank) the URL of the current page, or ESCM to
copy the URL of the link under the cursor.</p>

<p>You can use the second or third external browser for that instead;
then the key combination is 2M or 3M or 2ESCM or 3ESCM.
<a href="http://unix.stackexchange.com/questions/12497/yanking-urls-in-w3m/12572#12572" title="THE answer">Gilles on Unix &amp; Linux Stack Exchange</a></p></blockquote>

<p>This simple hack means that it is now trivial to yank either the URL of
the current page, or of the link under the cursor to primary selection.
It was just a matter then of adding some intuitive keybinds – as the <kbd>M</kbd>
and <kbd>Escape</kbd><kbd>M</kbd> combination are redolent of
<a href="http://en.wikipedia.org/wiki/Editor_war" title="Emacs vs Vi">the unamed editor</a>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="nb">keymap</span> <span class="k">y</span> EXTERN    <span class="p">&lt;</span><span class="k">br</span>/<span class="p">&gt;</span>
</span><span class='line'><span class="nb">keymap</span> Y EXTERN_LINK
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The perfect <a href="http://en.wikipedia.org/wiki/Unix_philosophy" title="The UNIX philosophy on Wikipedia">UNIX solution</a>…</p>

<h4>Updated 8/5/11</h4>

<p>Gilles has edited and updated his answer with a slight change:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sh -c <span class="s1">&#39;printf %s &quot;$0&quot; | xsel&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This prevents a new line being appended.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sessions in tmux]]></title>
    <link href="http://jasonwryan.github.com/blog/2010/10/03/sessions-in-tmux/"/>
    <updated>2010-10-03T20:15:00+13:00</updated>
    <id>http://jasonwryan.github.com/blog/2010/10/03/sessions-in-tmux</id>
    <content type="html"><![CDATA[<p><a href="http://www.flickr.com/photos/jasonwryan/5046091307/" title="Sessions in tmux by jasonwryan, on Flickr" target="_blank"><img src="http://farm5.static.flickr.com/4146/5046091307_39c200f1b0.jpg" width="500" height="293" alt="Sessions in tmux"/></a></p>

<p>Now that I have been using it for several months, I have become absolutely dependent upon <a href="http://tmux.sourceforge.net/" target="_blank">tmux</a>, the terminal multiplexer.
It is both ruthlessly efficient, and can be configured to match exacting requirements. One of those options is to initialize sessions with a preloaded window configuration. After reading the <a href="http://wisconsinlinux.org/tmux-manpage-from-cvs/tmux.1.txt" target="_blank">man page</a> (which, truth be told, could be a little clearer) and some experimentation, I have worked out how to set up my tmux sessions how I want them.
I have just updated the <a href="http://wiki.archlinux.org/index.php/Tmux">Arch Wiki tmux entry</a>,
so thought I would share it here.</p>

<p>The relevant part of my config file looks like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;session initialization&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;new  -n TTYtter /home/jason/Scripts/ttytter.pl
</span><span class='line'>neww -n irssi /home/jason/Scripts/startirssi.sh
</span><span class='line'>neww -n ncmpcpp/vifm ncmpcpp
</span><span class='line'>splitw -v -p 50 -t 0 vifm
</span><span class='line'>neww -n bash bash
</span><span class='line'>selectw -t 1
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Which, when I start tmux with the attach (or a) option, gives me the following window layout:</p>

<ul>
<li>TTYtter</li>
<li>irssi</li>
<li>ncmpcpp/vifm &nbsp; &nbsp; # window split vertically in half, ncmpcpp on top of vifm</li>
<li>bash</li>
</ul>


<p>The <code>selectw</code> option means that the default view is TTYtter.</p>

<p>Simple.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Command Line Notes]]></title>
    <link href="http://jasonwryan.github.com/blog/2010/09/28/command-line-notes/"/>
    <updated>2010-09-28T17:56:00+13:00</updated>
    <id>http://jasonwryan.github.com/blog/2010/09/28/command-line-notes</id>
    <content type="html"><![CDATA[<p><img src="http://dl.dropbox.com/u/261312/Blog-images/cli-notes-1.png" alt="image" /></p>

<p>A couple of weeks ago, I came across these
<a href="http://lifehacker.com/5592047/turn-your-command-line-into-a-fast-and-simple-note+taking-tool">simple bash functions</a>
written by Jack Mottram of <a href="http://onethingwell.org/" title="One Thing Well">One Thing Well</a> for managing text
notes.</p>

<p>The functions as described in the article are so:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>n<span class="o">()</span> <span class="o">{</span> <span class="nv">$EDITOR</span> ~/notes/<span class="s2">&quot;$&lt;em&gt;&quot;</span>.txt <span class="o">}</span> nls<span class="o">()</span> <span class="o">{</span> ls -c ~/notes/ | grep <span class="s2">&quot;$&lt;/em&gt;&quot;</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Unfortunately, the second function – for retrieving the list of files in
the notes directory has two significant shortcomings — it uses <code>ls</code><sup>1</sup>
and it will only list files in the top level directory. If you are an
inverterate note taker, this plainly won’t scale.</p>

<p>My first attempt at hacking a solution yielded this little beauty:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>nls<span class="o">()</span> <span class="o">{</span> tree -Cu --noreport ~/.notes | awk <span class="s1">&#39;{print $2,$3}&#39;</span> | tr -d <span class="o">[</span>:digit:<span class="o">]</span> | sed <span class="s1">&#39;s/]//&#39;</span><span class="se">\</span>
</span><span class='line'>| cut -d<span class="s2">&quot;.&quot;</span> -f1 ; <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Which removes <code>ls</code> from the function and allows nested directories, but
is needlessly complex and, with four pipes, hideously <del>inefficient</del>
inelegant.</p>

<p>After reading up on Awk, particularly
<a href="http://www.grymoire.com/Unix/Awk.html">Bruce Barnett’s primer</a>,
I arrived at something marginally longer but relying solely on the
awesome power of awk to make the various transformations I was seeking…</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>nls<span class="o">()</span> <span class="o">{</span> tree -CR --noreport ~/.notes | awk <span class="s1">&#39;{ if (NF==1) print $1; \</span>
</span><span class='line'><span class="s1">else if (NF==2) print $2; else if (NF==3) print &quot;  &quot;$3 }&#39;</span> ; <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>An added advantage is that it is scalable irrespective of how deep the
directories go. I’m sure that with some more awk-foo I could write a
more effective set of conditionals, but this seemed a pretty good start
for a simple note taking utility.</p>

<h3>Updated 3/11/10</h3>

<p>To remove a little of the visual clutter, I amended the awk script to
strip the <code>.txt</code> extensions from the output.<sup>2</sup></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>nls <span class="o">()</span> <span class="o">{</span> tree -CR --noreport ~/.notes | awk <span class="s1">&#39;{ if ((NR &gt; 1) gsub(/.txt/,&quot;&quot;)); \</span>
</span><span class='line'><span class="s1">if (NF==1) print $1; else if (NF==2) print $2; else if (NF==3) printf &quot;  %s\n&quot;, $3 }&#39;</span> ;<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And if you really want this to work well, create your <span class="file">.notes</span> directory
in a <a href="http://dropbox.com/" title="File synching utility">dropbox folder</a> and
symlink to it from <span class="file">~/.notes</span>.</p>

<h5>Notes</h5>

<ol>
<li><p>See <a href="http://mywiki.wooledge.org/ParsingLs" title="THE Bash Wiki">Parsing ls on Wooledge Wiki</a>.</p></li>
<li><p>Obligatory “after” screenshot:</p></li>
</ol>


<p><img src="http://dl.dropbox.com/u/261312/Blog-images/cli-notes-2.png" title="'Screenshot of editing text'" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Dropbox to Share Dotfiles]]></title>
    <link href="http://jasonwryan.github.com/blog/2010/01/11/using-dropbox-to-share-dotfiles/"/>
    <updated>2010-01-11T11:10:00+13:00</updated>
    <id>http://jasonwryan.github.com/blog/2010/01/11/using-dropbox-to-share-dotfiles</id>
    <content type="html"><![CDATA[<p>I regularly back up all my dotfiles to <a href="http://www.dropbox.com/" title="Synch your computers securely...">Dropbox</a>
as a matter of course. I had intended, at some point, to set up a
<a href="http://git-scm.com/" title="Online version control system">Git repo</a> to automate the process and to make it easier to share these files with others.</p>

<p>However, best intentions etc., in the end it was far easier to simply extend what I was already doing using Dropbox.</p>

<p>First, I created a directory in my <span class="file">Dropbox/Public</span> that would contain the dotfiles I wanted to share:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>mkdir Dropbox/Public/Configs
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then it was just a matter of creating links to the files I wanted to host there:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>Dropbox/Public/Configs
</span><span class='line'><span class="nv">$ </span>ln -s ../../path/to/dotfile
</span><span class='line'>…
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The next step was to create a simple <acronym title="HyperText Markup Language">HTML</acronym> page
(and a stylesheet to make it look presentable) and drop them into the same directory.</p>

<p><a href="http://dl.dropbox.com/u/261312/Configs/index.html" title="jason's dotfile repo"><img src="http://dl.dropbox.com/u/261312/Blog-images/dropbox-repo.png"></a></p>

<h3>Caveat</h3>

<p>Dropbox has the very handy feature of retaining versions of all the files you upload. Unfortunately, in this case, that means that the symlinks will always point to the file that you originally set them at — <em>irrespective of any updates you overwrite them with</em>.</p>

<p>So, if you change any of the files significantly, you will need to recreate the symlink…</p>

<h4>Update</h4>

<p>It seems that the symlink system does work: Dropbox will respect the latest version. YMMV.</p>
]]></content>
  </entry>
  
</feed>
