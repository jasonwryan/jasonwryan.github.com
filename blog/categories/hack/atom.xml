<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hack | jasonwryan.com]]></title>
  <link href="http://jasonwryan.github.com/blog/categories/hack/atom.xml" rel="self"/>
  <link href="http://jasonwryan.github.com/"/>
  <updated>2013-06-26T13:59:38+12:00</updated>
  <id>http://jasonwryan.github.com/</id>
  <author>
    <name><![CDATA[Jason Ryan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hacking PKGBUILDs]]></title>
    <link href="http://jasonwryan.github.com/blog/2013/05/18/pkgbuilds/"/>
    <updated>2013-05-18T10:10:00+12:00</updated>
    <id>http://jasonwryan.github.com/blog/2013/05/18/pkgbuilds</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://dl.dropbox.com/u/261312/Blog-images/woodcutting.jpg" title="'Cutting wood'" >
I posted a couple of weeks ago about
<a href="http://jasonwryan.com/blog/2013/03/29/vim/" title="Post on Vim">Building Vim</a> and how,
using <a href="https://wiki.archlinux.org/index.php/Abs" title="Arch Build System on the Wiki">ABS</a>
and <code>makepkg</code> it is possible to customize packages in the repositories to suit your
individual requirements, in that case with a specific feature set.</p>

<p>One of Arch's real strengths is in the flexibility that <code>makepkg</code> and PKGBUILDs provide
the community; the ability to adapt official packages—or unofficial ones in the
<a href="https://aur.archlinux.org/" title="Arch User Repository">AUR</a>—as you see fit. As PKGBUILDs
are just shell scripts, the entry level to start playing around with them is quite
low<sup>1</sup>.</p>

<p>A fairly standard, and simple, example of the type of customization that I might make
is with <a href="http://tools.suckless.org/dmenu/" title="dmenu page">dmenu</a>, the suckless dynamic
menu, where the
<a href="https://www.archlinux.org/packages/community/x86_64/dmenu/" title="Arch package">standard package</a>
in the Arch repositories is not patched for Xft support. There is a patch for this on the
<a href="http://tools.suckless.org/dmenu/patches/xft" title="Xft patch on suckless.org">suckless wiki</a>, so it
is just a case of making the requisite changes in the PKGBUILD from ABS and building it.</p>

<p>As you can see from the <code>diff</code> below, there is not a lot involved in this exercize; essentially,
adding <code>libxft</code> as a dependency, sourcing the patch from the suckless site (and including the
hash for it), and then in the <code>build</code> function ensuring that the patch is applied and the
Makefile updated with the new library:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='diff'><span class='line'><span class="gd">--- PKGBUILD   2013-05-18 09:33:07.156328812 +1200</span>
</span><span class='line'><span class="gi">+++ PKGBUILD   2012-11-14 09:25:15.915335588 +1300</span>
</span><span class='line'><span class="gu">@@ -11,16 +6,22 @@</span>
</span><span class='line'> pkgdesc=&quot;A generic menu for X&quot;
</span><span class='line'> url=&quot;http://tools.suckless.org/dmenu/&quot;
</span><span class='line'> arch=(&#39;i686&#39; &#39;x86_64&#39;)
</span><span class='line'><span class="gi">+groups=(&#39;modified&#39;)</span>
</span><span class='line'> license=(&#39;MIT&#39;)
</span><span class='line'><span class="gd">-depends=(&#39;sh&#39; &#39;libxinerama&#39;)</span>
</span><span class='line'><span class="gd">-source=(http://dl.suckless.org/tools/$pkgname-$pkgver.tar.gz)</span>
</span><span class='line'><span class="gd">-md5sums=(&#39;9c46169ed703732ec52ed946c27d84b4&#39;)</span>
</span><span class='line'><span class="gi">+depends=(&#39;sh&#39; &#39;libxinerama&#39; &#39;libxft&#39;)</span>
</span><span class='line'><span class="gi">+source=(http://dl.suckless.org/tools/$pkgname-$pkgver.tar.gz</span>
</span><span class='line'><span class="gi">+http://tools.suckless.org/dmenu/patches/$pkgname-$pkgver-xft.diff)</span>
</span><span class='line'><span class="gi">+md5sums=(&#39;9c46169ed703732ec52ed946c27d84b4&#39;</span>
</span><span class='line'><span class="gi">+         &#39;d448ec9120718b0aedbdb338f4fa69ba&#39;)&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>&lt;p&gt; build(){
</span><span class='line'>   cd $srcdir/$pkgname-$pkgver
</span><span class='line'><span class="gi">+  patch -p1 &amp;lt; ../$pkgname-$pkgver-xft.diff</span>
</span><span class='line'><span class="gi">+  sed -i &#39;s:-I/usr/local/include/freetype2:-I/usr/include/freetype2:&#39; config.mk</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'>   make \
</span></code></pre></div></figure></notextile></div></p>

<p>Running <code>makepkg -i</code> will build and install dmenu with Xft support. This is the most
straightforward approach. I also, primarily by way of experimentation and in an effort
to try an understand how this actually works, have slightly more convoluted examples.
<a href="https://www.archlinux.org/packages/extra/x86_64/msmtp/" title="Arch package">msmtp</a>, the
<acronym title="Simple Mail Transfer Protocol">SMTP</acronym> client has a couple
of makedepends in
<a href="https://www.archlinux.org/packages/extra/x86_64/libgnome-keyring/" title="Arch package">libgnome-keyring</a>
and <a href="https://www.archlinux.org/packages/extra/any/texlive-core/" title="Arch package">texlive-core</a>; the former
I have zero use for and the latter is only installed on my desktop, so I have no wish to install it on
my laptop just to be able to send emails…</p>

<p>In this case, I modified the PKGBUILD to completely remove the <code>libgnome-keyring</code> dependency
and to only build the <code>msmtp</code> documentation in <code>.pdf</code> and <code>.html</code> if <code>texlive-core</code> was
already installed on the machine. Unfortunately, I wasn't able to test for the presence of
<code>texlive-core</code> with the standard utilities like <code>type</code> or <code>which</code>, so—as it is installed
on all my boxes—I went with <code>expac</code> (<code>pacman -Q</code> would also work):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='diff'><span class='line'><span class="gd">--- PKGBUILD    2013-05-18 09:32:07.393095131 +1200</span>
</span><span class='line'><span class="gi">+++ PKGBUILD    2013-05-18 09:31:55.449986364 +1200</span>
</span><span class='line'><span class="gu">@@ -1,7 +1,8 @@</span>
</span><span class='line'> arch=(&#39;i686&#39; &#39;x86_64&#39;)
</span><span class='line'><span class="gi">+groups=(&#39;modified&#39;)</span>
</span><span class='line'> license=(&#39;GPL3&#39;)
</span><span class='line'> url=&quot;http://msmtp.sourceforge.net&quot;
</span><span class='line'><span class="gd">-makedepends=(&#39;texlive-core&#39; &#39;gsasl&#39; &#39;libgnome-keyring&#39;)</span>
</span><span class='line'><span class="gi">+makedepends=(&#39;gsasl&#39;)</span>
</span><span class='line'> source=(http://download.sourceforge.net/sourceforge/msmtp/${pkgbase}-${pkgver}.tar.bz2)
</span><span class='line'> sha1sums=(&#39;c0edce1e1951968853f15209c8509699ff9e9ab5&#39;)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;@@ -12,19 +13,24 @@&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt; build() {
</span><span class='line'>   cd ${pkgbase}-${pkgver}
</span><span class='line'><span class="gd">-  ./configure --prefix=/usr --sysconfdir=/etc --with-ssl=gnutls</span>
</span><span class='line'><span class="gi">+  ./configure --prefix=/usr --sysconfdir=/etc --with-ssl=gnutls --without-gnome-keyring</span>
</span><span class='line'>   make
</span><span class='line'><span class="gd">-  make -C doc html pdf</span>
</span><span class='line'><span class="gi">+  if [[ -n $(expac -Q &#39;%n&#39; texlive-core) ]]; then</span>
</span><span class='line'><span class="gi">+      make -C doc html pdf</span>
</span><span class='line'><span class="gi">+  fi</span>
</span><span class='line'> }&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt; package_msmtp() {
</span><span class='line'>   pkgdesc=&quot;A mini smtp client&quot;
</span><span class='line'><span class="gd">-  depends=(&#39;gsasl&#39; &#39;libgnome-keyring&#39;)</span>
</span><span class='line'><span class="gi">+  depends=(&#39;gsasl&#39;)</span>
</span><span class='line'>   install=msmtp.install&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;   cd ${pkgbase}-${pkgver}
</span><span class='line'>   make DESTDIR=&quot;${pkgdir}&quot; install
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+  if [[ -n $(expac -Q &#39;%n&#39; texlive-core) ]]; then</span>
</span><span class='line'>   make DESTDIR=&quot;${pkgdir}&quot; -C doc install-html install-pdf
</span><span class='line'><span class="gi">+  fi&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>&lt;p&gt; # Installing example configs and scripts to /usr/share/doc/msmtp
</span></code></pre></div></figure></notextile></div></p>

<p>It isn't necessarily an attractive solution, but it works for me…
On the subject of unattractive solutions, as of pacman 4.1, released
last month, the packaging standards for
<a href="https://wiki.archlinux.org/index.php/VCS_PKGBUILD_Guidelines" title="Arch Wiki page">VCS PKGBUILDs</a>
have been changed, principally around how sources and versioning is handled. For
the couple of VCS packages I maintain in the <acronym title="Arch User
Repository">AUR</acronym><sup>2</sup>, I have been
experimenting with how to capture the <code>pkgver</code> in a way that conforms to the
standards and provides people with a meaningful version number.</p>

<p>By default, the version number for these projects from their git repos
is not that helpful:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>git describe --always
</span><span class='line'>4861046
</span></code></pre></div></figure></notextile></div></p>

<p>After looking through the git logs, and playing around with <code>awk</code> to filter
the results, I came up with this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>pkgver<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">cd</span> <span class="s2">&quot;$&lt;em&gt;gitname&quot;</span>
</span><span class='line'>  <span class="nb">printf</span> <span class="s1">&#39;%s\n&#39;</span> <span class="s2">&quot;$(awk &#39;/^ / {print $2}&#39; &amp;lt;(git log --grep=version -1))&lt;/em&gt;\</span>
</span><span class='line'><span class="s2">  $(git describe --always)&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></div></figure></notextile></div></p>

<p>This prints a more, for me anyway, intelligble package version: <code>vimprobable2-git
1.2.1_c5936cc-1</code> that relates back to the last stable release and appends the
current commit. I'm sure that this could be improved upon; suggestions are
welcome.</p>

<p>The other change to note in all of these PKGBUILDs is the inclusion of the
<code>groups</code> variable. By adding all of the modified packages from the official
repositories to the—imaginatively titled—<code>modified</code> group, I can then add a line
to <code>/etc/pacman.conf</code> that prevents those packages from being overwritten on
upgrade<sup>3</sup>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'><span class="nv">IgnoreGroup</span> <span class="o">=</span> modified
</span></code></pre></div></figure></notextile></div></p>

<p>Issuing <code>pacman -Syu</code>, or running <code>checkupdates</code> from a <code>cron</code> job, will
notify you that the packages have had a version bump and that they need
to be rebuilt. The PKGBUILDs for all of these packages can be found in
<a href="https://bitbucket.org/jasonwryan/centurion/src/ff3b3c9d805e197f35aa28dbeb6a9a6555ee7b63/Build?at=default" title="Files in bitbucket">my bitbucket repo</a>.</p>

<h4>Notes</h4>

<ol>
<li>As my experiments attest…</li>
<li><a href="https://aur.archlinux.org/packages/vimprobable2-git/">Vimprobable2-git</a>,
<a href="https://aur.archlinux.org/packages/surfraw-git/">Surfraw-git</a> and
<a href="https://aur.archlinux.org/packages/ruby-build-git/">ruby-build-git</a>.</li>
<li>All credit to ataraxia <a href="https://bbs.archlinux.org/viewtopic.php?pid=623841#p623841">for this idea</a>.</li>
</ol>


<p>Creative Commons image on Flickr by
<a href="http://www.flickr.com/photos/wellspwilson/6481217091/" title="Wood
Cutting Wood">Wells P. Wilson</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AUR Helpers]]></title>
    <link href="http://jasonwryan.github.com/blog/2013/04/09/helpers/"/>
    <updated>2013-04-09T19:07:00+12:00</updated>
    <id>http://jasonwryan.github.com/blog/2013/04/09/helpers</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://dl.dropbox.com/u/261312/Blog-images/crutches.jpg" title="'Crutches on Flickr'" ></p>

<h3>Or, "Why you should uninstall Yaourt and embrace <em>makepkg</em>…"</h3>

<p>The <a href="https://bbs.archlinux.org/viewtopic.php?id=160655" title="Announcement on the Arch boards">release of Pacman 4.1</a>
saw the same flurry of posts on the boards, in IRC and the mailing lists about
people being “unable” to upgrade or, worse, claiming that pacman was “broken”
because their upgrade was failing due to unsatisfied dependencies, that pretty
much every pacman upgrade ocassions. How is it possible that so many people can
run an operating system designed for competent users without having even a
basic understanding of how the package manager—one of the single most critical
components of the distribution—works?</p>

<p>Even a cursory perusal of the resulting threads on the boards will quickly
identify the common denominator in these cases:</p>

<p><blockquote><p>resolving dependencies...<br/>looking for inter-conflicts...<br/>error: failed to prepare transaction (could not satisfy dependencies)<br/>:: package-query: requires pacman&lt;4.1</p></blockquote></p>

<p><a href="https://aur.archlinux.org/packages/package-query/" title="AUR page">package-query</a>
is required by <a href="https://aur.archlinux.org/packages/yaourt/" title="yaourt on AUR">yaourt</a>;
so these upgrades have been stymied by a package that is in the (unsupported)
<acronym title="Arch User Repository">AUR</acronym>? There are a
<a href="https://wiki.archlinux.org/index.php/AUR_Helpers" title="Arch Wiki entry">multitude of AUR helpers</a>,
but <code>yaourt</code> is most commonly used by people who are new to Arch<sup>1</sup>
for two reasons.  First, it is one of the most “featureful” and secondly, and
more to the point of my argument, it can be installed by simply adding an
unsupported repo to <code>pacman.conf</code>; thereby effectively bypassing the need for
the hapless user ever having to use or understand <code>makepkg</code>.</p>

<p>Consequently, over time, people who are habitually using <code>yaourt -Syu --aur</code> to
update both the packages in the supported repositories and those they have
installed from the AUR lose the conceptual distinction between the two.
<code>yaourt</code> obscures this from them and—if they are completely reliant upon it, as
these threads attest they are—they have abnegated responsibility for managing
those unsupported packages and in doing so have found themselves incapable of
understanding the bind they are in.</p>

<p>This sort of obscuring of fundamental operating principles in the pursuit of
“convenience” is anathema to Arch and is precisely the reason I moved away from
using <code>yaourt</code> (and indeed from using Ubuntu when I jumped from that sinking
ship). Any convenience is purely illusory, in reality it just fosters
<a href="http://en.wikipedia.org/wiki/Learned_helplessness" title="Wikipedia entry">learned helplessness</a>.</p>

<p>I understand that the <code>yaourt</code> developer(s) was scratching their own itch, and
this post is not about maligning the project; but there are significant
unintended consequences of giving people a tool that abstracts such a
fundamental element of the distribution away from the user, especially for a
distribution where you are expected to have
<a href="https://wiki.archlinux.org/index.php/The_Arch_Way#User-centric" title="The Arch Way">complete control <em>and responsbility</em> over your system</a>.</p>

<p>To be clear, I don't have a complaint with the <em>concept</em> of AUR helpers. I used
<code>yaourt</code> initially before switching to
<a href="http://pbrisbin.com/posts/aurget" title="Patrick Brisbin's AUR helper">aurget</a> and then
alighting on
<a href="https://github.com/falconindy/cower" title="Cower on github">cower</a>, or more particularly,
a partial wrapper for <code>cower</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>cowerd </span></figcaption>
 <div class="highlight"><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/bin/sh&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;install AUR packages with cower&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;cd <span class="nv">$HOME</span>/Build &amp;amp;&amp;amp; cower -d <span class="s2">&quot;$1&quot;</span>
</span><span class='line'><span class="nv">builddir</span><span class="o">=</span><span class="s2">&quot;$_&quot;</span>
</span><span class='line'><span class="nb">cd</span> <span class="s2">&quot;$builddir&quot;</span> &amp;amp;&amp;amp; <span class="k">${</span><span class="nv">EDITOR</span><span class="k">:-</span><span class="nv">vi</span><span class="k">}</span> PKGBUILD&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;makepkg -si &amp;amp;&amp;amp; <span class="nb">cd</span> - &amp;amp;&gt;/dev/null&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;read -p <span class="s2">&quot;Remove Build directory? [Y/n]? &quot;</span> yn
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$yn&quot;</span> <span class="o">=</span> <span class="s2">&quot;y&quot;</span> <span class="o">]</span>; <span class="k">then</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;printf <span class="s2">&quot;\n%s\n&quot;</span> <span class="s2">&quot;Removing build directory...&quot;</span>
</span><span class='line'>rm -rf <span class="s2">&quot;$builddir&quot;</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;else&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;printf <span class="s2">&quot;%s\n&quot;</span> <span class="s2">&quot;Build completed.&quot;</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;fi
</span></code></pre></div></figure></notextile></div></p>

<p>This provides me the minimum level of automation I require—essentially only
around downloading and installing a package. It doesn't automatically handle
dependencies, nor manage updating the packages; that remains, rightly in my
view, <em>my</em> responsibility.</p>

<p>If I were to look to a more fully featured wrapper, I would undoubtedly choose
<a href="https://github.com/e36freak/meat" title="meat on Github">meat</a>, however as on my
desktop machine, I only have ~30 AUR packages installed, I don't really need
anything more sophisticated.</p>

<p>So by all means, use an AUR helper. But recognize that it is intended to help
you, not preclude you from being able to accomplish the most simple and
critical task of system maintenance, updating your package manager. Uninstall
<code>yaourt</code> if you are using it and familiarize yourself with <code>makepkg</code>; once you
do understand the relationship between the official repositories and the AUR,
download <code>cower</code> or <code>meat</code>, they are both <em>much</em> better solutions.</p>

<h4>Notes</h4>

<ol>
<li><a href="http://jasonwryan.com/blog/2009/11/21/dzen2-and-conky-cli-in-dwm/" title="Post from 2009">Myself included</a>…</li>
</ol>


<p>Creative Commons image of crutches by
<a href="http://www.flickr.com/photos/wheatfields/118700600/" title="Flickr CC image">net_efekt on Flickr</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Replacing TrueCrypt]]></title>
    <link href="http://jasonwryan.github.com/blog/2013/01/10/truecrypt/"/>
    <updated>2013-01-10T16:02:00+13:00</updated>
    <id>http://jasonwryan.github.com/blog/2013/01/10/truecrypt</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://dl.dropbox.com/u/261312/Blog-images/lock.jpg" title="'Flickr image of lock'" >
I have used <a href="http://truecrypt.org/" title="TrueCrypt homepage">TrueCrypt</a> since just before
I migrated to Linux, so somwehere around six or seven years, dating back to version 3 or 4.
It is an incredibly handy utility, allowing you to create and manage encrypted volumes on
the fly and—for the especially paranoid—to hide the existence of those volumes from
inquisitive others.</p>

<p>In the intervening years, with all aspects of my personal life
increasingly mediated digitally, in order to properly safeguard my privacy,
and that of my family, I have taken to using LUKS to
<a href="http://jasonwryan.com/blog/2012/02/11/lvm/" title="Post on LVM on LUKS">fully encrypt all of my machines</a>.
And I have used TrueCrypt, both personally and for work, to encrypt some of my USB drives and as
a container in <a href="http://dropbox.com/" title="Dropbox homepage">Dropbox</a>
, for as long as
<a href="http://jasonwryan.com/blog/2010/01/11/using-dropbox-to-share-dotfiles/" title="Post on sharing dotfiles with Dropbox">I have used that service</a>.</p>

<p>Early last year, however, I became aware of concerns that TrueCrypt was not truly open source; that almost
all of the larger distros, including Arch, and the Open Source Initiative did not regard TrueCrypt as
free (as in Freedom) software:</p>

<p><blockquote><p>The TrueCrypt License has not been officially approved by the Open Source Initiative and is not considered "free" by several major Linux distributions (Arch Linux, Debian, Ubuntu, Fedora, openSUSE, Gentoo), mainly because of distribution and copyright-liability reasons.</p><footer><strong>Wikipedia entry on TrueCrypt</strong> <cite><a href='https://en.wikipedia.org/wiki/Truecrypt'>en.wikipedia.org/wiki/Truecrypt/&hellip;</a></cite></footer></blockquote></p>

<p>When I initially accessed the page, in February 2012, there was also a paragraph—now removed—that
highlighted further, more alarmist, concerns about the shadowy identity of the people behind
TrueCrypt:</p>

<p><blockquote><p>The anonymity of the developers and the abnormalities mentioned above have led users to raise suspicions about the provenance of the product and speculate about the possible existence of vulnerabilities or backdoors that might exist in the source code or executables. http://www.privacylover.com/encryption/analysis-is-there-a-backdoor-in-truecrypt-is-truecrypt-a-cia-honeypot/ However its open source and it can be check for funerabilities that way. [sic]</p><footer><strong>Wikipedia entry retrieved in February 2012</strong> <cite><a href='https://en.wikipedia.org/w/index.php?title=TrueCrypt&amp;diff=478623780&amp;oldid=478608477'>en.wikipedia.org/w/&hellip;</a></cite></footer></blockquote></p>

<p>While I don't subscribe to the theory that the CIA have planted a backdoor in the software (if they
had, <a href="https://en.wikipedia.org/wiki/Truecrypt#Operation_Satyagraha" title="FBI operation foiled by TC">it clearly doesn't work</a>),
I was relieved to see at the end of last year that someone had written a simple utility that allows
you to manage TrueCrypt containers from the command line; <a href="https://github.com/bwalex/tc-play" title="tcplay on Guthub">tcplay</a>
is decribed as:</p>

<p><blockquote><p>a free (BSD-licensed), pretty much fully featured (including multiple keyfiles, cipher cascades, etc) and stable TrueCrypt implementation.</p></blockquote></p>

<p>With a <a href="https://github.com/bwalex/tc-play/blob/master/LICENSE" title="tcplay license">simple, two paragraph license</a>
and a brief but comprehensive <code>man</code> page, I was sold. I uninstalled TrueCrypt late last year and haven't missed it since. Quite
the contrary. The only “issue” that I have had with tcplay is remembering the commands to map and mount a drive.
Initially, I jotted down some notes, but opening them up several times a week to refer to them quickly seemed
pointless so I eventually wised up and wrote a wrapper script to do the job for me…</p>

<p>The script is quite simple, it finds the first available loop device, maps the encrypted volume to it and
mounts it read-writeable for your user.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/bin/bash&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;manage truecrypt containers using tcplay&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;user<span class="o">=</span>jason
</span><span class='line'><span class="nv">cryptdev</span><span class="o">=</span>Safebox
</span><span class='line'><span class="nv">cryptpath</span><span class="o">=</span>/home/jason/Dropbox/<span class="s2">&quot;$cryptdev&quot;</span>
</span><span class='line'><span class="nv">loopdev</span><span class="o">=</span><span class="k">$(</span>losetup -f<span class="k">)</span>
</span><span class='line'><span class="nv">mountpt</span><span class="o">=</span>/media/<span class="s2">&quot;$cryptdev&quot;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;must be run as root&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;if <span class="o">[[</span> <span class="nv">$EUID</span> !<span class="o">=</span> 0 <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">printf</span> <span class="s2">&quot;%s\n&quot;</span> <span class="s2">&quot;You must be root to run this.&quot;</span>
</span><span class='line'>  <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;unecrypt and mount container&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;if <span class="o">[[</span> <span class="s2">&quot;$1&quot;</span> <span class="o">==</span> <span class="s2">&quot;open&quot;</span> <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span>losetup <span class="s2">&quot;$loopdev&quot;</span> <span class="s2">&quot;$cryptpath&quot;</span>
</span><span class='line'>  tcplay --map<span class="o">=</span><span class="s2">&quot;$cryptdev&quot;</span> --device<span class="o">=</span><span class="s2">&quot;$loopdev&quot;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  <span class="c"># read passphrase</span>
</span><span class='line'>  <span class="nb">read</span> -r -s passphrase &amp;lt;&amp;lt;EOF
</span><span class='line'>  <span class="s2">&quot;$passphrase&quot;</span>
</span><span class='line'>EOF&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  <span class="c"># mount container</span>
</span><span class='line'>  <span class="o">[[</span> -d <span class="s2">&quot;$mountpt&quot;</span> <span class="o">]]</span> <span class="o">||</span> mkdir <span class="s2">&quot;$mountpt&quot;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  <span class="c"># mount options</span>
</span><span class='line'>  <span class="nv">userid</span><span class="o">=</span><span class="k">$(</span>awk -F<span class="s2">&quot;[=(]&quot;</span> <span class="s1">&#39;{print $2,$4}&#39;</span> &amp;lt;<span class="o">(</span>id <span class="s2">&quot;$user&quot;</span><span class="k">)</span><span class="o">)</span>
</span><span class='line'>  mount -o nosuid,uid<span class="o">=</span><span class="s2">&quot;${userid% &lt;em&gt;}&quot;</span>,gid<span class="o">=</span><span class="s2">&quot;${userid#&lt;/em&gt; }&quot;</span> /dev/mapper/<span class="s2">&quot;$cryptdev&quot;</span> <span class="s2">&quot;$mountpt&quot;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;close and clean up…&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;elif <span class="o">[[</span> <span class="s2">&quot;$1&quot;</span> <span class="o">==</span> <span class="s2">&quot;close&quot;</span> <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nv">device</span><span class="o">=</span><span class="k">$(</span>awk -v <span class="nv">dev</span><span class="o">=</span><span class="nv">$cryptdev</span> -F<span class="s2">&quot;:&quot;</span> <span class="s1">&#39;/dev/ {print $1}&#39;</span> &amp;lt;<span class="o">(</span>losetup -a<span class="k">)</span><span class="o">)</span>
</span><span class='line'>  umount <span class="s2">&quot;$mountpt&quot;</span>
</span><span class='line'>  dmsetup remove <span class="s2">&quot;$cryptdev&quot;</span> <span class="o">||</span> <span class="nb">printf</span> <span class="s2">&quot;%s\n&quot;</span> <span class="s2">&quot;demapping failed&quot;</span>
</span><span class='line'>  losetup -d <span class="s2">&quot;$device&quot;</span> <span class="o">||</span> <span class="nb">printf</span> <span class="s2">&quot;%s\n&quot;</span> <span class="s2">&quot;deleting $loopdev failed&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">  </span><span class="nb">printf</span> <span class="s2">&quot;%s\n&quot;</span> <span class="s2">&quot;Options are open or close.&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></div></figure></notextile></div></p>

<p>Once you are done, the script will unmount your volume and clean up. Undoubtedly, the
script could be improved; patches are welcome.</p>

<p>There is a
<a href="https://aur.archlinux.org/packages/tcplay-git/" title="Arch User Repository">PKGBUILD in the AUR</a>.
Uninstall TrueCrypt and give tcplay a go, it is a simple, powerful application; and it <em>is</em>
free software…</p>

<h4>Notes</h4>

<p>Creative Commons image on Flickr by <a href="http://www.flickr.com/photos/xserve/368758286/" title="Licensed CC by xserv">xserv</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improved Notes Utility]]></title>
    <link href="http://jasonwryan.github.com/blog/2012/09/01/notes-updated/"/>
    <updated>2012-09-01T10:09:00+12:00</updated>
    <id>http://jasonwryan.github.com/blog/2012/09/01/notes-updated</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://dl.dropbox.com/u/261312/Blog-images/notes.jpg" title="'Notepad image on Flickr'" >
Nearly two years ago, I posted about my adaption of a simple
<a href="http://jasonwryan.com/blog/2010/09/28/command-line-notes/" title="My post in 2010">command line note utility</a>.
I have used this setup on all of my machines on a daily basis since and it has worked
marvellously. Symlinking to a folder in
<a href="https://www.dropbox.com/home" title="Dropbox home">Dropbox</a> means that the notes are accessible
from all my machines, including my phone. There has only really been one aspect of this setup
that has been sub-optimal.</p>

<p>As an inveterate note-taker (this is one of the “benefits” of ageing; the speed with
which you forget information outpaces the acquisition of newer material) I have—in
those intervening years—built up quite a store of notes. Consequently, in order to
maintain a semblance of order, I have arranged them in a series of directories. There
is a minor flaw with this approach: retreiving a note depended on two factors, a) excellent
recall<sup>1</sup> and, b) accurately typing out the full path. Neither of these are things that I
am inherently good at or inclined to master.</p>

<p>This had been irritating me for some time before I came across this
<a href="http://unix.stackexchange.com/questions/11906/how-to-change-the-target-directory-for-tab-completion" title="Tab completion for notes function">question on Unix &amp; Linux StackExchange</a>.
This provided me with a partial solution to the issue but, as I note in my answer, I was not
able to solve it for nested directories, which was my particular use case. Once I had
muddled my way through the solution on U&amp;L I pushed it to the back of my mind and
tried to ignore it.</p>

<p>Recently, though, the accumulation of notes and the frustration of trying to access them
without <kbd>Tab</kbd> completion drove me to do something about it.</p>

<p>The documentation on
<a href="http://www.gnu.org/software/bash/manual/html_node/Programmable-Completion-Builtins.html" title="Bash Manual">programmable completion</a>
is typically terse and searching the web returns very little in the way of instructions
as to how to accomplish this.<sup>2</sup> Undeterred, I decided to hack up a completion
function that worked for nested directories.</p>

<p>What I arrived at was this:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'><span class="nb">shopt</span> -s globstar
</span><span class='line'><span class="nb">shopt</span> -s progcomp&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;n<span class="o">()</span> <span class="o">{</span> <span class="nv">$EDITOR</span> <span class="nv">$HOME</span>/.notes/<span class="s2">&quot;$*&quot;</span>.txt ;<span class="o">}</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt; <span class="c"># completion for notes</span>
</span><span class='line'>_notes<span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="nb">local </span>cur
</span><span class='line'>    <span class="nv">cur</span><span class="o">=</span><span class="k">${</span><span class="nv">COMP_WORDS</span><span class="p">[COMP_CWORD]</span><span class="k">}</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;files<span class="o">=(</span><span class="nv">$HOME</span>/.notes/**<span class="o">)</span>
</span><span class='line'><span class="nv">file</span><span class="o">=</span><span class="s2">&quot;${files[@]##*/}&quot;</span>
</span><span class='line'><span class="nv">COMPREPLY</span><span class="o">=(</span> <span class="k">$(</span> <span class="nb">compgen</span> -f <span class="s2">&quot;${file[@]}&quot;</span> -- <span class="k">${</span><span class="nv">cur</span><span class="k">}</span> <span class="k">)</span> <span class="o">)</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">}</span>
</span><span class='line'><span class="nb">complete</span> -o default -F _notes n
</span></code></pre></div></figure></notextile></div></p>

<p>The best that can be said about it is that it <em>nearly</em> works…<sup>3</sup></p>

<p>Realising that I was completely out of my depth, I turned to #bash for help, and
I was indeed fortunate that
<a href="https://github.com/geirha" title="geirha's Gitgub">geihra</a> offered some much needed
assistance. geirha's solution is an elegant one:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>n<span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="nb">local </span>arg <span class="nv">files</span><span class="o">=()</span>; <span class="k">for </span>arg; <span class="k">do </span>files+<span class="o">=(</span> ~/<span class="s2">&quot;.notes/$arg&quot;</span> <span class="o">)</span>; <span class="k">done</span>
</span><span class='line'><span class="k">${</span><span class="nv">EDITOR</span><span class="k">:-</span><span class="nv">vi</span><span class="k">}</span> <span class="s2">&quot;${files[@]}&quot;</span>
</span><span class='line'><span class="o">}</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;_notes<span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="nb">local </span><span class="nv">files</span><span class="o">=(</span><span class="nv">$HOME</span>/.notes/&lt;em&gt;*/<span class="s2">&quot;$2&quot;</span>&lt;/em&gt;<span class="o">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;<span class="o">[[</span> -e <span class="k">${</span><span class="nv">files</span><span class="p">[0]</span><span class="k">}</span> <span class="o">]]</span> &amp;amp;&amp;amp; <span class="nv">COMPREPLY</span><span class="o">=(</span> <span class="s2">&quot;${files[@]##~/.notes/}&quot;</span> <span class="o">)</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">}</span>
</span><span class='line'><span class="nb">complete</span> -o default -F _notes n
</span></code></pre></div></figure></notextile></div></p>

<p>In addition to working exactly as I hoped, it had the benefit of introducing me
to a couple more bash concepts that I hadn't encountered;
<a href="http://mywiki.wooledge.org/BashGuide/Arrays" title="Bash Guide on Greg's Wiki">adding elements to an array</a>
with <code>+=()</code> being one. For posterity, the full script is:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>n<span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="nb">local </span>arg <span class="nv">files</span><span class="o">=()</span>; <span class="k">for </span>arg; <span class="k">do </span>files+<span class="o">=(</span> ~/<span class="s2">&quot;.notes/$arg&quot;</span> <span class="o">)</span>; <span class="k">done</span>
</span><span class='line'><span class="k">${</span><span class="nv">EDITOR</span><span class="k">:-</span><span class="nv">vi</span><span class="k">}</span> <span class="s2">&quot;${files[@]}&quot;</span>
</span><span class='line'><span class="o">}</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;nls<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>tree -CR --noreport <span class="nv">$HOME</span>/.notes | awk <span class="s1">&#39;{&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;pre&gt;&lt;code&gt;if (NF==1) print $1; </span>
</span><span class='line'><span class="s1">else if (NF==2) print $2; </span>
</span><span class='line'><span class="s1">else if (NF==3) printf &quot;  %s\n&quot;, $3 </span>
</span><span class='line'><span class="s1">}&#39;</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">}</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt; <span class="c"># TAB completion for notes</span>
</span><span class='line'>_notes<span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="nb">local </span><span class="nv">files</span><span class="o">=(</span><span class="nv">$HOME</span>/.notes/&lt;em&gt;*/<span class="s2">&quot;$2&quot;</span>&lt;/em&gt;<span class="o">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;<span class="o">[[</span> -e <span class="k">${</span><span class="nv">files</span><span class="p">[0]</span><span class="k">}</span> <span class="o">]]</span> &amp;amp;&amp;amp; <span class="nv">COMPREPLY</span><span class="o">=(</span> <span class="s2">&quot;${files[@]##~/.notes/}&quot;</span> <span class="o">)</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">}</span>
</span><span class='line'><span class="nb">complete</span> -o default -F _notes n
</span></code></pre></div></figure></notextile></div></p>

<h4>Notes</h4>

<ol>
<li>The alternative to remembering the full path name is to list all of the notes before
each operation with the <code>nls</code> function; this is not ideal either…</li>
<li>Which means that it is either so straightforward that few have bothered to write up their
experiences (most likely), or so arcane that not many have bothered (how it
feels to me). However, there are a couple of pages that I referenced in addition
to the official documentation:

<ul>
<li><a href="http://www.gnu.org/software/bash/manual/html_node/Programmable-Completion-Builtins.html">Adam Backstrong's post</a></li>
<li><a href="http://fahdshariff.blogspot.co.nz/2011/04/writing-your-own-bash-completion.html">Fahd Shariff's post</a></li>
<li><a href="http://devmanual.gentoo.org/tasks-reference/completion/index.html">Gentoo Development Guide</a></li>
</ul>
</li>
<li>It fails, as geirha pointed out, because it breaks the filenames on whitespace.</li>
</ol>


<p>Creative Commons image on Flickr by
<a href="http://www.flickr.com/photos/nicholasjon/4101203095/" title="Field Notes etc on Flickr">nicholasjon</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Mercurial Queues]]></title>
    <link href="http://jasonwryan.github.com/blog/2012/07/24/queues/"/>
    <updated>2012-07-24T19:18:00+12:00</updated>
    <id>http://jasonwryan.github.com/blog/2012/07/24/queues</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://dl.dropbox.com/u/261312/Blog-images/queue.jpg" title="'Queue image on Flickr'" >
Over the last week or so, I have finally gotten around to digging into the whole concept of
using
<a href="http://hgbook.red-bean.com/read/managing-change-with-mercurial-queues.html" title="Chapter on queues in the Mercurial book">Mercurial Queues</a>
to manage patches against an upstream project; in my case
<a href="http://dwm.suckless.org" title="The truly suckless window manager…">dwm</a>.<sup>1</sup>
Essentially, this mercurial extension helps you manage a stack of patches on
top of a directory tree. This gives you quite a lot of fine-grained control
over your patchset and assists immeasurably with automating the application of
patches when the underlying codebase changes.</p>

<p>After having played around with queues for the last couple of days, I am quite
impressed: both the concept and the execution are simple and powerful. The concept
of Mercurial Queues is best described in the Mercurial book: the aptly titled,
<em>Mercurial: The Definitive Guide</em>:<sup>2</sup></p>

<p><blockquote><p>MQ's marriage of distributed revision control with patches makes it much easier to isolate your work. Your patches live on top of normal revision history, and you can make them disappear or reappear at will. If you don't like a patch, you can drop it. If a patch isn't quite as you want it to be, simply fix it—as many times as you need to, until you have refined it into the form you desire.</p><footer><strong>Mercurial, The Definitive Guide</strong> <cite><a href='http://hgbook.red-bean.com/read/managing-change-with-mercurial-queues.html'>hgbook.red-bean.com/read/&hellip;</a></cite></footer></blockquote></p>

<p>I followed Filippo Negroni's excellent
<a href="http://dwm.suckless.org/customisation/patch_queue" title="Step-by-step guide">tutorial on the dwm site</a>
to setup my own
<a href="http://pikacode.com/jasonwryan/dwm-patchset/files/default" title="Patchset on Pikacode">dwm patchset</a>
based on
<a href="http://hg.suckless.org/dwm" title="dwm hg repository">tip</a>, and the process was
surprisingly straightforward; the only caveat being it is a good idea to plan
quite carefully what changes you want in each particular patch. Once I had
completed the setup, it got me thinking about the fact that the final install
is done without <code>pacman</code>, just using <code>make install</code>. And, as a proof-of-concept
more than anything else, I wondered whether this functionality could be used
with <code>makepkg</code>.<sup>3</sup></p>

<p>Turns out, as you might expect with Arch, it was not much of a job to set it
up at all.</p>

<p><strong>Note</strong>: this doesn't mean I think it is a good idea; I was just interested
to see <em>if</em> it could be done and <em>how</em> it would work once it was set up. For something
like dwm, this is definitely a case of introducing a huge amount of complexity for
no apparent benefit (for those people running Gnome, this may quite appeal to you…).</p>

<p>I have a
<a href="http://pikacode.com/jasonwryan/Centurion/file/default/Build/dwm-hg/PKGBUILD" title="If you must…">working PKGBUILD</a>
that you can use if you want to follow along at home. Once you have downloaded
it into <span class="file">dwm-hg/</span>, run <code>makepkg</code> to clone the dwm
repository and build the binary.  Then you need to make sure that the mercurial
queue extension is enabled, so your <span class="file">.hgrc</span> needs to
contain:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'><span class="o">[</span>extensions<span class="o">]</span>
</span><span class='line'>hgext.mq <span class="o">=</span>
</span></code></pre></div></figure></notextile></div></p>

<p>Now, you need to setup the queue repository. We do this in <code>$srcdir</code>, which
is <span class="file">dwm-hg/src/dwm</span>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>hg qinit -c
</span></code></pre></div></figure></notextile></div></p>

<p>The next step is to start applying the various patches that you want to comprise
your patchset on dwm. In my case that is base customizations to <span class="file">config.def.h</span>
and three other patches:
<a href="http://pikacode.com/jasonwryan/dwm-patchset/file/default/statuscolours" title="Patch in mercurial queue">statuscolours</a>,
<a href="http://pikacode.com/jasonwryan/dwm-patchset/file/default/cycle" title="ditto">cycle</a>, and
<a href="http://pikacode.com/jasonwryan/dwm-patchset/file/default/push" title="etc…">push</a>.
There are other patches in my repository, one of which patches the appropriate
settings for an Arch build in the
<a href="http://pikacode.com/jasonwryan/dwm-patchset/file/default/setup.makefile" title="Arch settings for Makefiles">relevant makefiles</a>.
This is taken care of by the PKGBUILD in this case.</p>

<p>From here, it is very much as Filippo describes it in his tutorial: make
some changes, add them to the queue and rinse and repeat:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>hg qnew base.customizations
</span><span class='line'> <span class="c"># “hack hack hack…”</span>
</span><span class='line'>hg qrefresh
</span><span class='line'>hg qcommit -m <span class="s1">&#39;Added changes to config.def.h to customize&#39;</span>
</span></code></pre></div></figure></notextile></div></p>

<p>After committing each of your changes as a discrete patch, you can review the queue
with <code>hg qseries</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>┌─<span class="o">[</span>Centurion ~/Build/dwm-hg/src/dwm<span class="o">]</span>
</span><span class='line'>└─╼ hg qseries
</span><span class='line'>config.customizations
</span><span class='line'>statuscolours
</span><span class='line'>cycle
</span><span class='line'>push
</span></code></pre></div></figure></notextile></div></p>

<p>And <code>hg qapplied</code> will tell you which of the patches is currently
applied in the working repository; at this stage the list should look
the same as that in <code>hg qseries</code>. The next step is to remove all of the
patches from the queue so that we have a clean repository:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>┌─<span class="o">[</span>Centurion ~/Build/dwm-hg/src/dwm<span class="o">]</span>
</span><span class='line'>└─╼ hg qpop -a
</span><span class='line'>popping push
</span><span class='line'>popping cycle
</span><span class='line'>popping statuscolours
</span><span class='line'>popping config.customizations
</span><span class='line'>patch queue now empty
</span></code></pre></div></figure></notextile></div></p>

<p>Should you need to edit a patch, it is simply a matter of popping
to that spot in the stack (you can do so by name or by index
number, beginning at 0):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>┌─<span class="o">[</span>Centurion ~/Build/dwm-hg/src/dwm<span class="o">]</span>
</span><span class='line'>└─╼ hg qpop config.customizations
</span><span class='line'>popping push
</span><span class='line'>popping cycle
</span><span class='line'>popping statuscolours
</span><span class='line'>now at: config.customizations
</span><span class='line'> <span class="c"># “hack hack hack…”</span>
</span><span class='line'>hg qrefresh
</span><span class='line'>hg qpush -a
</span></code></pre></div></figure></notextile></div></p>

<p>Once you are satisfied with the state of the stack, remove all of the
patches to return to the original clean working directory and <code>cd</code> back
to <span class="file">dwm-hg/</span>. You can now use <code>makepkg -fi</code> to
rebuild the package and you should see the pushed patches as part of
the output:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'><span class="o">==</span>&gt; Starting build<span class="o">()</span>...
</span><span class='line'><span class="o">==</span>&gt; Pushing queued patchset
</span><span class='line'>applying config.customizations
</span><span class='line'>applying statuscolours
</span><span class='line'>applying cycle
</span><span class='line'>applying push
</span><span class='line'>now at: push
</span><span class='line'>dwm build options:
</span></code></pre></div></figure></notextile></div></p>

<p>…and when you restart dwm, your customizations will be applied.
When new changes are pushed to
<a href="http://hg.suckless.org/dwm" title="dwm mercurial repo">the dwm repo</a>
you can just <code>makepkg -fi</code>, and, if any of the patches fail due
to changes in the underlying code, pop the stack to the failed
patch, rebase the code, <code>hg qrefresh</code> and continue until done.</p>

<p>As I said at the beginning of this post, this isn't a particularly smart way to
use Mercurial Queues, PKGBUILDs or a combination of the two. You are much
better off just cloning dwm to your local repository, initializing a queue
repository and, once you are done setting up your patchset, issuing <code>make &amp;&amp;
sudo make install</code>.</p>

<p>If you have more than one machine, you can easily setup a repository for
your patchset on
<a href="https://bitbucket.org/" title="bitbucket free mercurial hosting">bitbucket</a>
or <a href="http://pikacode.com/" title="Free Mercurial and Git hosting">Pikacode</a>
and host it there: then just pull the patchset queue
from your other boxes and <code>hg qpush -a</code>. If you require a slightly
different patchset for each box, you can use MQ to manage this
process as well. This is where MQ really excels;
I'll cover this in more detail in my next post.</p>

<h4>Notes</h4>

<ol>
<li>See <a href="http://jasonwryan.com/blog/categories/dwm/" title="dwm category in the archives">related dwm posts</a>.</li>
<li>I can't recommend this {book,wiki} highly enough; it is an excellent
example of thorough, accessible documentation.</li>
<li>In the case of something like dwm, this is really irrelevant, as there
is a single tiny binary and a <code>man</code> page, so keeping track of these files on
your system is not an issue at all.</li>
</ol>


<p>Flickr Creative Commons image by
<a href="http://www.flickr.com/photos/bagelmouse/3936852444/" title="Queue image on Flickr">RachelH</a></p>
]]></content>
  </entry>
  
</feed>
