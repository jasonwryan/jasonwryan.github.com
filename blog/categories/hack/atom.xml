<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hack | jasonwryan.com]]></title>
  <link href="http://jasonwryan.github.com/blog/categories/hack/atom.xml" rel="self"/>
  <link href="http://jasonwryan.github.com/"/>
  <updated>2013-01-25T19:43:18+13:00</updated>
  <id>http://jasonwryan.github.com/</id>
  <author>
    <name><![CDATA[Jason Ryan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Replacing TrueCrypt]]></title>
    <link href="http://jasonwryan.github.com/blog/2013/01/10/truecrypt/"/>
    <updated>2013-01-10T16:02:00+13:00</updated>
    <id>http://jasonwryan.github.com/blog/2013/01/10/truecrypt</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://dl.dropbox.com/u/261312/Blog-images/lock.jpg" title="'Flickr image of lock'" >
I have used <a href="http://truecrypt.org/" title="TrueCrypt homepage">TrueCrypt</a> since just before
I migrated to Linux, so somwehere around six or seven years, dating back to version 3 or 4.
It is an incredibly handy utility, allowing you to create and manage encrypted volumes on
the fly and—for the especially paranoid—to hide the existence of those volumes from
inquisitive others.</p>

<p>In the intervening years, with all aspects of my personal life
increasingly mediated digitally, in order to properly safeguard my privacy,
and that of my family, I have taken to using LUKS to
<a href="http://jasonwryan.com/blog/2012/02/11/lvm/" title="Post on LVM on LUKS">fully encrypt all of my machines</a>.
And I have used TrueCrypt, both personally and for work, to encrypt some of my USB drives and as
a container in <a href="http://dropbox.com/" title="Dropbox homepage">Dropbox</a>
, for as long as
<a href="http://jasonwryan.com/blog/2010/01/11/using-dropbox-to-share-dotfiles/" title="Post on sharing dotfiles with Dropbox">I have used that service</a>.</p>

<p>Early last year, however, I became aware of concerns that TrueCrypt was not truly open source; that almost
all of the larger distros, including Arch, and the Open Source Initiative did not regard TrueCrypt as
free (as in Freedom) software:</p>

<p><blockquote><p>The TrueCrypt License has not been officially approved by the Open Source Initiative and is not considered "free" by several major Linux distributions (Arch Linux, Debian, Ubuntu, Fedora, openSUSE, Gentoo), mainly because of distribution and copyright-liability reasons.</p><footer><strong>Wikipedia entry on TrueCrypt</strong> <cite><a href='https://en.wikipedia.org/wiki/Truecrypt'>en.wikipedia.org/wiki/Truecrypt/&hellip;</a></cite></footer></blockquote></p>

<p>When I initially accessed the page, in February 2012, there was also a paragraph—now removed—that
highlighted further, more alarmist, concerns about the shadowy identity of the people behind
TrueCrypt:</p>

<p><blockquote><p>The anonymity of the developers and the abnormalities mentioned above have led users to raise suspicions about the provenance of the product and speculate about the possible existence of vulnerabilities or backdoors that might exist in the source code or executables. http://www.privacylover.com/encryption/analysis-is-there-a-backdoor-in-truecrypt-is-truecrypt-a-cia-honeypot/ However its open source and it can be check for funerabilities that way. [sic]</p><footer><strong>Wikipedia entry retrieved in February 2012</strong> <cite><a href='https://en.wikipedia.org/w/index.php?title=TrueCrypt&amp;diff=478623780&amp;oldid=478608477'>en.wikipedia.org/w/&hellip;</a></cite></footer></blockquote></p>

<p>While I don't subscribe to the theory that the CIA have planted a backdoor in the software (if they
had, <a href="https://en.wikipedia.org/wiki/Truecrypt#Operation_Satyagraha" title="FBI operation foiled by TC">it clearly doesn't work</a>),
I was relieved to see at the end of last year that someone had written a simple utility that allows
you to manage TrueCrypt containers from the command line; <a href="https://github.com/bwalex/tc-play" title="tcplay on Guthub">tcplay</a>
is decribed as:</p>

<p><blockquote><p>a free (BSD-licensed), pretty much fully featured (including multiple keyfiles, cipher cascades, etc) and stable TrueCrypt implementation.</p></blockquote></p>

<p>With a <a href="https://github.com/bwalex/tc-play/blob/master/LICENSE" title="tcplay license">simple, two paragraph license</a>
and a brief but comprehensive <code>man</code> page, I was sold. I uninstalled TrueCrypt late last year and haven't missed it since. Quite
the contrary. The only “issue” that I have had with tcplay is remembering the commands to map and mount a drive.
Initially, I jotted down some notes, but opening them up several times a week to refer to them quickly seemed
pointless so I eventually wised up and wrote a wrapper script to do the job for me…</p>

<p>The script is quite simple, it finds the first available loop device, maps the encrypted volume to it and
mounts it read-writeable for your user.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/bin/bash&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;manage truecrypt containers using tcplay&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;user<span class="o">=</span>jason
</span><span class='line'><span class="nv">cryptdev</span><span class="o">=</span>Safebox
</span><span class='line'><span class="nv">cryptpath</span><span class="o">=</span>/home/jason/Dropbox/<span class="s2">&quot;$cryptdev&quot;</span>
</span><span class='line'><span class="nv">loopdev</span><span class="o">=</span><span class="k">$(</span>losetup -f<span class="k">)</span>
</span><span class='line'><span class="nv">mountpt</span><span class="o">=</span>/media/<span class="s2">&quot;$cryptdev&quot;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;must be run as root&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;if <span class="o">[[</span> <span class="nv">$EUID</span> !<span class="o">=</span> 0 <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">printf</span> <span class="s2">&quot;%s\n&quot;</span> <span class="s2">&quot;You must be root to run this.&quot;</span>
</span><span class='line'>  <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;unecrypt and mount container&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;if <span class="o">[[</span> <span class="s2">&quot;$1&quot;</span> <span class="o">==</span> <span class="s2">&quot;open&quot;</span> <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span>losetup <span class="s2">&quot;$loopdev&quot;</span> <span class="s2">&quot;$cryptpath&quot;</span>
</span><span class='line'>  tcplay --map<span class="o">=</span><span class="s2">&quot;$cryptdev&quot;</span> --device<span class="o">=</span><span class="s2">&quot;$loopdev&quot;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  <span class="c"># read passphrase</span>
</span><span class='line'>  <span class="nb">read</span> -r -s passphrase &amp;lt;&amp;lt;EOF
</span><span class='line'>  <span class="s2">&quot;$passphrase&quot;</span>
</span><span class='line'>EOF&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  <span class="c"># mount container</span>
</span><span class='line'>  <span class="o">[[</span> -d <span class="s2">&quot;$mountpt&quot;</span> <span class="o">]]</span> <span class="o">||</span> mkdir <span class="s2">&quot;$mountpt&quot;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  <span class="c"># mount options</span>
</span><span class='line'>  <span class="nv">userid</span><span class="o">=</span><span class="k">$(</span>awk -F<span class="s2">&quot;[=(]&quot;</span> <span class="s1">&#39;{print $2,$4}&#39;</span> &amp;lt;<span class="o">(</span>id <span class="s2">&quot;$user&quot;</span><span class="k">)</span><span class="o">)</span>
</span><span class='line'>  mount -o nosuid,uid<span class="o">=</span><span class="s2">&quot;${userid% &lt;em&gt;}&quot;</span>,gid<span class="o">=</span><span class="s2">&quot;${userid#&lt;/em&gt; }&quot;</span> /dev/mapper/<span class="s2">&quot;$cryptdev&quot;</span> <span class="s2">&quot;$mountpt&quot;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;close and clean up…&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;elif <span class="o">[[</span> <span class="s2">&quot;$1&quot;</span> <span class="o">==</span> <span class="s2">&quot;close&quot;</span> <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nv">device</span><span class="o">=</span><span class="k">$(</span>awk -v <span class="nv">dev</span><span class="o">=</span><span class="nv">$cryptdev</span> -F<span class="s2">&quot;:&quot;</span> <span class="s1">&#39;/dev/ {print $1}&#39;</span> &amp;lt;<span class="o">(</span>losetup -a<span class="k">)</span><span class="o">)</span>
</span><span class='line'>  umount <span class="s2">&quot;$mountpt&quot;</span>
</span><span class='line'>  dmsetup remove <span class="s2">&quot;$cryptdev&quot;</span> <span class="o">||</span> <span class="nb">printf</span> <span class="s2">&quot;%s\n&quot;</span> <span class="s2">&quot;demapping failed&quot;</span>
</span><span class='line'>  losetup -d <span class="s2">&quot;$device&quot;</span> <span class="o">||</span> <span class="nb">printf</span> <span class="s2">&quot;%s\n&quot;</span> <span class="s2">&quot;deleting $loopdev failed&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">  </span><span class="nb">printf</span> <span class="s2">&quot;%s\n&quot;</span> <span class="s2">&quot;Options are open or close.&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></div></figure></notextile></div></p>

<p>Once you are done, the script will unmount your volume and clean up. Undoubtedly, the
script could be improved; patches are welcome.</p>

<p>There is a
<a href="https://aur.archlinux.org/packages/tcplay-git/" title="Arch User Repository">PKGBUILD in the AUR</a>.
Uninstall TrueCrypt and give tcplay a go, it is a simple, powerful application; and it <em>is</em>
free software…</p>

<h4>Notes</h4>

<p>Creative Commons image on Flickr by <a href="http://www.flickr.com/photos/xserve/368758286/" title="Licensed CC by xserv">xserv</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improved Notes Utility]]></title>
    <link href="http://jasonwryan.github.com/blog/2012/09/01/notes-updated/"/>
    <updated>2012-09-01T10:09:00+12:00</updated>
    <id>http://jasonwryan.github.com/blog/2012/09/01/notes-updated</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://dl.dropbox.com/u/261312/Blog-images/notes.jpg" title="'Notepad image on Flickr'" >
Nearly two years ago, I posted about my adaption of a simple
<a href="http://jasonwryan.com/blog/2010/09/28/command-line-notes/" title="My post in 2010">command line note utility</a>.
I have used this setup on all of my machines on a daily basis since and it has worked
marvellously. Symlinking to a folder in
<a href="https://www.dropbox.com/home" title="Dropbox home">Dropbox</a> means that the notes are accessible
from all my machines, including my phone. There has only really been one aspect of this setup
that has been sub-optimal.</p>

<p>As an inveterate note-taker (this is one of the “benefits” of ageing; the speed with
which you forget information outpaces the acquisition of newer material) I have—in
those intervening years—built up quite a store of notes. Consequently, in order to
maintain a semblance of order, I have arranged them in a series of directories. There
is a minor flaw with this approach: retreiving a note depended on two factors, a) excellent
recall<sup>1</sup> and, b) accurately typing out the full path. Neither of these are things that I
am inherently good at or inclined to master.</p>

<p>This had been irritating me for some time before I came across this
<a href="http://unix.stackexchange.com/questions/11906/how-to-change-the-target-directory-for-tab-completion" title="Tab completion for notes function">question on Unix &amp; Linux StackExchange</a>.
This provided me with a partial solution to the issue but, as I note in my answer, I was not
able to solve it for nested directories, which was my particular use case. Once I had
muddled my way through the solution on U&amp;L I pushed it to the back of my mind and
tried to ignore it.</p>

<p>Recently, though, the accumulation of notes and the frustration of trying to access them
without <kbd>Tab</kbd> completion drove me to do something about it.</p>

<p>The documentation on
<a href="http://www.gnu.org/software/bash/manual/html_node/Programmable-Completion-Builtins.html" title="Bash Manual">programmable completion</a>
is typically terse and searching the web returns very little in the way of instructions
as to how to accomplish this.<sup>2</sup> Undeterred, I decided to hack up a completion
function that worked for nested directories.</p>

<p>What I arrived at was this:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'><span class="nb">shopt</span> -s globstar
</span><span class='line'><span class="nb">shopt</span> -s progcomp&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;n<span class="o">()</span> <span class="o">{</span> <span class="nv">$EDITOR</span> <span class="nv">$HOME</span>/.notes/<span class="s2">&quot;$*&quot;</span>.txt ;<span class="o">}</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt; <span class="c"># completion for notes</span>
</span><span class='line'>_notes<span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="nb">local </span>cur
</span><span class='line'>    <span class="nv">cur</span><span class="o">=</span><span class="k">${</span><span class="nv">COMP_WORDS</span><span class="p">[COMP_CWORD]</span><span class="k">}</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;files<span class="o">=(</span><span class="nv">$HOME</span>/.notes/**<span class="o">)</span>
</span><span class='line'><span class="nv">file</span><span class="o">=</span><span class="s2">&quot;${files[@]##*/}&quot;</span>
</span><span class='line'><span class="nv">COMPREPLY</span><span class="o">=(</span> <span class="k">$(</span> <span class="nb">compgen</span> -f <span class="s2">&quot;${file[@]}&quot;</span> -- <span class="k">${</span><span class="nv">cur</span><span class="k">}</span> <span class="k">)</span> <span class="o">)</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">}</span>
</span><span class='line'><span class="nb">complete</span> -o default -F _notes n
</span></code></pre></div></figure></notextile></div></p>

<p>The best that can be said about it is that it <em>nearly</em> works…<sup>3</sup></p>

<p>Realising that I was completely out of my depth, I turned to #bash for help, and
I was indeed fortunate that
<a href="https://github.com/geirha" title="geirha's Gitgub">geihra</a> offered some much needed
assistance. geirha's solution is an elegant one:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>n<span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="nb">local </span>arg <span class="nv">files</span><span class="o">=()</span>; <span class="k">for </span>arg; <span class="k">do </span>files+<span class="o">=(</span> ~/<span class="s2">&quot;.notes/$arg&quot;</span> <span class="o">)</span>; <span class="k">done</span>
</span><span class='line'><span class="k">${</span><span class="nv">EDITOR</span><span class="k">:-</span><span class="nv">vi</span><span class="k">}</span> <span class="s2">&quot;${files[@]}&quot;</span>
</span><span class='line'><span class="o">}</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;_notes<span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="nb">local </span><span class="nv">files</span><span class="o">=(</span><span class="nv">$HOME</span>/.notes/&lt;em&gt;*/<span class="s2">&quot;$2&quot;</span>&lt;/em&gt;<span class="o">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;<span class="o">[[</span> -e <span class="k">${</span><span class="nv">files</span><span class="p">[0]</span><span class="k">}</span> <span class="o">]]</span> &amp;amp;&amp;amp; <span class="nv">COMPREPLY</span><span class="o">=(</span> <span class="s2">&quot;${files[@]##~/.notes/}&quot;</span> <span class="o">)</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">}</span>
</span><span class='line'><span class="nb">complete</span> -o default -F _notes n
</span></code></pre></div></figure></notextile></div></p>

<p>In addition to working exactly as I hoped, it had the benefit of introducing me
to a couple more bash concepts that I hadn't encountered;
<a href="http://mywiki.wooledge.org/BashGuide/Arrays" title="Bash Guide on Greg's Wiki">adding elements to an array</a>
with <code>+=()</code> being one. For posterity, the full script is:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>n<span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="nb">local </span>arg <span class="nv">files</span><span class="o">=()</span>; <span class="k">for </span>arg; <span class="k">do </span>files+<span class="o">=(</span> ~/<span class="s2">&quot;.notes/$arg&quot;</span> <span class="o">)</span>; <span class="k">done</span>
</span><span class='line'><span class="k">${</span><span class="nv">EDITOR</span><span class="k">:-</span><span class="nv">vi</span><span class="k">}</span> <span class="s2">&quot;${files[@]}&quot;</span>
</span><span class='line'><span class="o">}</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;nls<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>tree -CR --noreport <span class="nv">$HOME</span>/.notes | awk <span class="s1">&#39;{&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;pre&gt;&lt;code&gt;if (NF==1) print $1; </span>
</span><span class='line'><span class="s1">else if (NF==2) print $2; </span>
</span><span class='line'><span class="s1">else if (NF==3) printf &quot;  %s\n&quot;, $3 </span>
</span><span class='line'><span class="s1">}&#39;</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">}</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt; <span class="c"># TAB completion for notes</span>
</span><span class='line'>_notes<span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="nb">local </span><span class="nv">files</span><span class="o">=(</span><span class="nv">$HOME</span>/.notes/&lt;em&gt;*/<span class="s2">&quot;$2&quot;</span>&lt;/em&gt;<span class="o">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;<span class="o">[[</span> -e <span class="k">${</span><span class="nv">files</span><span class="p">[0]</span><span class="k">}</span> <span class="o">]]</span> &amp;amp;&amp;amp; <span class="nv">COMPREPLY</span><span class="o">=(</span> <span class="s2">&quot;${files[@]##~/.notes/}&quot;</span> <span class="o">)</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">}</span>
</span><span class='line'><span class="nb">complete</span> -o default -F _notes n
</span></code></pre></div></figure></notextile></div></p>

<h4>Notes</h4>

<ol>
<li>The alternative to remembering the full path name is to list all of the notes before
each operation with the <code>nls</code> function; this is not ideal either…</li>
<li>Which means that it is either so straightforward that few have bothered to write up their
experiences (most likely), or so arcane that not many have bothered (how it
feels to me). However, there are a couple of pages that I referenced in addition
to the official documentation:

<ul>
<li><a href="http://www.gnu.org/software/bash/manual/html_node/Programmable-Completion-Builtins.html">Adam Backstrong's post</a></li>
<li><a href="http://fahdshariff.blogspot.co.nz/2011/04/writing-your-own-bash-completion.html">Fahd Shariff's post</a></li>
<li><a href="http://devmanual.gentoo.org/tasks-reference/completion/index.html">Gentoo Development Guide</a></li>
</ul>
</li>
<li>It fails, as geirha pointed out, because it breaks the filenames on whitespace.</li>
</ol>


<p>Creative Commons image on Flickr by
<a href="http://www.flickr.com/photos/nicholasjon/4101203095/" title="Field Notes etc on Flickr">nicholasjon</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Mercurial Queues]]></title>
    <link href="http://jasonwryan.github.com/blog/2012/07/24/queues/"/>
    <updated>2012-07-24T19:18:00+12:00</updated>
    <id>http://jasonwryan.github.com/blog/2012/07/24/queues</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://dl.dropbox.com/u/261312/Blog-images/queue.jpg" title="'Queue image on Flickr'" >
Over the last week or so, I have finally gotten around to digging into the whole concept of
using
<a href="http://hgbook.red-bean.com/read/managing-change-with-mercurial-queues.html" title="Chapter on queues in the Mercurial book">Mercurial Queues</a>
to manage patches against an upstream project; in my case
<a href="http://dwm.suckless.org" title="The truly suckless window manager…">dwm</a>.<sup>1</sup>
Essentially, this mercurial extension helps you manage a stack of patches on
top of a directory tree. This gives you quite a lot of fine-grained control
over your patchset and assists immeasurably with automating the application of
patches when the underlying codebase changes.</p>

<p>After having played around with queues for the last couple of days, I am quite
impressed: both the concept and the execution are simple and powerful. The concept
of Mercurial Queues is best described in the Mercurial book: the aptly titled,
<em>Mercurial: The Definitive Guide</em>:<sup>2</sup></p>

<p><blockquote><p>MQ's marriage of distributed revision control with patches makes it much easier to isolate your work. Your patches live on top of normal revision history, and you can make them disappear or reappear at will. If you don't like a patch, you can drop it. If a patch isn't quite as you want it to be, simply fix it—as many times as you need to, until you have refined it into the form you desire.</p><footer><strong>Mercurial, The Definitive Guide</strong> <cite><a href='http://hgbook.red-bean.com/read/managing-change-with-mercurial-queues.html'>hgbook.red-bean.com/read/&hellip;</a></cite></footer></blockquote></p>

<p>I followed Filippo Negroni's excellent
<a href="http://dwm.suckless.org/customisation/patch_queue" title="Step-by-step guide">tutorial on the dwm site</a>
to setup my own
<a href="http://pikacode.com/jasonwryan/dwm-patchset/files/default" title="Patchset on Pikacode">dwm patchset</a>
based on
<a href="http://hg.suckless.org/dwm" title="dwm hg repository">tip</a>, and the process was
surprisingly straightforward; the only caveat being it is a good idea to plan
quite carefully what changes you want in each particular patch. Once I had
completed the setup, it got me thinking about the fact that the final install
is done without <code>pacman</code>, just using <code>make install</code>. And, as a proof-of-concept
more than anything else, I wondered whether this functionality could be used
with <code>makepkg</code>.<sup>3</sup></p>

<p>Turns out, as you might expect with Arch, it was not much of a job to set it
up at all.</p>

<p><strong>Note</strong>: this doesn't mean I think it is a good idea; I was just interested
to see <em>if</em> it could be done and <em>how</em> it would work once it was set up. For something
like dwm, this is definitely a case of introducing a huge amount of complexity for
no apparent benefit (for those people running Gnome, this may quite appeal to you…).</p>

<p>I have a
<a href="http://pikacode.com/jasonwryan/Centurion/file/default/Build/dwm-hg/PKGBUILD" title="If you must…">working PKGBUILD</a>
that you can use if you want to follow along at home. Once you have downloaded
it into <span class="file">dwm-hg/</span>, run <code>makepkg</code> to clone the dwm
repository and build the binary.  Then you need to make sure that the mercurial
queue extension is enabled, so your <span class="file">.hgrc</span> needs to
contain:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'><span class="o">[</span>extensions<span class="o">]</span>
</span><span class='line'>hgext.mq <span class="o">=</span>
</span></code></pre></div></figure></notextile></div></p>

<p>Now, you need to setup the queue repository. We do this in <code>$srcdir</code>, which
is <span class="file">dwm-hg/src/dwm</span>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>hg qinit -c
</span></code></pre></div></figure></notextile></div></p>

<p>The next step is to start applying the various patches that you want to comprise
your patchset on dwm. In my case that is base customizations to <span class="file">config.def.h</span>
and three other patches:
<a href="http://pikacode.com/jasonwryan/dwm-patchset/file/default/statuscolours" title="Patch in mercurial queue">statuscolours</a>,
<a href="http://pikacode.com/jasonwryan/dwm-patchset/file/default/cycle" title="ditto">cycle</a>, and
<a href="http://pikacode.com/jasonwryan/dwm-patchset/file/default/push" title="etc…">push</a>.
There are other patches in my repository, one of which patches the appropriate
settings for an Arch build in the
<a href="http://pikacode.com/jasonwryan/dwm-patchset/file/default/setup.makefile" title="Arch settings for Makefiles">relevant makefiles</a>.
This is taken care of by the PKGBUILD in this case.</p>

<p>From here, it is very much as Filippo describes it in his tutorial: make
some changes, add them to the queue and rinse and repeat:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>hg qnew base.customizations
</span><span class='line'> <span class="c"># “hack hack hack…”</span>
</span><span class='line'>hg qrefresh
</span><span class='line'>hg qcommit -m <span class="s1">&#39;Added changes to config.def.h to customize&#39;</span>
</span></code></pre></div></figure></notextile></div></p>

<p>After committing each of your changes as a discrete patch, you can review the queue
with <code>hg qseries</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>┌─<span class="o">[</span>Centurion ~/Build/dwm-hg/src/dwm<span class="o">]</span>
</span><span class='line'>└─╼ hg qseries
</span><span class='line'>config.customizations
</span><span class='line'>statuscolours
</span><span class='line'>cycle
</span><span class='line'>push
</span></code></pre></div></figure></notextile></div></p>

<p>And <code>hg qapplied</code> will tell you which of the patches is currently
applied in the working repository; at this stage the list should look
the same as that in <code>hg qseries</code>. The next step is to remove all of the
patches from the queue so that we have a clean repository:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>┌─<span class="o">[</span>Centurion ~/Build/dwm-hg/src/dwm<span class="o">]</span>
</span><span class='line'>└─╼ hg qpop -a
</span><span class='line'>popping push
</span><span class='line'>popping cycle
</span><span class='line'>popping statuscolours
</span><span class='line'>popping config.customizations
</span><span class='line'>patch queue now empty
</span></code></pre></div></figure></notextile></div></p>

<p>Should you need to edit a patch, it is simply a matter of popping
to that spot in the stack (you can do so by name or by index
number, beginning at 0):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>┌─<span class="o">[</span>Centurion ~/Build/dwm-hg/src/dwm<span class="o">]</span>
</span><span class='line'>└─╼ hg qpop config.customizations
</span><span class='line'>popping push
</span><span class='line'>popping cycle
</span><span class='line'>popping statuscolours
</span><span class='line'>now at: config.customizations
</span><span class='line'> <span class="c"># “hack hack hack…”</span>
</span><span class='line'>hg qrefresh
</span><span class='line'>hg qpush -a
</span></code></pre></div></figure></notextile></div></p>

<p>Once you are satisfied with the state of the stack, remove all of the
patches to return to the original clean working directory and <code>cd</code> back
to <span class="file">dwm-hg/</span>. You can now use <code>makepkg -fi</code> to
rebuild the package and you should see the pushed patches as part of
the output:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'><span class="o">==</span>&gt; Starting build<span class="o">()</span>...
</span><span class='line'><span class="o">==</span>&gt; Pushing queued patchset
</span><span class='line'>applying config.customizations
</span><span class='line'>applying statuscolours
</span><span class='line'>applying cycle
</span><span class='line'>applying push
</span><span class='line'>now at: push
</span><span class='line'>dwm build options:
</span></code></pre></div></figure></notextile></div></p>

<p>…and when you restart dwm, your customizations will be applied.
When new changes are pushed to
<a href="http://hg.suckless.org/dwm" title="dwm mercurial repo">the dwm repo</a>
you can just <code>makepkg -fi</code>, and, if any of the patches fail due
to changes in the underlying code, pop the stack to the failed
patch, rebase the code, <code>hg qrefresh</code> and continue until done.</p>

<p>As I said at the beginning of this post, this isn't a particularly smart way to
use Mercurial Queues, PKGBUILDs or a combination of the two. You are much
better off just cloning dwm to your local repository, initializing a queue
repository and, once you are done setting up your patchset, issuing <code>make &amp;&amp;
sudo make install</code>.</p>

<p>If you have more than one machine, you can easily setup a repository for
your patchset on
<a href="https://bitbucket.org/" title="bitbucket free mercurial hosting">bitbucket</a>
or <a href="http://pikacode.com/" title="Free Mercurial and Git hosting">Pikacode</a>
and host it there: then just pull the patchset queue
from your other boxes and <code>hg qpush -a</code>. If you require a slightly
different patchset for each box, you can use MQ to manage this
process as well. This is where MQ really excels;
I'll cover this in more detail in my next post.</p>

<h4>Notes</h4>

<ol>
<li>See <a href="http://jasonwryan.com/blog/categories/dwm/" title="dwm category in the archives">related dwm posts</a>.</li>
<li>I can't recommend this {book,wiki} highly enough; it is an excellent
example of thorough, accessible documentation.</li>
<li>In the case of something like dwm, this is really irrelevant, as there
is a single tiny binary and a <code>man</code> page, so keeping track of these files on
your system is not an issue at all.</li>
</ol>


<p>Flickr Creative Commons image by
<a href="http://www.flickr.com/photos/bagelmouse/3936852444/" title="Queue image on Flickr">RachelH</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using mutt, LDAP and SSL]]></title>
    <link href="http://jasonwryan.github.com/blog/2012/04/21/lbdb/"/>
    <updated>2012-04-21T11:23:00+12:00</updated>
    <id>http://jasonwryan.github.com/blog/2012/04/21/lbdb</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://dl.dropbox.com/u/261312/Blog-images/addressbook.png" title="'Address Book Icon by bertop on Flickr'" ></p>

<p>One of the great things about starting a new job at
<a href="http://jasonwryan.com/blog/2012/04/05/catalyst/" title="My post on joining Catalyst IT">an open source company</a>
is having the freedom to use the tools that suit your workflow, rather than
having to suffer the indignity of whatever the IT department consider to be the
lowest comon denominator. Suffice to say, I have had a lot of fun this week
setting up my working environment—and the ocassional hiccough as I was forced to learn
something new…</p>

<p>One of those “learning opportunities” consisted of trying to get my mail client,
<a href="http://www.mutt.org/" title="All mail clients suck. This one just sucks less.">mutt</a>
to talk to the <acronym title="Lightweight Directory Acces Protocol">LDAP</acronym>
directory over <acronym title="Secure Sockets Layer">SSL</acronym> so that I could
query the shared address book. There are a number of helpful blog posts that describe
using <a href="http://www.spinnaker.de/lbdb/" title="The Little Brother Database homepage">lbdb</a>
with <code>mutt</code><sup>1</sup>. Unfortunately, after a lot of searching, I was unable to find
any documentation on achieving this integration over a secure connection.
I kept seeing this error:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>Error: Search failed. LDAP server returned an error : 13, description: TLS
</span><span class='line'>confidentiality required at /usr/lib/mutt_ldap_query line 198, &lt;DATA&gt; line 558.
</span></code></pre></div></figure></notextile></div></p>

<p>Several hours later, and with some
help from <a href="https://twitter.com/#!/ibeardslee" title="Ian on Twitter: follow him…">@ibeardslee</a>,
I managed to set it up, and it was definitely worth the effort.</p>

<p>You will need to install <code>lbdb</code> from
<a href="http://aur.archlinux.org/packages.php?ID=10225" title="AUR package">the AUR</a>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>cowerd lbdb     <span class="c"># 2</span>
</span></code></pre></div></figure></notextile></div></p>

<p>…and a couple of packages from the repos to make it all work:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>pacman -S perl-ldap perl-io-socket-ssl netkit-bsd-finger
</span></code></pre></div></figure></notextile></div></p>

<p>Then it is a matter of configuring <code>lbdb</code> to both
query the LDAP directory and be able to be called from <code>mutt</code>.
First, copy the config files into your <span class="file">$HOME</span>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>mkdir .lbdb
</span><span class='line'>cp /etc/lbdb.rc .lbdb/lbdbrc
</span><span class='line'>cp /etc/lbdb_ldap.rc .lbdb/ldap.rc
</span></code></pre></div></figure></notextile></div></p>

<p>And then modify the two configuration files to suit your setup:
The first, <span class="file">$HOME/.lbdb/lbdbrc</span>, is well commented and
self-explanatory; add <code>ldap</code> to the methods and the
nickname of your server:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'><span class="nv">METHODS</span><span class="o">=</span><span class="s2">&quot;m_abook m_ldap&quot;</span>
</span><span class='line'><span class="nv">LDAP_NICKS</span><span class="o">=</span><span class="s2">&quot;catalyst&quot;</span>
</span></code></pre></div></figure></notextile></div></p>

<p>The second config file, <span class="file">$HOME/.lbdb/ldap.rc</span>
is written in Perl and is a bit of a shocker:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='perl'><span class='line'><span class="nv">%ldap_server_db</span> <span class="o">=</span> <span class="p">(</span><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;</span><span class="s">&#39;catalyst&#39;</span> <span class="o">=&amp;</span><span class="ow">gt</span><span class="p">;</span> <span class="p">[</span><span class="s">&#39;ldaps://ldap.catalyst.net.nz:636&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s">&#39;ou=Staff,ou=People,dc=catalyst,dc=net,dc=nz&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s">&#39;givenname sn cn mail&#39;</span><span class="p">,</span> <span class="s">&#39;givenname sn cn mail&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s">&#39;${mail}&#39;</span><span class="p">,</span> <span class="s">&#39;${givenname} ${sn}&#39;</span><span class="p">]</span>
</span><span class='line'><span class="sr">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span><span class="p">);</span><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;</span><span class="n">hostname</span> <span class="n">of</span> <span class="n">your</span> <span class="n">ldap</span> <span class="n">server</span><span class="sr">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span><span class="nv">$ldap_server</span> <span class="o">=</span> <span class="s">&#39;ldaps://ldap.catalyst.net.nz:636&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$search_base</span> <span class="o">=</span> <span class="s">&#39;ou=Staff,ou=People,dc=catalyst,dc=net,dc=nz&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$ldap_search_fields</span>    <span class="o">=</span> <span class="s">&#39;givenname sn cn mail&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$ldap_expected_answers</span> <span class="o">=</span> <span class="s">&#39;givenname sn cn mail&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$ldap_result_email</span>     <span class="o">=</span> <span class="s">&#39;${mail}&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$ldap_result_realname</span>  <span class="o">=</span> <span class="s">&#39;${givenname} ${sn}&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$ignorant</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="nv">$ldap_bind_dn</span> <span class="o">=</span> <span class="s">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$ldap_bind_password</span> <span class="o">=</span> <span class="s">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="mi">1</span><span class="p">;</span>
</span></code></pre></div></figure></notextile></div></p>

<p>The key is to ensure that you use both the <code>ldaps</code>
prefix <strong>and</strong> explicitely specify the SSL port, 636. Without both of these, you will
get the TLS confidentiality error.</p>

<p>You can then test that it is working correctly by running a query:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>lbdbq jemima
</span></code></pre></div></figure></notextile></div></p>

<p>All going well, if there is indeed a Jemima in the shared address book, you will see her
contact details miraculously appear before you. If there is more than one, you will have a
list to choose from.</p>

<p>Finally, you just need to set up <code>mutt</code> to query <code>lbdb</code>.
In your <span class="file">muttrc</span>, add the following:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'><span class="nb">set </span><span class="nv">query_command</span> <span class="o">=</span> <span class="s2">&quot;lbdbq %s 2&gt;/dev/null&quot;</span>
</span></code></pre></div></figure></notextile></div></p>

<p>I found that suppressing the errors made the whole experience a little smoother. You
may not require it… Now, hitting <kbd>Shift</kbd><kbd>q</kbd> in <code>mutt</code>
brings up a prompt to query the LDAP directory (and my <a href="http://abook.sourceforge.net/" title="abook homepage">abook</a> address book that I share via
<a href="https://www.dropbox.com/" title="Dropbox homepage">dropbox</a>). You can also access the directory
by starting to type an email address and then hitting <kbd>Ctrl</kbd><kbd>t</kbd> to see
a list of possible completions.</p>

<h4>Notes</h4>

<ol>
<li><a href="http://www.christianschenk.org/blog/integrating-ldap-into-mutt/" title="Integrating LDAP into Mutt">Christian Schenk's post</a> got me started.</li>
<li>A <a href="https://bitbucket.org/jasonwryan/eeepc/src/f15bf6e51e62/Scripts/cowerd" title="Script in bitbucket repo">wrapper script for cower</a></li>
</ol>


<p>Creative Commons image <a href="http://www.flickr.com/photos/bertop/2530620838/">by bertop on Flickr</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving to Octopress]]></title>
    <link href="http://jasonwryan.github.com/blog/2012/03/30/octopress/"/>
    <updated>2012-03-30T12:30:00+13:00</updated>
    <id>http://jasonwryan.github.com/blog/2012/03/30/octopress</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://dl.dropbox.com/u/261312/Blog-images/octopress_logo.png" width="240" height="240" title="Octopress Logo" ></p>

<p>Over the last week I have been moving my blog over to <a href="http://octopress.org/">Octopress</a>,
a lightweight blogging framework for <a href="https://github.com/mojombo/jekyll">Jekyll</a>,
the static site generator powering <a href="http://pages.github.com/">Github Pages</a>. I had previously
been posting to a <a href="https://www.tumblr.com/">tumblr</a> page and, over the nearly four years that
I had been doing that I had somehow racked up just over 4000 posts. I was <em>not</em>
looking forward to migrating across.</p>

<p>However, the fact that the Jekyll project has a number of scripts for
<a href="https://github.com/mojombo/jekyll/wiki/blog-migrations">migrating from other platforms</a>
assuaged my concerns about the difficulty of this task. That sense of relief was shortlived.
Neither of the two tumblr migration scripts were of any assistance: both would die during their
initial runs, probably due to some funky characters in the post titles, or perhaps the posts themselves.</p>

<p>I certainly had no intention of trying to wade through the entire back catalogue identifying the
rogue posts. Rather that admit defeat, and probably more due to a sense of misguided optimism about the
“straightforward” nature of the task, I saw this setback as an opportunity to cull all of the
cruft<sup>1</sup> from the blog and decided to manually import the fifty posts that I thought were of
some interest.</p>

<p>Being an assiduous record keeper, all of the posts were helpfully bookmarked on
<a href="https://pinboard.in/u:jasonwryan/t:jwr/">Pinboard under one tag</a>, and therefore it was
simple enough to create a list of the required <acronym title="Unique Resource Locator">URLs</acronym>.
Armed with this list, it was just a matter of cobbling together a script to do the bulk of
the work for me.</p>

<p>The first task was to retrieve the posts from the list:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;grab files&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;while <span class="nb">read </span>url; <span class="k">do</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;wget --adjust-extension <span class="s2">&quot;${url}&quot;</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;done &amp;lt; /home/jason/Scripts/list
</span></code></pre></div></figure></notextile></div></p>

<p>Then I needed to remove all of the <acronym title="HyperText Markup Language">HTML</acronym>
surrounding the actual posts: an <code>awk</code> one-liner took care of that.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;strip HTML cruft&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;for file in &lt;em&gt;.html; <span class="k">do</span>
</span><span class='line'><span class="k">  </span>awk <span class="s1">&#39;/&lt;h3&gt;/ {flag=1;next} /&amp;lt;\/div&gt;/{flag=0} flag {print}&#39;</span> <span class="s2">&quot;$file&quot;</span> &gt; <span class="s2">&quot;${file%%.&lt;/em&gt;}&quot;</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>mkdir html &amp;amp;&amp;amp; mv *.html html/
</span></code></pre></div></figure></notextile></div></p>

<p>The final task of this part of the migration was to convert the HTML into
<a href="http://daringfireball.net/projects/markdown/">markdown</a>,
the format that Octopress uses. <a href="http://johnmacfarlane.net/pandoc/">Pandoc</a>
the "universal document converter" handled that job:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;convert to markdown format&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;for file in *; <span class="k">do</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;pandoc -f html -t markdown <span class="s2">&quot;$file&quot;</span> &amp;gt; <span class="s2">&quot;$file&quot;</span>.md
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;done
</span></code></pre></div></figure></notextile></div></p>

<p>The final result was fifty markdown files holding all of my posts, almost ready to
be committed to github. I say “almost” because the files still required what turned out to
be a reasonable amount of cleaning up. Pandoc did a great job, for example, but would
inexpicably break <a href="http://www.notareallink.com">multi word
hyperlinks</a> over two lines. Similarly all of the internal
links to my other posts pointed to the (meaningless) tumblr URLs<sup>2</sup>.</p>

<p>Setting up Octopress was extremely simple and quick by comparison: the
<a href="http://octopress.org/docs/">documentation is very helpful</a>. There was one slight
hitch, a <a href="https://github.com/tmm1/pygments.rb/issues/10">known issue on Arch x86_64</a>,
which was simple enough to deal with.</p>

<p>While the migration was not entirely pain-free, I am pleased that I have done it. Tumblr's service
increasingly <a href="https://twitter.com/#!/jasonwryan/statuses/176543962276954112">left a lot to be desired</a>
but as it was a free service, I couldn't complain too much. Or, more accurately, when I did complain,
no-one actually listened…</p>

<p>Indeed, moving to a paid service like Github
(yes, it's free at first, but once you have enough data there you need to pay a small amount
every month) <a href="http://blog.pinboard.in/2011/12/don_t_be_a_free_user/">makes a lot of sense</a>.
The paid services I do use, like <a href="http://pinboard.in/">Pinboard</a> and
<a href="http://www.tarsnap.com/">Tarsnap</a> are both inexpensive and much more
reliable than their free counterparts<sup>3</sup>; and you get to invest in great
software that is a pleasure to use.</p>

<h5>Notes</h5>

<ol>
<li>Initially, I had set up the site as a simple holding page and dumped a whole lot
of feeds into it: twitter, bookmarks, scrobbled music, etc. Those 4000 posts were
mostly just that sort of internet detritus…</li>
<li>For creating redirections (Github pages do <em>not</em> support <span class="file">.htaccess</span>)
I can't recommend enough the
<a href="https://github.com/rawsyntax/jekyll_alias_generator/blob/master/_plugins/alias_generator.rb">Jekyll Alias Generator</a>.
Just. Brilliant.</li>
<li>And <strong>much</strong> more scrupulous about how they use your personal data.</li>
</ol>

]]></content>
  </entry>
  
</feed>
