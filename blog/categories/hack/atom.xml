<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hack | jasonwryan.com]]></title>
  <link href="http://jasonwryan.github.com/blog/categories/hack/atom.xml" rel="self"/>
  <link href="http://jasonwryan.github.com/"/>
  <updated>2012-04-05T19:56:01+12:00</updated>
  <id>http://jasonwryan.github.com/</id>
  <author>
    <name><![CDATA[Jason Ryan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Moving to Octopress]]></title>
    <link href="http://jasonwryan.github.com/blog/2012/03/30/octopress/"/>
    <updated>2012-03-30T12:30:00+13:00</updated>
    <id>http://jasonwryan.github.com/blog/2012/03/30/octopress</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://dl.dropbox.com/u/261312/Blog-images/octopress_logo.png" width="240" height="240" title="Octopress Logo" ></p>

<p>Over the last week I have been moving my blog over to <a href="http://octopress.org/">Octopress</a>,
a lightweight blogging framework for <a href="https://github.com/mojombo/jekyll">Jekyll</a>,
the static site generator powering <a href="http://pages.github.com/">Github Pages</a>. I had previously
been posting to a <a href="https://www.tumblr.com/">tumblr</a> page and, over the nearly four years that
I had been doing that I had somehow racked up just over 4000 posts. I was <em>not</em>
looking forward to migrating across.</p>

<p>However, the fact that the Jekyll project has a number of scripts for
<a href="https://github.com/mojombo/jekyll/wiki/blog-migrations">migrating from other platforms</a>
assuaged my concerns about the difficulty of this task. That sense of relief was shortlived.
Neither of the two tumblr migration scripts were of any assistance: both would die during their
initial runs, probably due to some funky characters in the post titles, or perhaps the posts themselves.</p>

<p>I certainly had no intention of trying to wade through the entire back catalogue identifying the
rogue posts. Rather that admit defeat, and probably more due to a sense of misguided optimism about the
“straightforward” nature of the task, I saw this setback as an opportunity to cull all of the
cruft<sup>1</sup> from the blog and decided to manually import the fifty posts that I thought were of
some interest.</p>

<p>Being an assiduous record keeper, all of the posts were helpfully bookmarked on
<a href="https://pinboard.in/u:jasonwryan/t:jwr/">Pinboard under one tag</a>, and therefore it was
simple enough to create a list of the required <acronym title="Unique Resource Locator">URLs</acronym>.
Armed with this list, it was just a matter of cobbling together a script to do the bulk of
the work for me.</p>

<p>The first task was to retrieve the posts from the list:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;grab files&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;while <span class="nb">read </span>url; <span class="k">do</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;wget --adjust-extension <span class="s2">&quot;${url}&quot;</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;done &amp;lt; /home/jason/Scripts/list
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then I needed to remove all of the <acronym title="HyperText Markup Language">HTML</acronym>
surrounding the actual posts: an <code>awk</code> one-liner took care of that.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;strip HTML cruft&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;for file in &lt;em&gt;.html; <span class="k">do</span>
</span><span class='line'><span class="k">  </span>awk <span class="s1">&#39;/&lt;h3&gt;/ {flag=1;next} /&amp;lt;\/div&gt;/{flag=0} flag {print}&#39;</span> <span class="s2">&quot;$file&quot;</span> &gt; <span class="s2">&quot;${file%%.&lt;/em&gt;}&quot;</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>mkdir html &amp;amp;&amp;amp; mv *.html html/
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The final task of this part of the migration was to convert the HTML into
<a href="http://daringfireball.net/projects/markdown/">markdown</a>,
the format that Octopress uses. <a href="http://johnmacfarlane.net/pandoc/">Pandoc</a>
the "universal document converter" handled that job:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;convert to markdown format&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;for file in *; <span class="k">do</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;pandoc -f html -t markdown <span class="s2">&quot;$file&quot;</span> &amp;gt; <span class="s2">&quot;$file&quot;</span>.md
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;done
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The final result was fifty markdown files holding all of my posts, almost ready to
be committed to github. I say “almost” because the files still required what turned out to
be a reasonable amount of cleaning up. Pandoc did a great job, for example, but would
inexpicably break <a href="http://www.notareallink.com">multi word
hyperlinks</a> over two lines. Similarly all of the internal
links to my other posts pointed to the (meaningless) tumblr URLs<sup>2</sup>.</p>

<p>Setting up Octopress was extremely simple and quick by comparison: the
<a href="http://octopress.org/docs/">documentation is very helpful</a>. There was one slight
hitch, a <a href="https://github.com/tmm1/pygments.rb/issues/10">known issue on Arch x86_64</a>,
which was simple enough to deal with.</p>

<p>While the migration was not entirely pain-free, I am pleased that I have done it. Tumblr's service
increasingly <a href="https://twitter.com/#!/jasonwryan/statuses/176543962276954112">left a lot to be desired</a>
but as it was a free service, I couldn't complain too much. Or, more accurately, when I did complain,
no-one actually listened…</p>

<p>Indeed, moving to a paid service like Github
(yes, it's free at first, but once you have enough data there you need to pay a small amount
every month) <a href="http://blog.pinboard.in/2011/12/don_t_be_a_free_user/">makes a lot of sense</a>.
The paid services I do use, like <a href="http://pinboard.in/">Pinboard</a> and
<a href="http://www.tarsnap.com/">Tarsnap</a> are both inexpensive and much more
reliable than their free counterparts<sup>3</sup>; and you get to invest in great
software that is a pleasure to use.</p>

<h5>Notes</h5>

<ol>
<li>Initially, I had set up the site as a simple holding page and dumped a whole lot
of feeds into it: twitter, bookmarks, scrobbled music, etc. Those 4000 posts were
mostly just that sort of internet detritus…</li>
<li>For creating redirections (Github pages do <em>not</em> support <span class="file">.htaccess</span>)
I can't recommend enough the
<a href="https://github.com/rawsyntax/jekyll_alias_generator/blob/master/_plugins/alias_generator.rb">Jekyll Alias Generator</a>.
Just. Brilliant.</li>
<li>And <strong>much</strong> more scrupulous about how they use your personal data.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple aurphan notifier]]></title>
    <link href="http://jasonwryan.github.com/blog/2012/03/09/aurphan/"/>
    <updated>2012-03-09T16:52:00+13:00</updated>
    <id>http://jasonwryan.github.com/blog/2012/03/09/aurphan</id>
    <content type="html"><![CDATA[<p><img src="http://dl.dropbox.com/u/261312/Blog-images/aurphan.png" alt="image" /></p>

<p>If you are an Arch Linux user and you are not using
<a href="http://www.archlinux.org/packages/community/any/aurphan/" title="aurphan package details">aurphan</a>,
you can take a moment to hang your head in shame before you click on to
whatever the next thing is. The package description sums up perfectly
what aurphan does:</p>

<blockquote><p>Finds packages in need of maintainers, bug fixes and patches. Adopt
today!</p></blockquote>

<p>Running <code>aurphan -a</code>, for example, will identify any
<a href="https://aur.archlinux.org/" title="Arch User Repository">AUR packages</a> in your
database that are not currently maintained; allowing you to log in to
the AUR and hit the ‘Adopt’ button, leaving you feeling all worthy and
fulfilled.<sup>1</sup></p>

<p>If, like most Archers, you have a compulsive desire to automate
<em>everything</em> then clearly typing (or even remembering to type) <code>aurphan
-a</code> into a terminal periodically is as ludicrous as it is onerous. The
obvious answer is some shell script and a cron job.</p>

<p>First, the <code>cron</code> job:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>crontab -e
</span><span class='line'>@hourly aurphan -a &gt;/tmp/aurphans
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then, as part of my
<a href="https://bitbucket.org/jasonwryan/eeepc/src/241da582a0fd/Scripts/dwm-status" title="Script in mercurial repo">dwm-status script</a>,
a function to check that there are no new additions to the file and, if
there are, flash a highlight:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>aur<span class="o">(){</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;aurphans<span class="o">=</span><span class="s2">&quot;$(awk &#39;$0 !~ /^No /&#39; /tmp/aurphans | wc -l)&quot;</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$aurphans</span> -gt 0 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> -en <span class="s2">&quot;\x03*\x01&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The awk filter excludes a null return, which is “No aurphans found.”
Now, if any of the packages that I use from the AUR are disowned, I’ll
be the first to know about it.</p>

<h5>Notes</h5>

<ol>
<li>Actual feeling may differ depending on the package you have adopted
and the amount of prescription painkillers that you are currently
ingesting…</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IRC Notifications with dzen2]]></title>
    <link href="http://jasonwryan.github.com/blog/2011/11/07/irc-dzen/"/>
    <updated>2011-11-07T19:48:00+13:00</updated>
    <id>http://jasonwryan.github.com/blog/2011/11/07/irc-dzen</id>
    <content type="html"><![CDATA[<p><img src="http://dl.dropbox.com/u/261312/Blog-images/irc-dzen.png" alt="image" /></p>

<p>I have a persistent <a href="http://tmux.sourceforge.net/" title="tmux homepage">tmux</a>
session running on a server connected to IRC and I wanted to get
notifications whenever someone addressed me, irrespective of whether I
was connected to the session, or that particular machine at the time.</p>

<p>I use <a href="http://irssi.org/about" title="irssi homepage">irssi</a> as my IRC client,
and there is a script called
<a href="http://thorstenl.blogspot.com/2007/01/thls-irssi-notification-script.html" title="Blog post explaining fnotify">fnotify</a>
that will print any mentions in a channel to a file. I then configured
the fnotify script to write to a folder in Dropbox. Now, whenever I am
mentioned in freenode, the file is updated across all my machines.</p>

<p>The next challenge was to translate the updating of the fnotify file
into a notification on my current machine. As I don’t use
<a href="http://developer.gnome.org/libnotify/" title="libnotify reference manual">libnotify</a>
on my Arch machines, I wanted to make it work with
<a href="http://sites.google.com/site/gotmor/dzen" title="dzen homepage">dzen2</a><sup>1</sup>
Enter a simple shell script:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>highlights.sh </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/bin/sh&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;dir<span class="o">=</span><span class="s2">&quot;$HOME/Dropbox/irssi/&quot;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;while inotifywait -qqre attrib <span class="s2">&quot;$dir&quot;</span> &gt;/dev/null 2&gt;&amp;1; <span class="k">do</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;echo <span class="s2">&quot;IRC: You have been pinged...&quot;</span> | dzen2 -p 3
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;done
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I have included this in my <span class="file">$HOME/.xinitrc</span>
so that it runs in the background after login. Whenever the metadata
(the <code>attrib</code> switch) of the file changes, a dzen2 notification is
written to my
<a href="http://dwm.suckless.org" title="THE supreme window manager">dwm</a> statusbar
with the message.</p>

<p>Simple; but does what I need…</p>

<h5>Notes</h5>

<ol>
<li>Dropbox’s API won’t work with dzen2—or with other lightweight
notifications like
<a href="https://github.com/halhen/statnot" title="statnot on github">statnot</a>, so I
<a href="http://dropbox.zendesk.com/requests/336478" title="Closed Dropbox bug report">filed a bug report</a>
(that was closed without any progress)—hence my having to resort to a
home-cooked solution…</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tarsnap]]></title>
    <link href="http://jasonwryan.github.com/blog/2011/09/08/tarsnap/"/>
    <updated>2011-09-08T17:55:00+12:00</updated>
    <id>http://jasonwryan.github.com/blog/2011/09/08/tarsnap</id>
    <content type="html"><![CDATA[<p><img src="http://dl.dropbox.com/u/261312/Blog-images/tarsnap.jpg" alt="image" /></p>

<p>I have been using <a href="http://www.tarsnap.com/" title="Tarsnap homepage">Tarsnap</a>
for a couple of months now to backup
<a href="http://jasonwryan.com/blog/2010/10/04/the-setup/" title="My setup">my EeePC</a>.
Tarsnap’s (superb) tagline is: <code>online backups for the truly paranoid.</code></p>

<p>Essentially, Tarsnap stores your encrypted backups on
<a href="http://aws.amazon.com/s3//192-5766046-6455343/" title="Amazon page">Amazon’s S3 servers</a>,
recognizes duplicate data and avoids storing it again, and only deletes
data once no remaining archives require it. I can recommend it as a
terrific service for a number of reasons.</p>

<p>It is <em><a href="http://www.tarsnap.com/security.html" title="Security page">secure</a></em>.
Developed by the FreeBSD Security Officer, there is a
<a href="http://www.tarsnap.com/bugbounty.html" title="Bug bounty details">bug bounty</a> for
anyone who does discover bugs or security holes. It is very reasonably
priced. It is reliable. And most importantly,
<a href="http://www.tarsnap.com/about.html" title="Tarsnap about page">Dr Colin Percival</a>,
erstwhile child prodigy and developer, is extremely helpful either on
the mailing list or IRC if you have any questions or need help.</p>

<p>If, however, you have a quick look at the
<a href="http://www.tarsnap.com/man-tarsnap.1.html" title="tarsnap(1)">man page</a>, you will
see that it is not exactly a simple application. After a couple of
months of trying to remember all of the relevant flags, I searched for a
script that would simplify the process for me. There are
<a href="http://duckduckgo.com/?q=tarsnap+%2B+bash+script" title="DDG results">a few online</a>,
but they are all intended to fully automate the process (which makes
sense for something like backups)…</p>

<p>What I was looking for, however, was something more interactive: more
along the lines of a prompt. So, realizing I would have to scratch my
own itch, I wrote a wrapper script to assist my failing memory.</p>

<p>The script prints out a menu of the available options and, once you have
selected the activity that you would like (creating a new snapshot,
deleting an old one etc.,), then the script checks if any further input
is required, for example, the name of the snapshot to delete, and then
executes it. It is nothing flash, but it works…</p>

<p><img src="http://dl.dropbox.com/u/261312/Blog-images/tarsnap2.png" alt="image" /></p>

<p>You can <a href="https://bitbucket.org/jasonwryan/eeepc/src/241da582a0fd/Scripts/snap" title="Snap script in mercurial repo">grab the script</a>
from my mercurial repo. It’s written in bash, but if you require
<a href="http://tldp.org/LDP/abs/html/portabilityissues.html" title="Advanced Bash Scripting Guide">portability</a>,
it shouldn’t be too hard to tweak.</p>

<h4>Updated 3/10/11</h4>

<p>I have rewritten the script to be
<a href="http://pubs.opengroup.org/onlinepubs/9699919799/" title="POSIX Standard at the Open Group">POSIX compliant</a>
and also to better conform to basic UNIX behaviours, in terms of the
options etc. It should now be good to run in most shells.</p>

<h5>Notes</h5>

<p>Creative Commons licensed image by
<a href="http://www.flickr.com/photos/declanjewell/2447653142/" title="Flickr image credit">Declan TM</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Script to Edit Config Files]]></title>
    <link href="http://jasonwryan.github.com/blog/2011/07/19/script-to-edit-config-files/"/>
    <updated>2011-07-19T19:34:00+12:00</updated>
    <id>http://jasonwryan.github.com/blog/2011/07/19/script-to-edit-config-files</id>
    <content type="html"><![CDATA[<p><img src="http://dl.dropbox.com/u/261312/Blog-images/xdg-script.png" alt="image" /></p>

<p>Even with bash completion, endlessly typing and tabbing through the
directory tree to make a simple change to a config file quickly becomes
tedious, so I concocted this script to make it somewhat more
straightforward.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>xdg.sh </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/bin/bash&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;dir<span class="o">=</span><span class="nv">$XDG_CONFIG_HOME</span>/<span class="nv">$1</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -d <span class="s2">&quot;$dir&quot;</span> <span class="o">]</span>; <span class="k">then</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;for f in <span class="nv">$dir</span>/* ; <span class="k">do</span>
</span><span class='line'><span class="nv">file</span><span class="o">=</span><span class="k">${</span><span class="nv">f</span><span class="p">##*/</span><span class="k">}</span>
</span><span class='line'>    <span class="k">case</span> <span class="nv">$file</span> in
</span><span class='line'>    conf | config | *.cfg | *rc<span class="o">)</span>  <span class="nv">$EDITOR</span> <span class="s2">&quot;$f&quot;</span> ;;
</span><span class='line'>    *<span class="o">)</span>  :  ;;
</span><span class='line'>    <span class="k">esac</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;fi
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>A relatively simple script, with a nice feature or two, it does a couple
of things. First, it
<a href="http://wiki.bash-hackers.org/commands/classictest" title="Bash Hackers: test">tests</a>
that the directory actually exists:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;if <span class="o">[</span> -d <span class="s2">&quot;$dir&quot;</span> <span class="o">]</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>and then loops through all of the files in the directory using a
<a href="http://mywiki.wooledge.org/glob" title="Entry on Greg's Wiki">glob</a> and
checks for a pattern match.</p>

<p>In order for the
<a href="http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_07_03.html" title="Cases on Bash Guide">case statement</a>
to work, however, the directory path has to be stripped from the file
name.</p>

<p>Rather than run another process with
<a href="http://www.gnu.org/software/coreutils/manual/html_node/basename-invocation.html" title="GNU basename in coreutils">basename</a>,
I used
<a href="http://wiki.bash-hackers.org/syntax/pe#substring_removal" title="Bash Hackers Wiki">parameter expansion</a>
to remove the substring:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;file<span class="o">=</span><span class="k">${</span><span class="nv">f</span><span class="p">##*/</span><span class="k">}</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>which turns, for example, <span class="file">$XDG_CONGIG_HOME/newsbeuter/conf</span> into a
simple <span class="file">conf</span>. This can then be evaluated for a match with the file names
in the <code>case</code> statement and passed to the <code>$EDITOR</code>.</p>

<p>If no match is found, nothing (<code>:</code>) is done.</p>

<p>Now, it is simply a matter of entering <code>xdg vimprobable</code> and
<span class="file">$XDG_CONFIG_HOME/vimprobable/vimprobablerc</span> is opened in Vim.</p>

<h4>Updated 19/10/11</h4>

<p>After using this script for a while it became clear to me that it has a
significant drawback: too many applications place their config files in
directories other than <span class="file">$XDG_CONFIG_HOME</span>. So,
<a href="https://bbs.archlinux.org/viewtopic.php?id=128585" title="Post on the Arch boards">with some help</a>,
I updated the script. It now covers all of the directories where you are
likely to find dotfiles.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>xdg.sh v2 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/bin/bash&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;dirs<span class="o">=(</span><span class="nv">$HOME</span>/.<span class="nv">$1</span>* <span class="nv">$HOME</span>/.<span class="nv">$1</span>/ <span class="nv">$XDG_CONFIG_HOME</span>/<span class="nv">$1</span>/<span class="o">)</span>
</span><span class='line'><span class="nv">IFS</span><span class="o">=</span><span class="s1">$&#39;\n&#39;</span>
</span><span class='line'><span class="nb">read</span> -r -d <span class="s1">&#39;&#39;</span> -a files &amp;lt; <span class="se">\&lt;</span>/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;&amp;lt;<span class="o">(</span>find <span class="s2">&quot;${dirs[@]}&quot;</span> -type f <span class="se">\(</span> <span class="se">\</span>
</span><span class='line'>       -name <span class="s2">&quot;*.conf&quot;</span> <span class="se">\</span>
</span><span class='line'>    -o -name <span class="s2">&quot;conf&quot;</span> <span class="se">\</span>
</span><span class='line'>    -o -name <span class="s2">&quot;config&quot;</span> <span class="se">\</span>
</span><span class='line'>    -o -name <span class="s2">&quot;*rc&quot;</span> <span class="se">\</span>
</span><span class='line'>    -o -name <span class="s2">&quot;*.cfg&quot;</span> <span class="se">\)</span> 2&amp;gt;/dev/null<span class="o">)</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">((</span> <span class="k">${#</span><span class="nv">files</span><span class="p">[*]</span><span class="k">}</span> <span class="o">))</span> &amp;amp;&amp;amp; <span class="s2">&quot;$EDITOR&quot;</span> <span class="s2">&quot;${files}&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If you would prefer a more portable version—which still relies on GNU
find—then you could simplify it like so:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>xdg.sh v3 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/bin/sh&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;dirs<span class="o">=(</span><span class="nv">$HOME</span>/.<span class="nv">$1</span>* <span class="nv">$HOME</span>/.<span class="nv">$1</span>/ <span class="nv">$XDG_CONFIG_HOME</span>/<span class="nv">$1</span>/<span class="o">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;find <span class="s2">&quot;${dirs[@]}&quot;</span> -type f <span class="o">(</span> <span class="se">\&lt;</span>/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;   -name <span class="s2">&quot;*.conf&quot;</span> <span class="se">\</span>
</span><span class='line'>-o -name <span class="s2">&quot;conf&quot;</span> <span class="se">\</span>
</span><span class='line'>-o -name <span class="s2">&quot;config&quot;</span> <span class="se">\</span>
</span><span class='line'>-o -name <span class="s2">&quot;*rc&quot;</span> <span class="se">\</span>
</span><span class='line'>-o -name <span class="s2">&quot;*.cfg&quot;</span> <span class="se">\)</span> <span class="se">\</span>
</span><span class='line'>-exec <span class="s2">&quot;$EDITOR&quot;</span> <span class="o">{}</span> +
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
