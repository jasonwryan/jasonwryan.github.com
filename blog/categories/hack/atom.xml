<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hack | jasonwryan.com]]></title>
  <link href="http://jasonwryan.github.com/blog/categories/hack/atom.xml" rel="self"/>
  <link href="http://jasonwryan.github.com/"/>
  <updated>2012-03-29T12:28:13+13:00</updated>
  <id>http://jasonwryan.github.com/</id>
  <author>
    <name><![CDATA[Jason Ryan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Simple aurphan notifier]]></title>
    <link href="http://jasonwryan.github.com/blog/2012/03/09/aurphan/"/>
    <updated>2012-03-09T16:52:00+13:00</updated>
    <id>http://jasonwryan.github.com/blog/2012/03/09/aurphan</id>
    <content type="html"><![CDATA[<p><img src="http://dl.dropbox.com/u/261312/Blog-images/aurphan.png" alt="image" /></p>

<p>If you are an Arch Linux user and you are not using
<a href="http://www.archlinux.org/packages/community/any/aurphan/" title="aurphan package details">aurphan</a>,
you can take a moment to hang your head in shame before you click on to
whatever the next thing is. The package description sums up perfectly
what aurphan does:</p>

<blockquote><p>Finds packages in need of maintainers, bug fixes and patches. Adopt
today!</p></blockquote>

<p>Running <code>aurphan -a</code>, for example, will identify any
<a href="https://aur.archlinux.org/" title="Arch User Repository">AUR packages</a> in your
database that are not currently maintained; allowing you to log in to
the AUR and hit the ‘Adopt’ button, leaving you feeling all worthy and
fulfilled.<sup>1</sup></p>

<p>If, like most Archers, you have a compulsive desire to automate
<em>everything</em> then clearly typing (or even remembering to type) aurphan
-a into a terminal periodically is as ludicrous as it is onerous. The
obvious answer is some shell script and a cron job.</p>

<p>First, the <code>cron</code> job:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>crontab -e
</span><span class='line'>@hourly aurphan -a &gt;/tmp/aurphans
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then, as part of my
<a href="https://bitbucket.org/jasonwryan/eeepc/src/241da582a0fd/Scripts/dwm-status" title="Script in mercurial repo">dwm-status script</a>,
a function to check that there are no new additions to the file and, if
there are, flash a highlight:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>aur<span class="o">(){</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;aurphans<span class="o">=</span><span class="s2">&quot;$(awk &#39;$0 !~ /^No /&#39; /tmp/aurphans | wc -l)&quot;</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$aurphans</span> -gt 0 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> -en <span class="s2">&quot;\x03*\x01&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The awk filter excludes a null return, which is “No aurphans found.”
Now, if any of the packages that I use from the AUR are disowned, I’ll
be the first to know about it.</p>

<h5>Notes</h5>

<ol>
<li>Actual feeling may differ depending on the package you have adopted
and the amount of prescription painkillers that you are currently
ingesting…</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IRC Notifications with dzen2]]></title>
    <link href="http://jasonwryan.github.com/blog/2011/11/07/irc-dzen/"/>
    <updated>2011-11-07T19:48:00+13:00</updated>
    <id>http://jasonwryan.github.com/blog/2011/11/07/irc-dzen</id>
    <content type="html"><![CDATA[<p><img src="http://dl.dropbox.com/u/261312/Blog-images/irc-dzen.png" alt="image" /></p>

<p>I have a persistent <a href="http://tmux.sourceforge.net/" title="tmux homepage">tmux</a>
session running on a server connected to IRC and I wanted to get
notifications whenever someone addressed me, irrespective of whether I
was connected to the session, or that particular machine at the time.</p>

<p>I use <a href="http://irssi.org/about" title="irssi homepage">irssi</a> as my IRC client,
and there is a script called
<a href="http://thorstenl.blogspot.com/2007/01/thls-irssi-notification-script.html" title="Blog post explaining fnotify">fnotify</a>
that will print any mentions in a channel to a file. I then configured
the fnotify script to write to a folder in Dropbox. Now, whenever I am
mentioned in freenode, the file is updated across all my machines.</p>

<p>The next challenge was to translate the updating of the fnotify file
into a notification on my current machine. As I don’t use
<a href="http://developer.gnome.org/libnotify/" title="libnotify reference manual">libnotify</a>
on my Arch machines, I wanted to make it work with
<a href="http://sites.google.com/site/gotmor/dzen" title="dzen homepage">dzen2</a><sup>1</sup>
Enter a simple shell script:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>highlights.sh </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/bin/sh&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;dir<span class="o">=</span><span class="s2">&quot;$HOME/Dropbox/irssi/&quot;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;while inotifywait -qqre attrib <span class="s2">&quot;$dir&quot;</span> &gt;/dev/null 2&gt;&amp;1; <span class="k">do</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;echo <span class="s2">&quot;IRC: You have been pinged...&quot;</span> | dzen2 -p 3
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;done
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I have included this in my <span class="file">$HOME/.xinitrc</span>
so that it runs in the background after login. Whenever the metadata
(the <code>attrib</code> switch) of the file changes, a dzen2 notification is
written to my
<a href="http://dwm.suckless.org" title="THE supreme window manager">dwm</a> statusbar
with the message.</p>

<p>Simple; but does what I need…</p>

<h5>Notes</h5>

<ol>
<li>Dropbox’s API won’t work with dzen2—or with other lightweight
notifications like
<a href="https://github.com/halhen/statnot" title="statnot on github">statnot</a>, so I
<a href="http://dropbox.zendesk.com/requests/336478" title="Closed Dropbox bug report">filed a bug report</a>
(that was closed without any progress)—hence my having to resort to a
home-cooked solution…</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tarsnap]]></title>
    <link href="http://jasonwryan.github.com/blog/2011/09/08/tarsnap/"/>
    <updated>2011-09-08T17:55:00+12:00</updated>
    <id>http://jasonwryan.github.com/blog/2011/09/08/tarsnap</id>
    <content type="html"><![CDATA[<p><img src="http://dl.dropbox.com/u/261312/Blog-images/tarsnap.jpg" alt="image" /></p>

<p>I have been using <a href="http://www.tarsnap.com/" title="Tarsnap homepage">Tarsnap</a>
for a couple of months now to backup
<a href="http://jasonwryan.com/blog/2010/10/04/the-setup/" title="My setup">my EeePC</a>.
Tarsnap’s (superb) tagline is: <code>online backups for the truly paranoid.</code></p>

<p>Essentially, Tarsnap stores your encrypted backups on
<a href="http://aws.amazon.com/s3//192-5766046-6455343/" title="Amazon page">Amazon’s S3 servers</a>,
recognizes duplicate data and avoids storing it again, and only deletes
data once no remaining archives require it. I can recommend it as a
terrific service for a number of reasons.</p>

<p>It is <em><a href="http://www.tarsnap.com/security.html" title="Security page">secure</a></em>.
Developed by the FreeBSD Security Officer, there is a
<a href="http://www.tarsnap.com/bugbounty.html" title="Bug bounty details">bug bounty</a> for
anyone who does discover bugs or security holes. It is very reasonably
priced. It is reliable. And most importantly,
<a href="http://www.tarsnap.com/about.html" title="Tarsnap about page">Dr Colin Percival</a>,
erstwhile child prodigy and developer, is extremely helpful either on
the mailing list or IRC if you have any questions or need help.</p>

<p>If, however, you have a quick look at the
<a href="http://www.tarsnap.com/man-tarsnap.1.html" title="tarsnap(1)">man page</a>, you will
see that it is not exactly a simple application. After a couple of
months of trying to remember all of the relevant flags, I searched for a
script that would simplify the process for me. There are
<a href="http://duckduckgo.com/?q=tarsnap+%2B+bash+script" title="DDG results">a few online</a>,
but they are all intended to fully automate the process (which makes
sense for something like backups)…</p>

<p>What I was looking for, however, was something more interactive: more
along the lines of a prompt. So, realizing I would have to scratch my
own itch, I wrote a wrapper script to assist my failing memory.</p>

<p>The script prints out a menu of the available options and, once you have
selected the activity that you would like (creating a new snapshot,
deleting an old one etc.,), then the script checks if any further input
is required, for example, the name of the snapshot to delete, and then
executes it. It is nothing flash, but it works…</p>

<p><img src="http://dl.dropbox.com/u/261312/Blog-images/tarsnap2.png" alt="image" /></p>

<p>You can <a href="https://bitbucket.org/jasonwryan/eeepc/src/241da582a0fd/Scripts/snap" title="Snap script in mercurial repo">grab the script</a>
from my mercurial repo. It’s written in bash, but if you require
<a href="http://tldp.org/LDP/abs/html/portabilityissues.html" title="Advanced Bash Scripting Guide">portability</a>,
it shouldn’t be too hard to tweak.</p>

<h4>Updated 3/10/11</h4>

<p>I have rewritten the script to be
<a href="http://pubs.opengroup.org/onlinepubs/9699919799/" title="POSIX Standard at the Open Group">POSIX compliant</a>
and also to better conform to basic UNIX behaviours, in terms of the
options etc. It should now be good to run in most shells.</p>

<h5>Notes</h5>

<p>Creative Commons licensed image by
<a href="http://www.flickr.com/photos/declanjewell/2447653142/" title="Flickr image credit">Declan TM</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Script to Edit Config Files]]></title>
    <link href="http://jasonwryan.github.com/blog/2011/07/19/script-to-edit-config-files/"/>
    <updated>2011-07-19T19:34:00+12:00</updated>
    <id>http://jasonwryan.github.com/blog/2011/07/19/script-to-edit-config-files</id>
    <content type="html"><![CDATA[<p><img src="http://dl.dropbox.com/u/261312/Blog-images/xdg-script.png" alt="image" /></p>

<p>Even with bash completion, endlessly typing and tabbing through the
directory tree to make a simple change to a config file quickly becomes
tedious, so I concocted this script to make it somewhat more
straightforward.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>xdg.sh </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/bin/bash&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;dir<span class="o">=</span><span class="nv">$XDG_CONFIG_HOME</span>/<span class="nv">$1</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -d <span class="s2">&quot;$dir&quot;</span> <span class="o">]</span>; <span class="k">then</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;for f in <span class="nv">$dir</span>/* ; <span class="k">do</span>
</span><span class='line'><span class="nv">file</span><span class="o">=</span><span class="k">${</span><span class="nv">f</span><span class="p">##*/</span><span class="k">}</span>
</span><span class='line'>    <span class="k">case</span> <span class="nv">$file</span> in
</span><span class='line'>    conf | config | *.cfg | *rc<span class="o">)</span>  <span class="nv">$EDITOR</span> <span class="s2">&quot;$f&quot;</span> ;;
</span><span class='line'>    *<span class="o">)</span>  :  ;;
</span><span class='line'>    <span class="k">esac</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;fi
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>A relatively simple script, with a nice feature or two, it does a couple
of things. First, it
<a href="http://wiki.bash-hackers.org/commands/classictest" title="Bash Hackers: test">tests</a>
that the directory actually exists:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;if <span class="o">[</span> -d <span class="s2">&quot;$dir&quot;</span> <span class="o">]</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>and then loops through all of the files in the directory using a
<a href="http://mywiki.wooledge.org/glob" title="Entry on Greg's Wiki">glob</a> and
checks for a pattern match.</p>

<p>In order for the
<a href="http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_07_03.html" title="Cases on Bash Guide">case statement</a>
to work, however, the directory path has to be stripped from the file
name.</p>

<p>Rather than run another process with
<a href="http://www.gnu.org/software/coreutils/manual/html_node/basename-invocation.html" title="GNU basename in coreutils">basename</a>,
I used
<a href="http://wiki.bash-hackers.org/syntax/pe#substring_removal" title="Bash Hackers Wiki">parameter expansion</a>
to remove the substring:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;file<span class="o">=</span><span class="k">${</span><span class="nv">f</span><span class="p">##*/</span><span class="k">}</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>which turns, for example, <span class="file">$XDG_CONGIG_HOME/newsbeuter/conf</span> into a
simple conf. This can then be evaluated for a match with the file names
in the case statement and passed to the <code>$EDITOR</code>.</p>

<p>If no match is found, nothing (<code>:</code>) is done.</p>

<p>Now, it is simply a matter of entering <code>xdg vimprobable</code> and
<span class="file">$XDG_CONFIG_HOME/vimprobable/vimprobablerc</span> is opened in Vim.</p>

<h4>Updated 19/10/11</h4>

<p>After using this script for a while it became clear to me that it has a
significant drawback: too many applications place their config files in
directories other than <span class="file">$XDG_CONFIG_HOME</span>. So,
<a href="https://bbs.archlinux.org/viewtopic.php?id=128585" title="Post on the Arch boards">with some help</a>,
I updated the script. It now covers all of the directories where you are
likely to find dotfiles.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>xdg.sh v2 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/bin/bash&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;dirs<span class="o">=(</span><span class="nv">$HOME</span>/.<span class="nv">$1</span>* <span class="nv">$HOME</span>/.<span class="nv">$1</span>/ <span class="nv">$XDG_CONFIG_HOME</span>/<span class="nv">$1</span>/<span class="o">)</span>
</span><span class='line'><span class="nv">IFS</span><span class="o">=</span><span class="s1">$&#39;\n&#39;</span>
</span><span class='line'><span class="nb">read</span> -r -d <span class="s1">&#39;&#39;</span> -a files &amp;lt; <span class="se">\&lt;</span>/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;&amp;lt;<span class="o">(</span>find <span class="s2">&quot;${dirs[@]}&quot;</span> -type f <span class="se">\(</span> <span class="se">\</span>
</span><span class='line'>       -name <span class="s2">&quot;*.conf&quot;</span> <span class="se">\</span>
</span><span class='line'>    -o -name <span class="s2">&quot;conf&quot;</span> <span class="se">\</span>
</span><span class='line'>    -o -name <span class="s2">&quot;config&quot;</span> <span class="se">\</span>
</span><span class='line'>    -o -name <span class="s2">&quot;*rc&quot;</span> <span class="se">\</span>
</span><span class='line'>    -o -name <span class="s2">&quot;*.cfg&quot;</span> <span class="se">\)</span> 2&amp;gt;/dev/null<span class="o">)</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">((</span> <span class="k">${#</span><span class="nv">files</span><span class="p">[*]</span><span class="k">}</span> <span class="o">))</span> &amp;amp;&amp;amp; <span class="s2">&quot;$EDITOR&quot;</span> <span class="s2">&quot;${files}&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If you would prefer a more portable version—which still relies on GNU
find—then you could simplify it like so:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>xdg.sh v3 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/bin/sh&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;dirs<span class="o">=(</span><span class="nv">$HOME</span>/.<span class="nv">$1</span>* <span class="nv">$HOME</span>/.<span class="nv">$1</span>/ <span class="nv">$XDG_CONFIG_HOME</span>/<span class="nv">$1</span>/<span class="o">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;find <span class="s2">&quot;${dirs[@]}&quot;</span> -type f <span class="o">(</span> <span class="se">\&lt;</span>/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;   -name <span class="s2">&quot;*.conf&quot;</span> <span class="se">\</span>
</span><span class='line'>-o -name <span class="s2">&quot;conf&quot;</span> <span class="se">\</span>
</span><span class='line'>-o -name <span class="s2">&quot;config&quot;</span> <span class="se">\</span>
</span><span class='line'>-o -name <span class="s2">&quot;*rc&quot;</span> <span class="se">\</span>
</span><span class='line'>-o -name <span class="s2">&quot;*.cfg&quot;</span> <span class="se">\)</span> <span class="se">\</span>
</span><span class='line'>-exec <span class="s2">&quot;$EDITOR&quot;</span> <span class="o">{}</span> +
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Vimprobable]]></title>
    <link href="http://jasonwryan.github.com/blog/2011/06/26/using-vimprobable/"/>
    <updated>2011-06-26T14:08:00+12:00</updated>
    <id>http://jasonwryan.github.com/blog/2011/06/26/using-vimprobable</id>
    <content type="html"><![CDATA[<p><img src="http://dl.dropbox.com/u/261312/Blog-images/vimprobable2.png" alt="image" /></p>

<p>I <a href="http://jasonwryan.com/blog/2010/10/07/vimprobable/" title="Post on using Vimprobable">posted last year about Vimprobable</a>
a <a href="http://www.webkit.org/" title="Webkit site">webkit browser</a> that uses
Vim-like keybinds and can be run completely without the rodent.</p>

<p>Over the last couple of months I have become increasingly comfortable
with it, and with the addition of
<a href="http://vimprobable.org/pipermail/vimprobable-users/2011-June/000800.html" title="External handlers patch on ML">some great recent functionality</a>,
it has become my default browser.</p>

<p>The project has good documentation, in the form of two man pages:
<code>vimprobable</code> and <code>vimprobablerc</code>, but I thought I’d share some of my
customizations and working methods.</p>

<h3>Copy &amp; Paste</h3>

<p>The only time I have been tempted to take my hand off the keyboard was
to insert the cursor at the correct character to begin a selection to
copy and paste. This is unnecessary. With the right options in
<span class="file">$XDG_CONFIG_HOME/vimprobable/vimprobablerc</span>,
you can do it all from the keyboard.</p>

<p>Map the keys you would like to use to enter and exit caret mode. I use
<kbd>Ctrl</kbd><kbd>c</kbd> to enter and <kbd>Shift</kbd><kbd>c</kbd> to
return to normal mode:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>map &lt;C-c&gt;<span class="o">=</span>:set <span class="nv">caret</span><span class="o">=</span><span class="nb">true</span>
</span><span class='line'>map &lt;S-c&gt;<span class="o">=</span>:set <span class="nv">caret</span><span class="o">=</span><span class="nb">false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then, it is just a matter of identifying the text that you wish to copy
(in the photo above I was copying a script to launch <code>tabbed</code>), and
highlighting it via search. So the sequence is:</p>

<pre>
1.  <kbd>/</kbd> - to enter search mode
2.  <kbd>#</kbd><kbd>!</kbd> <kbd>Enter</kbd> - the shebang and then enter to highlight the correct
    sequence
3.  <kbd>Ctrl</kbd><kbd>c</kbd> to enter caret mode
4.  and then <kbd>Shift</kbd><kbd>Up</kbd> or <kbd>Shift</kbd><kbd>Down</kbd> to highlight the following or
    preceding lines
5.  yanking the selected text is <kbd>Shift</kbd><kbd>y</kbd>, and the text is now stored in
    your clipboard.
</pre>


<h3>Opening new instances in tabbed</h3>

<p>I highlighted the section on tabbed from the
<a href="http://www.vimprobable.org/" title="Vimprobable website">Vimprobable site</a> for a reason.
The second tip is how to set up
<a href="http://tools.suckless.org/tabbed" title="tabbed on suckless.org">tabbed</a> to
work well with other applications.</p>

<p>By default, any new windows (ie., instances of Vimprobable) opened from
within Vimprobable are “caught”—and managed— by <code>tabbed</code>. However, if you
open a link from, say
<a href="http://newsbeuter.org/" title="ncurses rss reader">newsbeuter</a> or
<a href="http://tyrs.nicosphere.net/index.html" title="ncurses twitter/identi.ca client">Tyrs</a>,
this will open an instance outside <code>tabbed</code> which, if you are using a
tiling window manager like
<a href="http://dwm.suckless.org/" title="THE titling wm">dwm</a>, means this window gets
pushed to master in your stack. This is not entirely satisfactory.</p>

<p>Thanks to
<a href="http://lists.suckless.org/dev/1106/8761.html" title="Tabbed thread on suckless ML">Connor Lane Smith on the suckless ML</a>,
I have a solution to have all new instances of Vimprobable sent to
<code>tabbed</code>, whether opened in another application, or if I click on a link
in my terminal, <a href="http://www.rxvt.org/" title="Rxvt. org">Urxvtc</a>.</p>

<p>CLS’s solution is elegantly simple. Launch tabbed with an <code>.xid</code> file in
<psan class="file">/tmp</span>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="s2">&quot;$(tabbed -d &gt;/tmp/tabbed.xid); vimprobable2 -e $(&amp;lt;/tmp/tabbed.xid)&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then it is just a matter of setting up other applications to pass links
to the <code>tabbed</code> <span class="file">tmp</span> file. For example, in my
<span class="file">$XDG_CONFIG_HOME/tyrs/tyrs.cfg</span>, I have:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">openurl_command</span> <span class="o">=</span> vimprobable2 -e <span class="k">$(</span>&amp;lt;/tmp/tabbed.xid<span class="k">)</span> %s
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The workaround for Urxvtc was a little trickier. I finally got there
with some help from
<a href="http://unix.stackexchange.com/questions/15550/passing-clicked-links-in-rxvt-to-a-script/15555#15555" title="Unix SE answer">Riccardo Murri on Unix &amp; Linux SE</a>.
In my <span class="file">~/.Xdefaults</span> I have:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>! -- Clickable urls -- !
</span><span class='line'>URxvt.perl-ext-common: default,matcher
</span><span class='line'>URxvt.urlLauncher: /home/jason/Scripts/vimprobtab.sh
</span><span class='line'>URxvt.matcher.button: 1
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>…and the wrapper script <span class="file">vimprobtab.sh</span> looks like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/bin/bash&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Script to open Vimprobable instances in tabbed&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;exec vimprobable2 -e <span class="k">$(</span>&amp;lt;/tmp/tabbed.xid<span class="k">)</span> <span class="s2">&quot;$1&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now whenever I open a link in an application or by clicking a link in
the terminal (in <a href="http://irssi.org/" title="IRC client">irssi</a>, for example)
it is passed to Vimprobable in <code>tabbed</code>.</p>
]]></content>
  </entry>
  
</feed>
