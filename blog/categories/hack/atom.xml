<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hack | jasonwryan.com]]></title>
  <link href="http://jasonwryan.github.com/blog/categories/hack/atom.xml" rel="self"/>
  <link href="http://jasonwryan.github.com/"/>
  <updated>2012-03-28T12:34:25+13:00</updated>
  <id>http://jasonwryan.github.com/</id>
  <author>
    <name><![CDATA[Jason Ryan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Script to Edit Config Files]]></title>
    <link href="http://jasonwryan.github.com/blog/2011/07/19/script-to-edit-config-files/"/>
    <updated>2011-07-19T19:34:00+12:00</updated>
    <id>http://jasonwryan.github.com/blog/2011/07/19/script-to-edit-config-files</id>
    <content type="html"><![CDATA[<p><img src="http://dl.dropbox.com/u/261312/Blog-images/xdg-script.png" alt="image" /></p>

<p>Even with bash completion, endlessly typing and tabbing through the
directory tree to make a simple change to a config file quickly becomes
tedious, so I concocted this script to make it somewhat more
straightforward.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>xdg.sh </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/bin/bash&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;dir<span class="o">=</span><span class="nv">$XDG_CONFIG_HOME</span>/<span class="nv">$1</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -d <span class="s2">&quot;$dir&quot;</span> <span class="o">]</span>; <span class="k">then</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;for f in <span class="nv">$dir</span>/* ; <span class="k">do</span>
</span><span class='line'><span class="nv">file</span><span class="o">=</span><span class="k">${</span><span class="nv">f</span><span class="p">##*/</span><span class="k">}</span>
</span><span class='line'>    <span class="k">case</span> <span class="nv">$file</span> in
</span><span class='line'>    conf | config | *.cfg | *rc<span class="o">)</span>  <span class="nv">$EDITOR</span> <span class="s2">&quot;$f&quot;</span> ;;
</span><span class='line'>    *<span class="o">)</span>  :  ;;
</span><span class='line'>    <span class="k">esac</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;fi
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>A relatively simple script, with a nice feature or two, it does a couple
of things. First, it
<a href="http://wiki.bash-hackers.org/commands/classictest" title="Bash Hackers: test">tests</a>
that the directory actually exists:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;if <span class="o">[</span> -d <span class="s2">&quot;$dir&quot;</span> <span class="o">]</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>and then loops through all of the files in the directory using a
<a href="http://mywiki.wooledge.org/glob" title="Entry on Greg's Wiki">glob</a> and
checks for a pattern match.</p>

<p>In order for the
<a href="http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_07_03.html" title="Cases on Bash Guide">case statement</a>
to work, however, the directory path has to be stripped from the file
name.</p>

<p>Rather than run another process with
<a href="http://www.gnu.org/software/coreutils/manual/html_node/basename-invocation.html" title="GNU basename in coreutils">basename</a>,
I used
<a href="http://wiki.bash-hackers.org/syntax/pe#substring_removal" title="Bash Hackers Wiki">parameter expansion</a>
to remove the substring:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;file<span class="o">=</span><span class="k">${</span><span class="nv">f</span><span class="p">##*/</span><span class="k">}</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>which turns, for example, <span class="file">$XDG_CONGIG_HOME/newsbeuter/conf</span> into a
simple conf. This can then be evaluated for a match with the file names
in the case statement and passed to the <code>$EDITOR</code>.</p>

<p>If no match is found, nothing (<code>:</code>) is done.</p>

<p>Now, it is simply a matter of entering <code>xdg vimprobable</code> and
<span class="file">$XDG_CONFIG_HOME/vimprobable/vimprobablerc</span> is opened in Vim.</p>

<h4>Updated 19/10/11</h4>

<p>After using this script for a while it became clear to me that it has a
significant drawback: too many applications place their config files in
directories other than <span class="file">$XDG_CONFIG_HOME</span>. So,
<a href="https://bbs.archlinux.org/viewtopic.php?id=128585" title="Post on the Arch boards">with some help</a>,
I updated the script. It now covers all of the directories where you are
likely to find dotfiles.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>xdg.sh v2 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/bin/bash&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;dirs<span class="o">=(</span><span class="nv">$HOME</span>/.<span class="nv">$1</span>* <span class="nv">$HOME</span>/.<span class="nv">$1</span>/ <span class="nv">$XDG_CONFIG_HOME</span>/<span class="nv">$1</span>/<span class="o">)</span>
</span><span class='line'><span class="nv">IFS</span><span class="o">=</span><span class="s1">$&#39;\n&#39;</span>
</span><span class='line'><span class="nb">read</span> -r -d <span class="s1">&#39;&#39;</span> -a files &amp;lt; <span class="se">\&lt;</span>/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;&amp;lt;<span class="o">(</span>find <span class="s2">&quot;${dirs[@]}&quot;</span> -type f <span class="se">\(</span> <span class="se">\</span>
</span><span class='line'>       -name <span class="s2">&quot;*.conf&quot;</span> <span class="se">\</span>
</span><span class='line'>    -o -name <span class="s2">&quot;conf&quot;</span> <span class="se">\</span>
</span><span class='line'>    -o -name <span class="s2">&quot;config&quot;</span> <span class="se">\</span>
</span><span class='line'>    -o -name <span class="s2">&quot;*rc&quot;</span> <span class="se">\</span>
</span><span class='line'>    -o -name <span class="s2">&quot;*.cfg&quot;</span> <span class="se">\)</span> 2&amp;gt;/dev/null<span class="o">)</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">((</span> <span class="k">${#</span><span class="nv">files</span><span class="p">[*]</span><span class="k">}</span> <span class="o">))</span> &amp;amp;&amp;amp; <span class="s2">&quot;$EDITOR&quot;</span> <span class="s2">&quot;${files}&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If you would prefer a more portable version—which still relies on GNU
find—then you could simplify it like so:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>xdg.sh v3 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/bin/sh&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;dirs<span class="o">=(</span><span class="nv">$HOME</span>/.<span class="nv">$1</span>* <span class="nv">$HOME</span>/.<span class="nv">$1</span>/ <span class="nv">$XDG_CONFIG_HOME</span>/<span class="nv">$1</span>/<span class="o">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;find <span class="s2">&quot;${dirs[@]}&quot;</span> -type f <span class="o">(</span> <span class="se">\&lt;</span>/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;   -name <span class="s2">&quot;*.conf&quot;</span> <span class="se">\</span>
</span><span class='line'>-o -name <span class="s2">&quot;conf&quot;</span> <span class="se">\</span>
</span><span class='line'>-o -name <span class="s2">&quot;config&quot;</span> <span class="se">\</span>
</span><span class='line'>-o -name <span class="s2">&quot;*rc&quot;</span> <span class="se">\</span>
</span><span class='line'>-o -name <span class="s2">&quot;*.cfg&quot;</span> <span class="se">\)</span> <span class="se">\</span>
</span><span class='line'>-exec <span class="s2">&quot;$EDITOR&quot;</span> <span class="o">{}</span> +
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Vimprobable]]></title>
    <link href="http://jasonwryan.github.com/blog/2011/06/26/using-vimprobable/"/>
    <updated>2011-06-26T14:08:00+12:00</updated>
    <id>http://jasonwryan.github.com/blog/2011/06/26/using-vimprobable</id>
    <content type="html"><![CDATA[<p><img src="http://dl.dropbox.com/u/261312/Blog-images/vimprobable2.png" alt="image" /></p>

<p>I <a href="http://jasonwryan.com/2010-10-07-vimprobable" title="Post on using Vimprobable">posted last year about Vimprobable</a>
a <a href="http://www.webkit.org/" title="Webkit site">webkit browser</a> that uses
Vim-like keybinds and can be run completely without the rodent.</p>

<p>Over the last couple of months I have become increasingly comfortable
with it, and with the addition of
<a href="http://vimprobable.org/pipermail/vimprobable-users/2011-June/000800.html" title="External handlers patch on ML">some great recent functionality</a>,
it has become my default browser.</p>

<p>The project has good documentation, in the form of two man pages:
<code>vimprobable</code> and <code>vimprobablerc</code>, but I thought I’d share some of my
customizations and working methods.</p>

<h3>Copy &amp; Paste</h3>

<p>The only time I have been tempted to take my hand off the keyboard was
to insert the cursor at the correct character to begin a selection to
copy and paste. This is unnecessary. With the right options in
<span class="file">$XDG_CONFIG_HOME/vimprobable/vimprobablerc</span>,
you can do it all from the keyboard.</p>

<p>Map the keys you would like to use to enter and exit caret mode. I use
<kbd>Ctrl</kbd><kbd>c</kbd> to enter and <kbd>Shift</kbd><kbd>c</kbd> to
return to normal mode:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>map &lt;C-c&gt;<span class="o">=</span>:set <span class="nv">caret</span><span class="o">=</span><span class="nb">true</span>
</span><span class='line'>map &lt;S-c&gt;<span class="o">=</span>:set <span class="nv">caret</span><span class="o">=</span><span class="nb">false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then, it is just a matter of identifying the text that you wish to copy
(in the photo above I was copying a script to launch <code>tabbed</code>), and
highlighting it via search. So the sequence is:</p>

<pre>
1.  <kbd>/</kbd> - to enter search mode
2.  <kbd>#</kbd><kbd>!</kbd> <kbd>Enter</kbd> - the shebang and then enter to highlight the correct
    sequence
3.  <kbd>Ctrl</kbd><kbd>c</kbd> to enter caret mode
4.  and then <kbd>Shift</kbd><kbd>Up</kbd> or <kbd>Shift</kbd><kbd>Down</kbd> to highlight the following or
    preceding lines
5.  yanking the selected text is <kbd>Shift</kbd><kbd>y</kbd>, and the text is now stored in
    your clipboard.
</pre>


<h3>Opening new instances in tabbed</h3>

<p>I highlighted the section on tabbed from the
<a href="http://www.vimprobable.org/" title="Vimprobable website">Vimprobable site</a> for a reason.
The second tip is how to set up
<a href="http://tools.suckless.org/tabbed" title="tabbed on suckless.org">tabbed</a> to
work well with other applications.</p>

<p>By default, any new windows (ie., instances of Vimprobable) opened from
within Vimprobable are “caught”—and managed— by <code>tabbed</code>. However, if you
open a link from, say
<a href="http://newsbeuter.org/" title="ncurses rss reader">newsbeuter</a> or
<a href="http://tyrs.nicosphere.net/index.html" title="ncurses twitter/identi.ca client">Tyrs</a>,
this will open an instance outside <code>tabbed</code> which, if you are using a
tiling window manager like
<a href="http://dwm.suckless.org/" title="THE titling wm">dwm</a>, means this window gets
pushed to master in your stack. This is not entirely satisfactory.</p>

<p>Thanks to
<a href="http://lists.suckless.org/dev/1106/8761.html" title="Tabbed thread on suckless ML">Connor Lane Smith on the suckless ML</a>,
I have a solution to have all new instances of Vimprobable sent to
<code>tabbed</code>, whether opened in another application, or if I click on a link
in my terminal, <a href="http://www.rxvt.org/" title="Rxvt. org">Urxvtc</a>.</p>

<p>CLS’s solution is elegantly simple. Launch tabbed with an <code>.xid</code> file in
<psan class="file">/tmp</span>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="s2">&quot;$(tabbed -d &gt;/tmp/tabbed.xid); vimprobable2 -e $(&amp;lt;/tmp/tabbed.xid)&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then it is just a matter of setting up other applications to pass links
to the <code>tabbed</code> <span class="file">tmp</span> file. For example, in my
<span class="file">$XDG_CONFIG_HOME/tyrs/tyrs.cfg</span>, I have:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">openurl_command</span> <span class="o">=</span> vimprobable2 -e <span class="k">$(</span>&amp;lt;/tmp/tabbed.xid<span class="k">)</span> %s
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The workaround for Urxvtc was a little trickier. I finally got there
with some help from
<a href="http://unix.stackexchange.com/questions/15550/passing-clicked-links-in-rxvt-to-a-script/15555#15555" title="Unix SE answer">Riccardo Murri on Unix &amp; Linux SE</a>.
In my <span class="file">~/.Xdefaults</span> I have:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>! -- Clickable urls -- !
</span><span class='line'>URxvt.perl-ext-common: default,matcher
</span><span class='line'>URxvt.urlLauncher: /home/jason/Scripts/vimprobtab.sh
</span><span class='line'>URxvt.matcher.button: 1
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>…and the wrapper script <span class="file">vimprobtab.sh</span> looks like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/bin/bash&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Script to open Vimprobable instances in tabbed&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;exec vimprobable2 -e <span class="k">$(</span>&amp;lt;/tmp/tabbed.xid<span class="k">)</span> <span class="s2">&quot;$1&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now whenever I open a link in an application or by clicking a link in
the terminal (in <a href="http://irssi.org/" title="IRC client">irssi</a>, for example)
it is passed to Vimprobable in <code>tabbed</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting tmux statusbar if in X]]></title>
    <link href="http://jasonwryan.github.com/blog/2011/06/10/setting-tmux-statusbar-if-in-x/"/>
    <updated>2011-06-10T22:56:00+12:00</updated>
    <id>http://jasonwryan.github.com/blog/2011/06/10/setting-tmux-statusbar-if-in-x</id>
    <content type="html"><![CDATA[<p><a href="http://www.flickr.com/photos/jasonwryan/5636783883/" title="Arch Linux: dwm, tmux &amp; scratchpad by jasonwryan, on Flickr"><img src="http://farm6.static.flickr.com/5303/5636783883_5b7272453b.jpg" alt="Arch Linux: dwm, tmux &amp; scratchpad" /></a></p>

<p>I have been posting quite a bit about
<a href="http://tmux.sourceforge.net/" title="tmux homepage">tmux</a> of late<sup>1</sup>.
It is a marvellous application and lends itself to all sorts of interesting
uses. When you first install it, you will find a number of user config
files in <span class="file">/usr/share/tmux/</span>. I started with tmux by copying
<a href="http://cinderwick.ca/" title="Thayer Williams' site">Thayer’s</a> config across
and then working up from there. There is a section
<a href="http://tmux.svn.sourceforge.net/viewvc/tmux/trunk/examples/t-williams.conf?revision=1833&amp;view=markup" title="Thayer's conf in SVN">at the bottom of this file</a>
that has always puzzled me, and so I decided to get to the bottom of it.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;show some useful stats but only when tmux is started&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;outside of Xorg, otherwise dwm statusbar shows these already&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It is a great idea. If you are running tmux in X, then you have
<a href="http://dwm.suckless.org/" title="dwm homepage">dwm’s</a> status bar telling you
what the time is,
<a href="http://beta.intuxication.org/jasonwryan/archer/file/tip/Scripts/dwm-status" title="dwm status bar in my mercurial repo">how much battery you have left</a>
etc,. You don’t need to replicate that functionality in tmux. If,
however, you are in the console, you don’t have that information, unless
you print it in tmux’s statusbar.</p>

<p>I had tried to get this to work once or twice over the last couple of
years, but never persevered with it. However, as I have been doing a bit
of work making the console as functional as possible<sup>2</sup>, I thought I
would revisit it.</p>

<p><img src="http://dl.dropbox.com/u/261312/Blog-images/tmux-status1.png" alt="image" /></p>

<p>The insight that I had that got it working for me was to use the
source-file option in <span class="file">.tmux.conf</span> to call the relevant statusbar,
depending if X was running or not. I just adapted Thayer’s code, like
so:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Statusbar starting in X or not&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;if <span class="s1">&#39;[ -n &quot;$DISPLAY&quot; ]&#39;</span> <span class="s1">&#39;source-file ~/.tmux/inx&#39;</span>
</span><span class='line'><span class="k">if</span> <span class="s1">&#39;[ -z &quot;$DISPLAY&quot; ]&#39;</span> <span class="s1">&#39;source-file ~/.tmux/xless&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And then created those files with the desired statusbar options. So, for
example, if I am running tmux in the console, <span class="file">$HOME/.tmux/xless</span> is
loaded:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Statusbar <span class="k">if </span>tmux run in console&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;information normally in dwm bar&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;set -g status-right-length 50
</span><span class='line'><span class="nb">set</span> -g status-left-length 50
</span><span class='line'><span class="nb">set</span> -g status-left <span class="err">&quot;</span><span class="c">#[fg=green] #H #[default] …blah, blah, blah…</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Which prints a statusbar with the time and battery left on my laptop<sup>3</sup>:</p>

<p><img src="http://dl.dropbox.com/u/261312/Blog-images/tmux-status2.png" alt="image" /></p>

<p>All the relevant files are in
<a href="http://beta.intuxication.org/jasonwryan/archer/browse/tip/.tmux" title="My intuxication repository">my mercurial repo</a>.</p>

<h5>Notes</h5>

<ol>
<li><p><a href="http://jasonwryan.com/2011-06-07-copy-and-paste-in-tmux" title="Post on copy &amp; paste in tmux">Copy &amp; paste in tmux</a>,
<a href="http://jasonwryan.com/2010-10-03-sessions-in-tmux" title="Sessions in tmux">Sessions in tmux</a>
&amp; <a href="http://jasonwryan.com/2010-01-07-tmux-terminal-multiplexer" title="Intro to tmux">Introduction to tmux</a></p></li>
<li><p><a href="http://jasonwryan.com/2011-04-06-vim-colours-in-the-console" title="Setting Vim colours in the console">Vim colours in the console</a></p></li>
<li><p>Image squashed to fit the requirements of this blog…</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[w3m, Surfraw and Yanking URLs]]></title>
    <link href="http://jasonwryan.github.com/blog/2011/05/05/w3m/"/>
    <updated>2011-05-05T19:57:00+12:00</updated>
    <id>http://jasonwryan.github.com/blog/2011/05/05/w3m</id>
    <content type="html"><![CDATA[<p><img src="http://dl.dropbox.com/u/261312/Blog-images/w3m.png" alt="image" /></p>

<p>I posted a couple of weeks ago about
<a href="http://jasonwryan.com/2011-04-13-archwiki-elvis-for-surfraw" title="My post on the Arch Wiki elvis">how much I was enjoying Surfraw</a>,
to the point of writing a couple of my own <em>elvi</em>. As part of the
ongoing tweaking of my Surfraw experience, I have been experimenting
with different
<a href="http://en.wikipedia.org/wiki/Text-based_web_browser" title="Wikipedia entry: text browsers">text-based browsers</a>,
to see which one best fits my workflow.</p>

<p>I have previously been using both
<a href="http://www.jikos.cz/~mikulas/links/" title="Links homepage (Spartan enough for you?)">links</a>
and it’s homonym,
<a href="http://lynx.browser.org/" title="See you, and raise you...">lynx</a>. While
these have been perfectly acceptable, they weren’t quite providing the
level of functionality —and integration with my vim-oriented workflow—
that I was looking for. Enter
<a href="http://w3m.sourceforge.net/" title="Lavish, by comparison...">w3m</a>.</p>

<blockquote><p>w3m is a text-based web browser as well as a pager like `more’ or
`less’. With w3m you can browse web pages through a terminal emulator
window (xterm, rxvt or something like that). Moreover, w3m can be used
as a text formatting tool which typesets HTML into plain text.</p></blockquote>

<p>w3m is a step up from the other two for a variety of reasons. It
supports tables, frames, SSL connections, color and inline images. It
also renders pages in a form as true to their original layout as
possible. The killer features on top of that are, for me, the above
mentioned rendering of HTML as text (meaning you can save content
easily), and the customizable keybinds.</p>

<p>There was however, one significant sticking point. After countless hours
fruitlessly searching, I was unable to find a way to yank URLs to the
clipboard. As I have been spending a little time of late on
<a href="http://unix.stackexchange.com/" title="Unix &amp; Linux Stack Exchange">Unix &amp; Linux Stack Exchange</a>,
I thought I would ask the good folk there…</p>

<p>Less than fourty hours later, I had an answer so simple and elegant,
that I was literally grinning when I read it. It deserves quoting in
full. It is that ingenious.</p>

<blockquote><p>Set the “External Browser” option to
<code>sh -c 'echo "$0" | xsel'</code></p>

<p>You can use xsel -b to use the clipboard instead of the primary
selection. An alternative to
<a href="http://www.vergenet.net/~conrad/software/xsel/" title="xsel homepage">xsel</a>
is <a href="http://sourceforge.net/projects/xclip/" title="xclip homepage">xclip</a>
(xclip for the primary selection, xclip -selection CLIPBOARD for the
clipboard).</p>

<p>In <span class="file">~/.w3m/config</span>, that’s the extbrowser setting.
Then press M to copy (yank) the URL of the current page, or ESCM to
copy the URL of the link under the cursor.</p>

<p>You can use the second or third external browser for that instead;
then the key combination is 2M or 3M or 2ESCM or 3ESCM.
<a href="http://unix.stackexchange.com/questions/12497/yanking-urls-in-w3m/12572#12572" title="THE answer">Gilles on Unix &amp; Linux Stack Exchange</a></p></blockquote>

<p>This simple hack means that it is now trivial to yank either the URL of
the current page, or of the link under the cursor to primary selection.
It was just a matter then of adding some intuitive keybinds – as the <kbd>M</kbd>
and <kbd>Escape</kbd><kbd>M</kbd> combination are redolent of
<a href="http://en.wikipedia.org/wiki/Editor_war" title="Emacs vs Vi">the unamed editor</a>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="nb">keymap</span> <span class="k">y</span> EXTERN    <span class="p">&lt;</span><span class="k">br</span>/<span class="p">&gt;</span>
</span><span class='line'><span class="nb">keymap</span> Y EXTERN_LINK
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The perfect <a href="http://en.wikipedia.org/wiki/Unix_philosophy" title="The UNIX philosophy on Wikipedia">UNIX solution</a>…</p>

<h4>Updated 8/5/11</h4>

<p>Gilles has edited and updated his answer with a slight change:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sh -c <span class="s1">&#39;printf %s &quot;$0&quot; | xsel&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This prevents a new line being appended.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sessions in tmux]]></title>
    <link href="http://jasonwryan.github.com/blog/2010/10/03/sessions-in-tmux/"/>
    <updated>2010-10-03T20:15:00+13:00</updated>
    <id>http://jasonwryan.github.com/blog/2010/10/03/sessions-in-tmux</id>
    <content type="html"><![CDATA[<p><a href="http://www.flickr.com/photos/jasonwryan/5046091307/" title="Sessions in tmux by jasonwryan, on Flickr" target="_blank"><img src="http://farm5.static.flickr.com/4146/5046091307_39c200f1b0.jpg" width="500" height="293" alt="Sessions in tmux"/></a></p>

<p>Now that I have been using it for several months, I have become absolutely dependent upon <a href="http://tmux.sourceforge.net/" target="_blank">tmux</a>, the terminal multiplexer.
It is both ruthlessly efficient, and can be configured to match exacting requirements. One of those options is to initialize sessions with a preloaded window configuration. After reading the <a href="http://wisconsinlinux.org/tmux-manpage-from-cvs/tmux.1.txt" target="_blank">man page</a> (which, truth be told, could be a little clearer) and some experimentation, I have worked out how to set up my tmux sessions how I want them.
I have just updated the <a href="http://wiki.archlinux.org/index.php/Tmux">Arch Wiki tmux entry</a>,
so thought I would share it here.</p>

<p>The relevant part of my config file looks like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;session initialization&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;new  -n TTYtter /home/jason/Scripts/ttytter.pl
</span><span class='line'>neww -n irssi /home/jason/Scripts/startirssi.sh
</span><span class='line'>neww -n ncmpcpp/vifm ncmpcpp
</span><span class='line'>splitw -v -p 50 -t 0 vifm
</span><span class='line'>neww -n bash bash
</span><span class='line'>selectw -t 1
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Which, when I start tmux with the attach (or a) option, gives me the following window layout:</p>

<ul>
<li>TTYtter</li>
<li>irssi</li>
<li>ncmpcpp/vifm &nbsp; &nbsp; # window split vertically in half, ncmpcpp on top of vifm</li>
<li>bash</li>
</ul>


<p>The <code>selectw</code> option means that the default view is TTYtter.</p>

<p>Simple.</p>
]]></content>
  </entry>
  
</feed>
