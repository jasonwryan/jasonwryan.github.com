<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: browser | jasonwryan.com]]></title>
  <link href="http://jasonwryan.github.com/blog/categories/browser/atom.xml" rel="self"/>
  <link href="http://jasonwryan.github.com/"/>
  <updated>2013-06-22T17:25:39+12:00</updated>
  <id>http://jasonwryan.github.com/</id>
  <author>
    <name><![CDATA[Jason Ryan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Replacing Google Reader]]></title>
    <link href="http://jasonwryan.github.com/blog/2013/05/25/greader/"/>
    <updated>2013-05-25T09:10:00+12:00</updated>
    <id>http://jasonwryan.github.com/blog/2013/05/25/greader</id>
    <content type="html"><![CDATA[<p>{% img left http://dl.dropbox.com/u/261312/Blog-images/commafeed.png 'CommaFeed Logo' %}
I have been using <a href="https://en.wikipedia.org/wiki/Google_reader" title="Wikipedi page">Google Reader</a>
everyday since I first discovered the service over seven years ago. It is my
primary source of news and information and the announcement that Google is, on July 1 this year,
set to <a href="http://googlereader.blogspot.ca/2013/03/powering-down-google-reader.html" title="Official announcemet on Google Blog">shut down Reader</a>
was something considerably more than just an inconvenience for me.</p>

<p>Over the years, I had looked at other <acronym title="Rich Site Summary">RSS</acronym>
readers but, for a variety of reasons, had invariably found that the speed,
simplicity and flexibility that Google Reader offered meant that any dalliances
were unsatisfactory and short-lived. I resigned myself to having to settle for
an inferior alternative, rather than moving to a genuine replacement.</p>

<p>On the recommendation of <a href="https://pinboard.in/" title="Not so-social bookmarking">@pinboard</a>,
I first signed up for a premium account at
<a href="https://www.newsblur.com/" title="NewsBlur website">NewsBlur</a>. It is open source and,
given the recommendation from Maciej<sup>1</sup>, I was hopeful that it would
bridge the gap. Newsblur is a good service (especially considering the rush of
signups in the days after the Google announcement), but it has a couple of
critical weaknesses for me: no search (yes, you read that correctly—there is <em>no
way to search through your feeds</em>) and, less importantly but just as annoying,
occasionally sluggish performance.</p>

<p>After a couple of weeks using NewBlur I happily stumbled across
<a href="https://www.commafeed.com/" title="CommaFeed homepage">CommaFeed</a>, a
Reader clone that emulates the austere minimalism of Google Reader. Apart from
the fact that it is open source, the other aspect that attracted me to it
was the ability to run it on Red Hat's Platform as a Service offering,
<a href="http://www.openshift.com/" title="Red Hat PaaS">OpenShift</a>.</p>

<p>The README on the <a href="https://github.com/Athou/commafeed" title="CommaFeed repo">Github repo</a>
explains how to set it all up. Unfortunately, due to an
<a href="https://github.com/Athou/commafeed/issues/91" title="OpenShift fails silently">open issue</a>,
some manual intervention is required, but it is still a very
straightforward and painless process to get your own instance of CommaFeed up
and running.</p>

<p>Creat an OpenShift account, log in and add the JBoss 6.0 application (or
cartridge as it is called on OpenShift) and the MySQL cartridge. Once your setup
is created, add your public <acronym title="Secure Shell">SSH</acronym> key and,
under your <code>My Applications</code> tab, copy down your Git repo address, which will be
of the form:</p>

<p>{% codeblock lang:sh %}
ssh://76758382475ef809976543@$appname-$namespace.rhcloud.com/~/git/feeds.git/
{% endcodeblock %}</p>

<p>Then you need to make a local clone of CommaFeed and push it to the Red Hat
server:</p>

<p>{% codeblock lang:sh %}
git clone https://github.com/Athou/commafeed.git
cd commafeed</p>

<h1>add OpenShift as a repo</h1>

<p>git remote add openshift -f ssh://76758382475ef809976543@$appname-$namespace.etc…
git merge openshift/master -s recursive -X ours
git push openshift master
{% endcodeblock %}</p>

<p>This will then trigger a series of hooks that build the application and restart
the server. If everything goes well you will see something like:</p>

<p>{% codeblock lang:sh %}
remote: [INFO] ------------------------------------------------------------------------
remote: [INFO] BUILD SUCCESS
remote: [INFO] ------------------------------------------------------------------------
remote: [INFO] Total time: 3:18.195s
remote: [INFO] Finished at: Mon May 20 03:21:37 EDT 2013
remote: [INFO] Final Memory: 42M/185M
remote: [INFO] ------------------------------------------------------------------------
remote: Running .openshift/action_hooks/build
remote: Running .openshift/action_hooks/deploy
remote: hot_deploy_added=false
remote: MySQL already running
remote: Found 127.12.712.712:8080 listening port
remote: Done
remote: Running .openshift/action_hooks/post_deploy
To ssh://76758382475ef809976543@$appname-$namespace.rhcloud.com/~/git/feeds.git/
{% endcodeblock %}</p>

<p>You now have CommaFeed successfully running on OpenShift. After a couple of
minutes, visit the public <acronym title="Unique Resource Locator">URL</acronym>
and you will be able to login to your CommaFeed instance. Updating your
CommaFeed is as simple as pulling to your local repo, merging and
then pushing to <code>openshift master</code>.</p>

<p>Importing directly from Google Reader still seems broken (I was  getting
errors from builds late this week), but if you import from an existing <code>.opml</code>
or <code>.xml</code> file you will see CommaFeed in all it's glory:</p>

<p>{% img left http://dl.dropbox.com/u/261312/Blog-images/commafeed_screen.png 'ComaFeed screenshot' %}</p>

<p>As you can see, it is remarkably similar to the Google Reader interface; a
clean, minimalist design that is focussed—quite rightly—on the content. There
is an option to load your own <code>.css</code> if you want to apply some additional
styling, but for me the base style is just about perfect.</p>

<p>More impressively, in the week or so that I have been using CommaFeed, the
developer,
<a href="https://github.com/Athou" title="Athou on Github">Athou</a>, has been committing
enhancements and bug fixes several times <em>a day</em>; almost every night,
I have pushed changes to OpenShift, reloaded my browser and found a
smoother, enhanced feed reader with additional functionality; it is
literally growing in leaps and bounds, and is a great reminder of the power
of open source<sup>2</sup>.</p>

<p>The performance of OpenShift has also been solid; feeds are delivered
seemingly instantaneously and, apart from the slight lag after restarting
the application, I haven't experienced any issues whatsoever in terms
of availability.</p>

<p>There are still a couple of areas where CommaFeed can be improved. Most
notably, there is an open feature request for a
<a href="https://github.com/Athou/commafeed/issues/54" title="Github Issue">mobile friendly CSS</a>
and this is badly needed, the site is pretty much unusable on my phone. With
any luck, some enterprising Android developer will build a CommaFeed app (for
which I would happily pay good money)…</p>

<p>In any event, if you are looking for a Google Reader replacement, try
running CommaFeed (either on your own server or one of Red Hat's); for
a project that is only a couple of months old, it has covered a
tremendous amount of ground and will undoubtedly continue to grow
and improve.</p>

<h4>Notes</h4>

<ol>
<li>In conjunction with his great advice about not being a
<a href="http://blog.pinboard.in/2011/12/don_t_be_a_free_user/" title="Pinboard blog">free user</a>.</li>
<li>The <a href="http://feeds-jwr.rhcloud.com/#/feeds/help" title="About and Help page">about page</a>
has a donate button: if you want to support an application which I have no doubt
will soon be even better than Google Reader, you might want to use it.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Vimprobable Walkthrough]]></title>
    <link href="http://jasonwryan.github.com/blog/2012/11/20/vimprobable/"/>
    <updated>2012-11-20T18:58:00+13:00</updated>
    <id>http://jasonwryan.github.com/blog/2012/11/20/vimprobable</id>
    <content type="html"><![CDATA[<p>{% img left https://dl.dropbox.com/u/261312/Blog-images/vimprobable-logo.png 'Vimprobable logo' %}
I have written about <a href="http://vimprobable.org" title="Vimprobable homepage">Vimprobable</a>
a couple of times over the last two years<sup>1</sup>,
it is one of those projects that, for a variety of reasons, I have picked up
and stuck with.  Like <a href="http://dwm.suckless.org" title="dwm homepage">dwm</a>,
<a href="http://vim.org" title="Vim homepage">Vim</a> and
<a href="http://tmux.sourceforge.net/" title="tmux homepage">tmux</a>,
it is an essential part of my working environment and is installed on all of my
machines, where it is my default browser. It's simplicity, power and
configurability are why, despite looking at a few other similar projects, I
have stuck with Vimprobable since first installing it.</p>

<p>After my last post, a <a href="http://jasonwryan.com/blog/2012/09/28/screencast/" title="An intro to dwm">dwm screencast</a>,
I wanted to have another crack at making a decent screencast. Sadly,
this is not it.  I can say that making a <em>good</em> screencast is not a simple
accomplishment; there are so many elements that require significant attention. I
spent a good many hours this time around playing with custom Xorg modelines,
<code>ffmpeg</code>'s arcane encoding options and, to be frank, the final product is just not worth
all that effort.</p>

<p>I'm going to stick with plain text from now on. It requires little more from me
than a passing acquaintance with the subject matter, some loosely held and
<a href="http://jasonwryan.com/blog/2012/08/18/trolls/" title="Trolling Arch Linux">firmly expressed opinions</a>
and my unbridled confidence in the fact that anyone who
has read this far down the page is so bereft of other, more pressing things to
think about that they may inadvertently find a scintilla of amusement in here…</p>

<p>With that explanation out of the way, I give you my final screencast:</p>

<iframe src="http://player.vimeo.com/video/53829053?byline=0&amp;portrait=0&amp;badge=0&amp;color=ffffff" 
width="350" height="197" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p></p>

<p><a href="http://vimeo.com/53829053">An Introduction to Vimprobable</a> on 
<a href="http://vimeo.com">Vimeo</a>.</p>


<h4>Notes</h4>

<ol>
<li>First back in <a href="http://jasonwryan.com/blog/2010/10/07/vimprobable/">October, 2010</a> and then,
more recently, in <a href="http://jasonwryan.com/blog/2011/06/26/using-vimprobable/">June, 2011</a>.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Vimprobable]]></title>
    <link href="http://jasonwryan.github.com/blog/2011/06/26/using-vimprobable/"/>
    <updated>2011-06-26T14:08:00+12:00</updated>
    <id>http://jasonwryan.github.com/blog/2011/06/26/using-vimprobable</id>
    <content type="html"><![CDATA[<p><img src="http://dl.dropbox.com/u/261312/Blog-images/vimprobable2.png" alt="image" /></p>

<p>I <a href="http://jasonwryan.com/blog/2010/10/07/vimprobable/" title="Post on using Vimprobable">posted last year about Vimprobable</a>
a <a href="http://www.webkit.org/" title="Webkit site">webkit browser</a> that uses
Vim-like keybinds and can be run completely without the rodent.</p>

<p>Over the last couple of months I have become increasingly comfortable
with it, and with the addition of
<a href="http://vimprobable.org/pipermail/vimprobable-users/2011-June/000800.html" title="External handlers patch on ML">some great recent functionality</a>,
it has become my default browser.</p>

<p>The project has good documentation, in the form of two man pages:
<code>vimprobable</code> and <code>vimprobablerc</code>, but I thought I’d share some of my
customizations and working methods.</p>

<h3>Copy &amp; Paste</h3>

<p>The only time I have been tempted to take my hand off the keyboard was
to insert the cursor at the correct character to begin a selection to
copy and paste. This is unnecessary. With the right options in
<span class="file">$XDG_CONFIG_HOME/vimprobable/vimprobablerc</span>,
you can do it all from the keyboard.</p>

<p>Map the keys you would like to use to enter and exit caret mode. I use
<kbd>Ctrl</kbd><kbd>c</kbd> to enter and <kbd>Shift</kbd><kbd>c</kbd> to
return to normal mode:</p>

<p>{% codeblock lang:sh %}
map &lt;C-c>=:set caret=true
map &lt;S-c>=:set caret=false
{% endcodeblock %}</p>

<p>Then, it is just a matter of identifying the text that you wish to copy
(in the photo above I was copying a script to launch <code>tabbed</code>), and
highlighting it via search. So the sequence is:</p>

<pre>
1.  <kbd>/</kbd> - to enter search mode
2.  <kbd>#</kbd><kbd>!</kbd> <kbd>Enter</kbd> - the shebang and then enter to highlight the correct
    sequence
3.  <kbd>Ctrl</kbd><kbd>c</kbd> to enter caret mode
4.  and then <kbd>Shift</kbd><kbd>Up</kbd> or <kbd>Shift</kbd><kbd>Down</kbd> to highlight the following or
    preceding lines
5.  yanking the selected text is <kbd>Shift</kbd><kbd>y</kbd>, and the text is now stored in
    your clipboard.
</pre>


<h3>Opening new instances in tabbed</h3>

<p>I highlighted the section on tabbed from the
<a href="http://www.vimprobable.org/" title="Vimprobable website">Vimprobable site</a> for a reason.
The second tip is how to set up
<a href="http://tools.suckless.org/tabbed" title="tabbed on suckless.org">tabbed</a> to
work well with other applications.</p>

<p>By default, any new windows (ie., instances of Vimprobable) opened from
within Vimprobable are “caught”—and managed— by <code>tabbed</code>. However, if you
open a link from, say
<a href="http://newsbeuter.org/" title="ncurses rss reader">newsbeuter</a> or
<a href="http://tyrs.nicosphere.net/index.html" title="ncurses twitter/identi.ca client">Tyrs</a>,
this will open an instance outside <code>tabbed</code> which, if you are using a
tiling window manager like
<a href="http://dwm.suckless.org/" title="THE titling wm">dwm</a>, means this window gets
pushed to master in your stack. This is not entirely satisfactory.</p>

<p>Thanks to
<a href="http://lists.suckless.org/dev/1106/8761.html" title="Tabbed thread on suckless ML">Connor Lane Smith on the suckless ML</a>,
I have a solution to have all new instances of Vimprobable sent to
<code>tabbed</code>, whether opened in another application, or if I click on a link
in my terminal, <a href="http://www.rxvt.org/" title="Rxvt. org">Urxvtc</a>.</p>

<p>CLS’s solution is elegantly simple. Launch tabbed with an <code>.xid</code> file in
<psan class="file">/tmp</span>:</p>

<p>{% codeblock lang:sh %}
"$(tabbed -d >/tmp/tabbed.xid); vimprobable2 -e $(&lt;/tmp/tabbed.xid)"
{% endcodeblock %}</p>

<p>Then it is just a matter of setting up other applications to pass links
to the <code>tabbed</code> <span class="file">tmp</span> file. For example, in my
<span class="file">$XDG_CONFIG_HOME/tyrs/tyrs.cfg</span>, I have:</p>

<p>{% codeblock lang:sh %}
openurl_command = vimprobable2 -e $(&lt;/tmp/tabbed.xid) %s
{% endcodeblock %}</p>

<p>The workaround for Urxvtc was a little trickier. I finally got there
with some help from
<a href="http://unix.stackexchange.com/questions/15550/passing-clicked-links-in-rxvt-to-a-script/15555#15555" title="Unix SE answer">Riccardo Murri on Unix &amp; Linux SE</a>.
In my <span class="file">~/.Xdefaults</span> I have:</p>

<p>{% codeblock lang:sh %}
! -- Clickable urls -- !
URxvt.perl-ext-common: default,matcher
URxvt.urlLauncher: /home/jason/Scripts/vimprobtab.sh
URxvt.matcher.button: 1
{% endcodeblock %}</p>

<p>…and the wrapper script <span class="file">vimprobtab.sh</span> looks like this:</p>

<p>{% codeblock lang:sh %}</p>

<h1>!/bin/bash</h1>

<h1>Script to open Vimprobable instances in tabbed</h1>

<p>exec vimprobable2 -e $(&lt;/tmp/tabbed.xid) "$1"
{% endcodeblock %}</p>

<p>Now whenever I open a link in an application or by clicking a link in
the terminal (in <a href="http://irssi.org/" title="IRC client">irssi</a>, for example)
it is passed to Vimprobable in <code>tabbed</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[w3m, Surfraw and Yanking URLs]]></title>
    <link href="http://jasonwryan.github.com/blog/2011/05/05/w3m/"/>
    <updated>2011-05-05T19:57:00+12:00</updated>
    <id>http://jasonwryan.github.com/blog/2011/05/05/w3m</id>
    <content type="html"><![CDATA[<p><img src="http://dl.dropbox.com/u/261312/Blog-images/w3m.png" alt="image" /></p>

<p>I posted a couple of weeks ago about
<a href="http://jasonwryan.com/blog/2011/04/13/archwiki-elvis-for-surfraw/" title="My post on the Arch Wiki elvis">how much I was enjoying Surfraw</a>,
to the point of writing a couple of my own <em>elvi</em>. As part of the
ongoing tweaking of my Surfraw experience, I have been experimenting
with different
<a href="http://en.wikipedia.org/wiki/Text-based_web_browser" title="Wikipedia entry: text browsers">text-based browsers</a>,
to see which one best fits my workflow.</p>

<p>I have previously been using both
<a href="http://www.jikos.cz/~mikulas/links/" title="Links homepage (Spartan enough for you?)">links</a>
and it’s homonym,
<a href="http://lynx.browser.org/" title="See you, and raise you...">lynx</a>. While
these have been perfectly acceptable, they weren’t quite providing the
level of functionality —and integration with my vim-oriented workflow—
that I was looking for. Enter
<a href="http://w3m.sourceforge.net/" title="Lavish, by comparison...">w3m</a>.</p>

<blockquote><p>w3m is a text-based web browser as well as a pager like `more’ or
`less’. With w3m you can browse web pages through a terminal emulator
window (xterm, rxvt or something like that). Moreover, w3m can be used
as a text formatting tool which typesets HTML into plain text.</p></blockquote>

<p>w3m is a step up from the other two for a variety of reasons. It
supports tables, frames, SSL connections, color and inline images. It
also renders pages in a form as true to their original layout as
possible. The killer features on top of that are, for me, the above
mentioned rendering of HTML as text (meaning you can save content
easily), and the customizable keybinds.</p>

<p>There was however, one significant sticking point. After countless hours
fruitlessly searching, I was unable to find a way to yank URLs to the
clipboard. As I have been spending a little time of late on
<a href="http://unix.stackexchange.com/" title="Unix &amp; Linux Stack Exchange">Unix &amp; Linux Stack Exchange</a>,
I thought I would ask the good folk there…</p>

<p>Less than fourty hours later, I had an answer so simple and elegant,
that I was literally grinning when I read it. It deserves quoting in
full. It is that ingenious.</p>

<blockquote><p>Set the “External Browser” option to
<code>sh -c 'echo "$0" | xsel'</code></p>

<p>You can use xsel -b to use the clipboard instead of the primary
selection. An alternative to
<a href="http://www.vergenet.net/~conrad/software/xsel/" title="xsel homepage">xsel</a>
is <a href="http://sourceforge.net/projects/xclip/" title="xclip homepage">xclip</a>
(xclip for the primary selection, xclip -selection CLIPBOARD for the
clipboard).</p>

<p>In <span class="file">~/.w3m/config</span>, that’s the extbrowser setting.
Then press M to copy (yank) the URL of the current page, or ESCM to
copy the URL of the link under the cursor.</p>

<p>You can use the second or third external browser for that instead;
then the key combination is 2M or 3M or 2ESCM or 3ESCM.
<a href="http://unix.stackexchange.com/questions/12497/yanking-urls-in-w3m/12572#12572" title="THE answer">Gilles on Unix &amp; Linux Stack Exchange</a></p></blockquote>

<p>This simple hack means that it is now trivial to yank either the URL of
the current page, or of the link under the cursor to primary selection.
It was just a matter then of adding some intuitive keybinds – as the <kbd>M</kbd>
and <kbd>Escape</kbd><kbd>M</kbd> combination are redolent of
<a href="http://en.wikipedia.org/wiki/Editor_war" title="Emacs vs Vi">the unamed editor</a>:</p>

<p>{% codeblock lang:vim %}
keymap y EXTERN    <br/>
keymap Y EXTERN_LINK
{% endcodeblock %}</p>

<p>The perfect <a href="http://en.wikipedia.org/wiki/Unix_philosophy" title="The UNIX philosophy on Wikipedia">UNIX solution</a>…</p>

<h4>Updated 8/5/11</h4>

<p>Gilles has edited and updated his answer with a slight change:</p>

<p>{% codeblock lang:sh %}
sh -c 'printf %s "$0" | xsel'
{% endcodeblock %}</p>

<p>This prevents a new line being appended.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vimprobable]]></title>
    <link href="http://jasonwryan.github.com/blog/2010/10/07/vimprobable/"/>
    <updated>2010-10-07T16:23:00+13:00</updated>
    <id>http://jasonwryan.github.com/blog/2010/10/07/vimprobable</id>
    <content type="html"><![CDATA[<p><a href="http://www.flickr.com/photos/jasonwryan/5055695051/" title="Vimprobable on Flickr"><img src="http://dl.dropbox.com/u/261312/Blog-images/vimprobable.png" title="Hacked Vimprobable2" alt="image" /></a></p>

<p>After just posting details of <a href="http://jasonwryan.com/blog/2010/10/04/the-setup/">my setup</a>,
I have made a reasonably significant (and it goes almost without saying, unplanned)
change: after <a href="http://www.uzbl.org/">uzbl</a> began unaccountably maxxing
out my CPU, I decided to give <a href="http://www.vimprobable.org/">Vimprobable</a>
a go.</p>

<p>I covered it briefly in my review of <a href="http://jasonwryan.com/blog/2010/05/21/5-alternate-browsers/">5 alternate browsers</a> and liked the
idea of another vim-based browsing experience.</p>

<p>There are two versions of Vimprobable; the differences, as described on
the website:</p>

<blockquote><p>Both versions are actively maintained. The first version can only be
customised by editing config.h before compiling. It is pretty stable
and very usable. Version 2 has grown fairly stable already as well,
but it’s still seeing bigger changes, of course. It aims at allowing
more customisation, for example through :set and :map commands.</p></blockquote>

<p>I downloaded the tarball for
<a href="http://aur.archlinux.org/packages.php?ID=33779" title="Arch User Repository: Vimprobable2">Vimprobable2 from the AUR</a>,
extracted the files and built the package.</p>

<p>Customization occurs in 3 files<sup>1</sup>: the first two,
<span class="file">config.h</span> and <span class="file">keymap.h</span>
both require you to recompile after editing, which is a trivial task
given the size of the programme.</p>

<p>Vimprobable2 also features a third configuration option that doesn’t
require compiling after changes, <span class="file">vimprobablerc</span>.
Should you wish to use it, you will need to create this file in
<span class="file">~/.config/vimprobable/</span>.
Helpfully, there is a man page for all of the options in this file, to
read it issue:</p>

<p>{% codeblock lang:sh %}
man vimprobablerc
{% endcodeblock %}</p>

<p>Despite it’s spartan appearance, Vimprobable is a full-featured browser
— with the advantage of being driven solely from the keyboard. It
handles bookmarks (and the tagging thereof, which is impressive and
handy), multiple search engines, cookies, history, etc…</p>

<p>I have made a number of changes to the defaults, including moving some
of the keybindings to be closer to uzbl’s (habit, really). The other
area where I made some minor changes was to the hinting style. Hinting
is just the way Vimprobable (and other browsers like uzbl and
<a href="http://conkeror.org/">Conkeror</a>) follow links; the default is, to put
it mildly, garish<sup>2</sup>, so I hacked around in <span class="file">hinting.js</span>
to make it more attractive.</p>

<p>If you are interested, my vimprobable files are in
<a href="https://bitbucket.org/jasonwryan/eeepc/src/tip/Build/vimprobable2-git/">bitbucket</a>,
including the modified hinting.js.</p>

<h3>Update</h3>

<p>I think this is a keeper. I installed
<a href="http://tools.suckless.org/tabbed" title="suckless' tabbed">tabbed</a> and now
open Vimprobable in tabbed for tab management. A quick addition to my
keybinds in <a href="http://dwm.suckless.org/" title="dynamic window manager">dwm</a> and
I have a minimalist and powerful browser…</p>

<h5>Notes</h5>

<ol>
<li><p>Of course, you are not limited to these files; the beauty of free
and open-source software is that you can change any of it…</p></li>
<li><p>To support this claim, I searched google for an image of the default
Vimprobable hinting style, and I could only find this
<a href="http://www.linuxjournal.com/files/linuxjournal.com/linuxjournal/articles/103/10387/10387f2.jpg">screenshot of conkeror</a>,
which will give you an idea…</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
