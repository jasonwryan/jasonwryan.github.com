<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tmux | jasonwryan.com]]></title>
  <link href="http://jasonwryan.github.com/blog/categories/tmux/atom.xml" rel="self"/>
  <link href="http://jasonwryan.github.com/"/>
  <updated>2013-06-22T17:25:39+12:00</updated>
  <id>http://jasonwryan.github.com/</id>
  <author>
    <name><![CDATA[Jason Ryan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[IRC Notifications with dzen2]]></title>
    <link href="http://jasonwryan.github.com/blog/2011/11/07/irc-dzen/"/>
    <updated>2011-11-07T19:48:00+13:00</updated>
    <id>http://jasonwryan.github.com/blog/2011/11/07/irc-dzen</id>
    <content type="html"><![CDATA[<p><img src="http://dl.dropbox.com/u/261312/Blog-images/irc-dzen.png" alt="image" /></p>

<p>I have a persistent <a href="http://tmux.sourceforge.net/" title="tmux homepage">tmux</a>
session running on a server connected to IRC and I wanted to get
notifications whenever someone addressed me, irrespective of whether I
was connected to the session, or that particular machine at the time.</p>

<p>I use <a href="http://irssi.org/about" title="irssi homepage">irssi</a> as my IRC client,
and there is a script called
<a href="http://thorstenl.blogspot.com/2007/01/thls-irssi-notification-script.html" title="Blog post explaining fnotify">fnotify</a>
that will print any mentions in a channel to a file. I then configured
the fnotify script to write to a folder in Dropbox. Now, whenever I am
mentioned in freenode, the file is updated across all my machines.</p>

<p>The next challenge was to translate the updating of the fnotify file
into a notification on my current machine. As I don’t use
<a href="http://developer.gnome.org/libnotify/" title="libnotify reference manual">libnotify</a>
on my Arch machines, I wanted to make it work with
<a href="http://sites.google.com/site/gotmor/dzen" title="dzen homepage">dzen2</a><sup>1</sup>
Enter a simple shell script:</p>

<p>{% codeblock highlights.sh %}</p>

<h1>!/bin/sh</h1>

<p>dir="$HOME/Dropbox/irssi/"</p>

<p>while inotifywait -qqre attrib "$dir" >/dev/null 2>&1; do</p>

<pre><code>echo "IRC: You have been pinged..." | dzen2 -p 3
</code></pre>

<p>done
{% endcodeblock %}</p>

<p>I have included this in my <span class="file">$HOME/.xinitrc</span>
so that it runs in the background after login. Whenever the metadata
(the <code>attrib</code> switch) of the file changes, a dzen2 notification is
written to my
<a href="http://dwm.suckless.org" title="THE supreme window manager">dwm</a> statusbar
with the message.</p>

<p>Simple; but does what I need…</p>

<h5>Notes</h5>

<ol>
<li>Dropbox’s API won’t work with dzen2—or with other lightweight
notifications like
<a href="https://github.com/halhen/statnot" title="statnot on github">statnot</a>, so I
<a href="http://dropbox.zendesk.com/requests/336478" title="Closed Dropbox bug report">filed a bug report</a>
(that was closed without any progress)—hence my having to resort to a
home-cooked solution…</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tmux &amp; SSH Keys]]></title>
    <link href="http://jasonwryan.github.com/blog/2011/09/10/tmux-and-ssh-keys/"/>
    <updated>2011-09-10T16:46:00+12:00</updated>
    <id>http://jasonwryan.github.com/blog/2011/09/10/tmux-and-ssh-keys</id>
    <content type="html"><![CDATA[<p><img src="http://dl.dropbox.com/u/261312/Blog-images/tmux-ssh.jpg" alt="image" /></p>

<p>I have posted before about tmux<sup>1</sup>, the terminal multiplexer. One of the
(minor) frustrations that I have to-date done nothing about was setting
up persistent SSH key management across sessions. The ability to enter
the passphrase for my public keys once, and then to be able to access
remote hosts—or {git,hg} push—without having to re-enter a passphrase.</p>

<p>My solution is quite hackish, but it works and, given
<a href="http://duckduckgo.com/?q=tmux+ssh-agent" title="tmux and ssh-agent on DDG">the only other solutions</a>
I was able to find by searching seem even more convoluted, I thought I
would share it.</p>

<p>There are a couple of separate steps, none of them of any real
consequence, but each necessary.</p>

<p>First, in your <span class="file">$HOME/.tmux.conf</span> you need to enable update-environment:</p>

<p>{% codeblock lang:sh %}
set -g update-environment "DISPLAY SSH_ASKPASS SSH_AUTH_SOCK
SSH_AGENT_PID SSH_CONNECTION WINDOWID XAUTHORITY"
{% endcodeblock %}</p>

<p>From the <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tmux&amp;sektion=1" title="tmux manual">man page</a>:</p>

<blockquote><p>Set a space-separated string containing a list of environment
variables to be copied into the session environment when a new session
is created or an existing session is attached. Any variables that do
not exist in the source environment are set to be removed from the
session environment (as if -r was given to the set-environment
command).</p></blockquote>

<p>The next step is to create a script (mine is bound to a key sequence to
launch from scratch, you can adopt a simpler approach) that starts tmux
and initializes ssh-agent:<sup>2</sup></p>

<p>{% codeblock lang:sh %}</p>

<h1>!/bin/bash</h1>

<p>PID=$(pgrep tmux)
new="tmux -f $HOME/.tmux/conf new -s secured"
old="tmux attach -t secured -d"</p>

<p>if [[ -z "$SSH_AUTH_SOCK" ]]; then</p>

<pre><code>eval `ssh-agent`
trap "kill $SSH_AGENT_PID" 0
</code></pre>

<p>fi</p>

<p>if [[ -z "$PID" ]]; then</p>

<pre><code>urxvtc -title "SSH" -e sh -c "${new}"
</code></pre>

<p>else</p>

<pre><code>urxvtc -title "SSH" -e sh -c "${old}"
</code></pre>

<p>fi</p>

<p>ssh-add
{% endcodeblock %}</p>

<p>The final step is to install
<a href="http://www.funtoo.org/wiki/Keychain" title="Keychain homepage">keychain</a>, and
set it up. I followed the
<a href="https://wiki.archlinux.org/index.php/SSH_Keys#Using_keychain" title="...because it rocks!">instructions on the Arch Wiki</a>
and opted for a couple of lines in <span class="file">$HOME/.bash_profile</span><sup>3</sup>, like so:</p>

<p>{% codeblock lang:sh %}
/usr/bin/keychain -Q -q --nogui ~/.ssh/id_rsa
[[ -f $HOME/.keychain/$HOSTNAME-sh ]] &amp;&amp;</p>

<pre><code>source $HOME/.keychain/$HOSTNAME-sh
</code></pre>

<p>{% endcodeblock %}</p>

<p>That’s it. Now, hitting a key sequence opens a terminal, I am prompted
for my passphrase and then, if I open another window, or another tmux
session <em>as long is the first session is still running, attached or
not</em>, I am authenticated and can SSH or push without a prompt.</p>

<h4>Updated 7/10/11</h4>

<p>I refined the sequence to provide me a little more flexibility: now the
keychain is only called if I start a specific named tmux session. To do
this, I changed my <span class="file">$HOME/.bash_profile</span> to test for that session:</p>

<p>{% codeblock lang:sh %}
tsess=$(tmux ls)</p>

<p>if [[ "${tsess%%:*}" = "secured" ]] &amp;&amp;
   [[ -f $HOME/.keychain/$HOSTNAME-sh ]]; then</p>

<pre><code># start keychain
/usr/bin/keychain -Q -q --nogui ~/.ssh/id_rsa
. $HOME/.keychain/$HOSTNAME-sh
</code></pre>

<p>fi
{% endcodeblock %}</p>

<h5>Notes</h5>

<ol>
<li><p>Previous posts:</p>

<ul>
<li><a href="http://jasonwryan.com/blog/2010/01/07/tmux-terminal-multiplexer/" title="First post on tmux">tmux: terminal multiplexer</a></li>
<li><a href="http://jasonwryan.com/blog/2010/10/03/sessions-in-tmux/" title="tmux sessions">Sessions in tmux</a></li>
<li><a href="http://jasonwryan.com/blog/2011/06/07/copy-and-paste-in-tmux/" title="Copy and paste in tmux">Copy &amp; paste in tmux</a></li>
<li><a href="http://jasonwryan.com/blog/2011/06/10/setting-tmux-status-bar-if-in-x/" title="tmux status bars">Setting tmux status bar if in X</a></li>
</ul>
</li>
<li><p>Updated to include session test.</p></li>
<li>Alternatively, placing the script in <span class="file">/etc/profile.d/keychain.sh</span> will
start the agent when you login, as opposed to starting a specific
shell. Your call on security versus convenience…</li>
</ol>


<p>Creative Commons image from <a href="http://www.flickr.com/photos/marts-pics/2292588212/in/photostream/" title="Public Key on Flickr">mer de glace</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting tmux statusbar if in X]]></title>
    <link href="http://jasonwryan.github.com/blog/2011/06/10/setting-tmux-statusbar-if-in-x/"/>
    <updated>2011-06-10T22:56:00+12:00</updated>
    <id>http://jasonwryan.github.com/blog/2011/06/10/setting-tmux-statusbar-if-in-x</id>
    <content type="html"><![CDATA[<p><a href="http://www.flickr.com/photos/jasonwryan/5636783883/" title="Arch Linux: dwm, tmux &amp; scratchpad by jasonwryan, on Flickr"><img src="http://farm6.static.flickr.com/5303/5636783883_5b7272453b.jpg" alt="Arch Linux: dwm, tmux &amp; scratchpad" /></a></p>

<p>I have been posting quite a bit about
<a href="http://tmux.sourceforge.net/" title="tmux homepage">tmux</a> of late<sup>1</sup>.
It is a marvellous application and lends itself to all sorts of interesting
uses. When you first install it, you will find a number of user config
files in <span class="file">/usr/share/tmux/</span>. I started with tmux by copying
<a href="http://cinderwick.ca/" title="Thayer Williams' site">Thayer’s</a> config across
and then working up from there. There is a section
<a href="http://tmux.svn.sourceforge.net/viewvc/tmux/trunk/examples/t-williams.conf?revision=1833&amp;view=markup" title="Thayer's conf in SVN">at the bottom of this file</a>
that has always puzzled me, and so I decided to get to the bottom of it.</p>

<p>{% codeblock lang:sh %}</p>

<h1>show some useful stats but only when tmux is started</h1>

<h1>outside of Xorg, otherwise dwm statusbar shows these already</h1>

<p>{% endcodeblock %}</p>

<p>It is a great idea. If you are running tmux in X, then you have
<a href="http://dwm.suckless.org/" title="dwm homepage">dwm’s</a> status bar telling you
what the time is,
<a href="https://bitbucket.org/jasonwryan/eeepc/src/241da582a0fd/Scripts/dwm-status" title="dwm status bar in my mercurial repo">how much battery you have left</a>
etc,. You don’t need to replicate that functionality in tmux. If,
however, you are in the console, you don’t have that information, unless
you print it in tmux’s statusbar.</p>

<p>I had tried to get this to work once or twice over the last couple of
years, but never persevered with it. However, as I have been doing a bit
of work making the console as functional as possible<sup>2</sup>, I thought I
would revisit it.</p>

<p><img src="http://dl.dropbox.com/u/261312/Blog-images/tmux-status1.png" alt="image" /></p>

<p>The insight that I had that got it working for me was to use the
source-file option in <span class="file">.tmux.conf</span> to call the relevant statusbar,
depending if X was running or not. I just adapted Thayer’s code, like
so:</p>

<p>{% codeblock lang:sh %}</p>

<h1>Statusbar starting in X or not</h1>

<p>if '[ -n "$DISPLAY" ]' 'source-file ~/.tmux/inx'
if '[ -z "$DISPLAY" ]' 'source-file ~/.tmux/xless'
{% endcodeblock %}</p>

<p>And then created those files with the desired statusbar options. So, for
example, if I am running tmux in the console, <span class="file">$HOME/.tmux/xless</span> is
loaded:</p>

<p>{% codeblock lang:sh %}</p>

<h1>Statusbar if tmux run in console</h1>

<h1>information normally in dwm bar</h1>

<p>set -g status-right-length 50
set -g status-left-length 50
set -g status-left "#[fg=green] #H #[default] …blah, blah, blah…
{% endcodeblock %}</p>

<p>Which prints a statusbar with the time and battery left on my laptop<sup>3</sup>:</p>

<p><img src="http://dl.dropbox.com/u/261312/Blog-images/tmux-status2.png" alt="image" /></p>

<p>All the relevant files are in
<a href="https://bitbucket.org/jasonwryan/eeepc/src/241da582a0fd/.tmux" title="My mercurial repository">my mercurial repo</a>.</p>

<h5>Notes</h5>

<ol>
<li><p><a href="http://jasonwryan.com/blog/2011/06/07/copy-and-paste-in-tmux/" title="Post on copy &amp; paste in tmux">Copy &amp; paste in tmux</a>,
<a href="http://jasonwryan.com/blog/2010/10/03/sessions-in-tmux/" title="Sessions in tmux">Sessions in tmux</a>
&amp; <a href="http://jasonwryan.com/blog/2010/01/07/tmux-terminal-multiplexer/" title="Intro to tmux">Introduction to tmux</a></p></li>
<li><p><a href="http://jasonwryan.com/blog/2011/04/06/vim-colours-in-the-console/" title="Setting Vim colours in the console">Vim colours in the console</a></p></li>
<li><p>Image squashed to fit the requirements of this blog…</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Copy &amp; Paste in tmux]]></title>
    <link href="http://jasonwryan.github.com/blog/2011/06/07/copy-and-paste-in-tmux/"/>
    <updated>2011-06-07T19:54:00+12:00</updated>
    <id>http://jasonwryan.github.com/blog/2011/06/07/copy-and-paste-in-tmux</id>
    <content type="html"><![CDATA[<p><img src="http://dl.dropbox.com/u/261312/Blog-images/tmux-copy.png" alt="image" /></p>

<p>I’ve posted a couple of times<sup>1</sup> about
<a href="http://tmux.sourceforge.net/" title="tmux homepage">tmux</a>, the brilliant
terminal mutliplexer. One question I see raised a lot in #tmux is how
to copy and paste.</p>

<p>The documentation for tmux is excellent: the
<a href="http://www.openbsd.org/cgi-bin/man.cgi?query=tmux&amp;sektion=1" title="BSD man page: tmux">man page</a>
one of the most clear and thorough I have read. And while it is
explained there, I thought I would share my approach anyway.</p>

<p>First, I set tmux to use vi keys:</p>

<p>{% codeblock lang:sh %}
setw -g mode-keys vi
{% endcodeblock %}</p>

<p>Then I change the default keybinds to suit my workflow. As explained in
the man page, the default keys to enter and exit copy mode are <kbd>[</kbd>
and <kbd>]</kbd> respectively. I reset those in my <span class="file">.tmux.conf</span>
to more intuitive and Vim-like keys:</p>

<p>{% codeblock lang:sh %}
unbind [
bind Escape copy-mode
unbind p
bind p paste-buffer
bind-key -t vi-copy 'v' begin-selection
bind-key -t vi-copy 'y' copy-selection
{% endcodeblock %}</p>

<p>This seems a lot closer to all of the other Vim-like apps that I run -
where <kbd>Escape</kbd> changes the mode, <kbd>v</kbd> begins visual selection,
<kbd>y</kbd> yanks text to the buffer and <kbd>p</kbd> puts text copied from the buffer.</p>

<p>So, to string it all together, the command sequence necessary to copy
some text from tmux and paste it is now (I bind my prefix to <kbd>t</kbd>):</p>

<pre>
<kbd>Ctrl</kbd><kbd>t</kbd>,<kbd>Escape</kbd>   # enter copy mode
# move cursor to the start or end of the desired text string
<kbd>v</kbd>                        # to activate highlighting
# move cursor to cover the requisite string
<kbd>y</kbd>                        # to capture the string
<kbd>q</kbd>                        # exit copy mode
<kbd>Ctrl</kbd><kbd>t</kbd>,<kbd>p</kbd>       # put/paste the text in the desired location
</pre>


<p>Simple.</p>

<p>This means that you can scroll back through the output of <em>anything</em> in
your terminal, and copy and paste it anywhere. Once you set it up, it is
a very powerful tool…</p>

<h5>Notes</h5>

<p>1.<a href="http://jasonwryan.com/blog/2010/01/07/tmux-terminal-multiplexer/">tmux - Terminal-multiplexer</a> &amp; <a href="http://jasonwryan.com/blog/2010/10/03/sessions-in-tmux/">Sessions in tmux</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim Colours in the Console]]></title>
    <link href="http://jasonwryan.github.com/blog/2011/04/06/vim-colours-in-the-console/"/>
    <updated>2011-04-06T21:19:00+12:00</updated>
    <id>http://jasonwryan.github.com/blog/2011/04/06/vim-colours-in-the-console</id>
    <content type="html"><![CDATA[<p><img src="http://dl.dropbox.com/u/261312/Blog-images/vim-colours1.png" alt="image" /></p>

<p>I have spent the last couple of days trying to understand why I couldn’t
get <a href="http://www.vim.org/" title="Vim: the _only_ editor">Vim</a> to display the
correct 16 colours in the console. Not in a terminal emulator in X, like
<a href="http://invisible-island.net/xterm/xterm.html" title="XTerm homepage">xterm</a>
or
<a href="http://software.schmorp.de/pkg/rxvt-unicode.html" title="Homepage for urxvt">rxvt-unicode</a>,
but in the consoles, TTY1-6.</p>

<p>After a lot of searching, more reading into the
<a href="http://tldp.org/HOWTO/Text-Terminal-HOWTO-16.html" title="The Linux terminal...">arcane documentation</a>
of Linux terminals than I was either prepared for or keen on and some
experimentation, I have it working. With one caveat; I wasn’t prepared
to set the <code>TERM</code> environment in my <span class="file">.vimrc</span>. Apart from being
<a href="http://tldp.org/HOWTO/Text-Terminal-HOWTO-10.html#ss10.5" title="Console documentation">cautioned against</a>,
as I <em>do</em> set it for tmux, I was anxious to avoid any clashes when
running Vim in <a href="http://tmux.sourceforge.net/" title="tmux homepage">tmux</a>
(which I do most of the time).</p>

<p>From the top, then. Logging into a console and checking the <code>$TERM</code> and
colours, gave me the default:</p>

<p>{% codeblock lang:sh %}
$ echo $TERM &amp;&amp; tput colors
linux
8
{% endcodeblock %}</p>

<p>Which, under my current configuration of Vim, rendered colours like so:</p>

<p><img src="http://dl.dropbox.com/u/261312/Blog-images/vim-colours2.png" alt="image" /></p>

<p>Hardly satisfactory.</p>

<p>The first step was to remove the line in my <span class="file">.vimrc</span> that was forcing 256
colours:</p>

<p>{% codeblock lang:sh %}
set t_Co=256
{% endcodeblock %}</p>

<p>Then I had to rewrite my colourscheme to change all of the references to
the terminal colour numbers to colour <em>names</em>, as apparently that is
what 8-colour terms accept. So, my <span class="file">miromiro.vim</span>, went from looking like:</p>

<p>{% codeblock lang:vim %}
hi Normal          ctermfg=15
hi Ignore          ctermfg=8
hi Comment         ctermfg=7
hi LineNr          ctermfg=8
{% endcodeblock %}</p>

<p>…to the more literal:</p>

<p>{% codeblock lang:vim %}
hi Normal         ctermfg=white    cterm=bold
hi Ignore         ctermfg=black    cterm=bold
hi Comment        ctermfg=grey
hi LineNr         ctermfg=black    cterm=bold
{% endcodeblock %}</p>

<p>Once I had made the necessary changes, I saved this new colourscheme as
<span class="file">miro8.vim</span><sup>1</sup>. And, yes, I know I could
have included it in an <code>if</code> condition in my original colourscheme<sup>2</sup>,
but I was intent on keeping things compartmentalized until I had it working…</p>

<p>Running Vim in the console was now starting to look promising:</p>

<p><img src="http://dl.dropbox.com/u/261312/Blog-images/vim-colours3.png" alt="image" /></p>

<p>The final piece of the puzzle was to pass my
<a href="https://bitbucket.org/jasonwryan/eeepc/src/241da582a0fd/.colours/dark" title="jwr dark colours: mercurial repo">X colours</a>
to the console. Fortunately,
<a href="http://phraktured.net/linux-console-colors.html" title="The Overlord himself…">Aaron Griffin’s 2006 post</a>
made this a trivial exercise. With the following lines in my <span class="file">.bashrc</span>:</p>

<p>{% codeblock lang:sh %}</p>

<h1>Linux console colors (jwr dark)</h1>

<p>if [ "$TERM" = "linux" ]; then
   echo -en "\e]P0000000" #black
   echo -en "\e]P83d3d3d" #darkgrey
   echo -en "\e]P18c4665" #darkred
   echo -en "\e]P9bf4d80" #red
   echo -en "\e]P2287373" #darkgreen
   echo -en "\e]PA53a6a6" #green
   echo -en "\e]P37c7c99" #brown
   echo -en "\e]PB9e9ecb" #yellow
   echo -en "\e]P4395573" #darkblue
   echo -en "\e]PC477ab3" #blue
   echo -en "\e]P55e468c" #darkmagenta
   echo -en "\e]PD7e62b3" #magenta
   echo -en "\e]P631658c" #darkcyan
   echo -en "\e]PE6096bf" #cyan
   echo -en "\e]P7899ca1" #lightgrey
   echo -en "\e]PFc0c0c0" #white
   clear # bring us back to default input colours
fi
{% endcodeblock %}</p>

<p>Then it was just a case of setting the relevant colourscheme in my
<span class="file">.vimrc</span>:</p>

<p>{% codeblock lang:vim %}
if &amp;t_Co &lt; 256</p>

<pre><code>colorscheme miro8   " colourscheme for the 8 colour linux term
</code></pre>

<p>else</p>

<pre><code>colorscheme miromiro 
</code></pre>

<p>endif
{% endcodeblock %}</p>

<p>And you can see
<a href="http://www.flickr.com/photos/jasonwryan/5594191615/#/photos/jasonwryan/5594191615/lightbox/" title="Vim colours in console">a screenshot</a>
of the finished product on Flickr.</p>

<h5>Notes</h5>

<ol>
<li><p><a href="https://bitbucket.org/jasonwryan/eeepc/src/241da582a0fd/.vim/colors/miro8.vim" title="Mercurial repo: miro8 colourscheme">miro8.vim</a></p></li>
<li><p><a href="https://bitbucket.org/jasonwryan/eeepc/src/241da582a0fd/.vim/colors/miromiro.vim" title="Mercurial repo: miromiro.vim colourscheme">miromiro.vim</a></p></li>
</ol>

]]></content>
  </entry>
  
</feed>
