<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: archlinux | jasonwryan.com]]></title>
  <link href="http://jasonwryan.github.com/blog/categories/archlinux/atom.xml" rel="self"/>
  <link href="http://jasonwryan.github.com/"/>
  <updated>2012-08-18T12:53:41+12:00</updated>
  <id>http://jasonwryan.github.com/</id>
  <author>
    <name><![CDATA[Jason Ryan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Trolling Arch Linux]]></title>
    <link href="http://jasonwryan.github.com/blog/2012/08/18/trolls/"/>
    <updated>2012-08-18T10:47:00+12:00</updated>
    <id>http://jasonwryan.github.com/blog/2012/08/18/trolls</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://dl.dropbox.com/u/261312/Blog-images/troll.jpg" title="'Troll on Flickr'" >
I posted recently about
<a href="http://jasonwryan.com/blog/2012/08/04/systemd/" title="Some thoughts on moving across…">my experiences shifting to systemd</a>
and how I found it, for all three of my Arch machines, to be a relatively simple and
straightforward process which, in the intervening weeks, has borne out the views of
the developers and other members of the community who have been using it for a longer
period—it works, and works well. At the start of this week, Stéphane Gaudreault
announced on Arch-dev-public the intention to
<a href="http://mailman.archlinux.org/pipermail/arch-dev-public/2012-August/023389.html" title="ML post seeking developer views">replace the original initscripts with systemd</a>.</p>

<p>The reaction by some to this announcement was, to me, quite disappointing. My view of
open source communities is that by participating you are entering into a social contract.
That contract is that, as you are reliant on the goodwill of the wider community it is
incumbent on you to ensure that your overall contribution—in whatever form—brings
more to the community than it takes away. At the very least, you can strive to ensure
that it is a value neutral exchange.</p>

<p>Sadly, for some of the trolls on the <acronym title="Mailing lists">MLs</acronym>, that
is patently not the case. I want to take a closer look at just one of those threads, for two
reasons. First, it is a textbook case of a particularly pernicious troll. And second, in
conjunction with some other factors, it had an especially damaging effect on the wider
community.</p>

<p>The thread in question is on Arch-general, the largest of the mailing lists. It has
the suitably alarmist title
<a href="http://mailman.archlinux.org/pipermail/arch-general/2012-August/029856.html" title="A trolling we will go…">Think twice before moving to systemd</a>.
The troll, who has had only minimal involvement with the Arch community up until this
unfortunate moment starts by framing his “concern”<sup>1</sup>:</p>

<p><blockquote><p>I just became aware that Arch Linux plans to switch to systemd, and this worries me for several reasons.</p></blockquote></p>

<p>Felipe is worried. Ergo, <em>we</em> should be worried. Why should we be worried? Because,
despite the fact that systemd has been discussed and used by Archers since the
<a href="https://bbs.archlinux.org/viewtopic.php?id=96316" title="57 page thread on the Arch BBS">middle of 2010</a>,
it has just come to his attention and now, with the formidable powers of his intellect,
he has detected a disturbance in the force.</p>

<p><blockquote><p>I tried systemd a while ago in a brand new machine with Arch Linux and the boot was <em>much slower</em>. After some exchanges with Lennart Poettering and other people in Google+[1], it became clear I was on my own. Eventually I found the culprit: Fedora uses CONFIG_HZ_1000, and Arch Linux uses CONFIG_HZ_300. It became clear to me that systemd was not ready for prime time, it wasn't thoroughly tested in a lot of machines, and if you have problems Lennart Poettering will blame you (PulseAudio sounds familiar?).</p></blockquote></p>

<p>The salient phrases here are “it became clear I was on my own” and the even more telling,
“it became clear to me that systemd was not ready for prime time.” Once I had managed to
wipe away the tears of gratitude that were coursing down my cheeks, I realized that Arch
finally had finally found what it had been missing for all these years: a saviour. We
were going to be OK after all.</p>

<p>Felipe has “found the culprit.” Despite the best efforts of the Arch developers, upstream,
the other distros that have been using it for considerably longer, and the experience of the
<a href="https://bbs.archlinux.org/viewtopic.php?pid=1147676" title="Thread on systemd - one of many">Arch users reported on our boards</a>,
no-one had the heroic ability to see through to the heart of this conundrum and expose
systemd for the fraud that it is.</p>

<p>But our gratitude should be tempered with some shame for we, the Arch community, have let
Felipe down. We haven't lived up to the standards he expects of us. As he gently admonishes us:
“I was expecting more from the Arch Linux community.” Yes, Felipe, and you were right to.
We let you down; can you forgive us?</p>

<p>The thread goes on to generate more than 50 replies. All of them wasted.
His trolling is not interested in facts, in reason or logic; his method of argumentation is
not rational, and he is not interested in working toward an understanding
of the truth; he just wants to be right. At whatever cost to the wider community. These posts,
and trolls in other fora
<a href="https://lkml.org/lkml/2012/4/12/434" title="LKML exchange with Linus Torvalds">like this one</a>,<sup>2</sup>
are really about gratifying Felipe's own voracious appetite for self-aggrandisement. In reality,
of course, it is a stunning illustration of the
<a href="https://secure.wikimedia.org/wikipedia/en/wiki/Dunning%E2%80%93Kruger_effect" title="Wikipedia entry">Dunning-Kruger effect</a>.
It would be pathetic if it were a victimless pursuit; but it is not.</p>

<p>Further down in the thread we see the inevitable frustration of the developer who leads
this work for Arch,
<a href="https://www.archlinux.org/developers/#tomegun" title="Tom's developer profile">Tom Gunderson</a>,
finally <a href="http://mailman.archlinux.org/pipermail/arch-general/2012-August/029933.html" title="Tom's reply quoting Linus">boil over</a>.
This precipitates another thread where Tom announces that he will
<a href="http://mailman.archlinux.org/pipermail/arch-general/2012-August/029960.html" title="Tom's mail to the list">no longer participate in this list</a>.
This is from the developer that has patiently and constructively engaged with Arch users on the
list around this issue for the past several months. On his own time.</p>

<p>That is the impact of trolls like Felipe. That is a direct effect of his selfishness on the
wider community. What has he brought to the community? Dissent, distraction and posturing.
What has he taken away? The ability for all of us to engage with one of the developers
of the software we all use. His presence on the list, and that of a few others,
has been nothing short of corrosive.</p>

<p>And as for the smoking gun, the config setting that no-one was smart enough to
discover? Denis A. Altoé Falqueto went to the trouble to build another kernel
and run a test and, contrary to Felipe who provided no such evidence,
<a href="http://mailman.archlinux.org/pipermail/arch-general/2012-August/030145.html" title="Denis' post">posted the results</a>.
You can guess the outcome.</p>

<h4>Notes</h4>

<ol>
<li>See the <a href="http://www.urbandictionary.com/define.php?term=concern+troll">concern troll</a>.</li>
<li>Read the whole thread to fully understand how obstinance can trump reason… See
also his <a href="http://felipec.wordpress.com/2012/05/26/no-mercurial-branches-are-still-not-better-than-git-ones-response-to-jhws-more-on-mercurial-vs-git-with-graphs/">own blog</a>
where he expresses incredulity that his comments on another blog have been deleted.</li>
</ol>


<p>Creative Commons image of the troll on Flickr by
<a href="http://www.flickr.com/photos/56380734@N05/6937763971/">Comrade Foot</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Leap to systemd]]></title>
    <link href="http://jasonwryan.github.com/blog/2012/08/04/systemd/"/>
    <updated>2012-08-04T09:32:00+12:00</updated>
    <id>http://jasonwryan.github.com/blog/2012/08/04/systemd</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://dl.dropbox.com/u/261312/Blog-images/leap.jpg" title="Leap image on Flickr" >
I posted a couple of weeks ago about the impact of some of the current
<a href="http://jasonwryan.com/blog/2012/07/19/breakage/" title="Post on the glibc change">changes to Arch Linux</a>.
There seems to be quite a bit of it about, because in conjunction with the move from
<span class="file">/lib</span> to <span class="file">/usr/lib</span>—and motivated by the same
overarching shifts in the other distributions—the other major change making its way through
the Arch community is the move to
<a href="http://freedesktop.org/wiki/Software/systemd" title="Project page">systemd</a>. This change, however, has
been more controversial because it marks a shift away from Arch's central configuration
file, <a href="https://wiki.archlinux.org/index.php/Rc.conf" title="Arch wiki entry on rc.conf">/etc/rc.conf</a>;
a move that has disconcerted a number of people.</p>

<p>I'm not going to get into whether or not this move is consistent with
<a href="https://wiki.archlinux.org/index.php/The_Arch_Way" title="Wiki entry">The Arch Way</a>, because that has
been thrashed over extensively on the
<a href="http://mailman.archlinux.org/pipermail/arch-dev-public/2012-July/023283.html" title="ML thread on rc.conf">mailing</a>
<a href="http://mailman.archlinux.org/pipermail/arch-dev-public/2012-July/023258.html" title="And another one…">lists</a>,
but also—and more importantly—because Arch is a rolling release, which means change is <em>inevitable</em>.
What is more, after watching all the back and forth on the <acronym title="Mailing lists">ML</acronym>
and on the <a href="https://bbs.archlinux.org/viewtopic.php?id=96316&amp;p=1" title="Arch BBS thread on systemd">boards</a>, I am convinced that the
<a href="http://www.archlinux.org/developers/#tomegun" title="Tom Gunderson">developer overseeing this shift</a>
both knows what he is doing and is acting in the best interests of Arch.</p>

<p>This view has been validated by my experience of shifting to systemd on my machines.</p>

<p>When the new initscripts package was pushed to [testing] in the middle of last month,
I stripped out all of the redundant options in <span class="file">/etc/rc.conf</span>
and took the ten minutes or so to read about and then create the new files. I then spent some
time reading up on systemd, principally
<a href="http://0pointer.de/blog/projects/systemd-for-admins-1.html" title="One of TWELVE…">Lennart Poettering's series of posts</a>,
the <a href="https://wiki.archlinux.org/index.php/Systemd" title="Good, but needing some structure">Arch wiki entry</a>
and the many and various
<a href="http://0pointer.de/public/systemd-man/" title="One for everything">manual pages</a>.</p>

<p>Over the last couple of days, I have migrated all of my machines over to systemd. I found it
to be a very straightforward process. I went for a pure systemd approach, for reasons I will
return to. Essentially, this is how I tackled it.</p>

<p>First, for each machine, I established what daemons were running. I did this by using
<a href="http://pikacode.com/jasonwryan/Veles/file/default/Scripts/daemons.sh" title="Pretty sure it is one of Xyne's">this shell script</a>
and cross checking entries in my <span class="file">/etc/rc.conf</span>. Then
it was just a matter of installing systemd:<sup>1</sup></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>sudo pacman -S systemd systemd-sysvcompat systemd-arch-units
</span></code></pre></div></figure></notextile></div></p>

<p>The only outstanding file to be created was <span class="file">/etc/timezone</span>, the
others—all documented in <code>man rc.conf</code>—I had created earlier in the month. Then, with the
list of the services I would need running on each box, I enabled them. I think it is
fair to say that the only thing that is clunky about systemd is the command syntax for
managing units. Repeatedly typing <code>systemctl enable foo.service</code> is as tedious as it is
error prone, so I hacked up a
<a href="http://pikacode.com/jasonwryan/Centurion/file/default/Scripts/sysd" title="sysd - *so* much easier">wrapper script</a>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>sysd <span class="nb">enable </span>acpid
</span><span class='line'>sysd <span class="nb">enable </span>lvm
</span><span class='line'>etc…
</span></code></pre></div></figure></notextile></div></p>

<p>I also activated some additional gettys, as I like to log into a tmux session in TTY2 when
I don't need or want to start <code>X</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>ln -sf /usr/lib/systemd/system/getty@.service /etc/systemd/system/getty.target.wants/getty@tty2.service
</span></code></pre></div></figure></notextile></div></p>

<p>And I misguidedly wrote a couple of custom service files that turned out to be
<a href="https://bbs.archlinux.org/viewtopic.php?id=146207" title="BBS post on said files">completely unnecessary</a>;
and then I was done.</p>

<p>On all three boxes I rebooted and that was it. The only issue I experienced was
the final shutdown after removing initscripts and before booting up with
systemd. After issuing <code>shutdown -r now</code> the process
hung with a message about a missing <span class="file">inittab</span> file.
In retrospect, I should have added <code>init=/bin/systemd</code> to my kernel parameters
and not unistalled instiscripts until I had booted with systemd. This has
now been added to the
<a href="https://wiki.archlinux.org/index.php/Systemd" title="Archwiki systemd page">systemd wiki page</a>.</p>

<p>Overall, though: no real drama, just a blur of text<sup>2</sup> and then the
login prompt. While I haven't seen a dramatic decrease in boot time,
booting does <em>feel</em> a bit snappier and two of my three machines shutdown
markedly more quickly. Consider me sold.</p>

<p>That brings me back to the decision to opt for a pure systemd approach, rather than
hanging on to a completely eviscerated <span class="file">/etc/rc.conf</span>. The
Arch community has been told that the intention is to
<a href="https://bbs.archlinux.org/viewtopic.php?pid=1133957#p1133957" title="BBS post by tomegun">support the rc.conf format forever</a>;
I can't help but think this is a mistake. In the same way that
<a href="https://wiki.archlinux.org/index.php/Pacman#Partial_upgrades_are_unsupported" title="Pacman entry on Arch Wiki">partial upgrades are unsupported</a>,
I think that systemd is Arch's inevitable future and the community should be encouraged to accept that, <code>Syu</code> and
move on…</p>

<p>Having said that, I appreciate the consideration shown by the developers in wanting to assure
people that their choice would continue to be catered for; and perhaps, over time, people still
using initscripts will be regarded with the same sense of wry amusement as those who still show
up from time to time with <code>hal</code> in their <code>DAEMONS</code> line.</p>

<h3>Update 4/8/12</h3>

<p>Tom Gunderson, the developer who looks after this part of Arch, has clarified the
comment about the long term support for initscripts. As comments are hosted on
a third-party paltform, I thought that it should be included in the body of the
post.</p>

<p><blockquote><p>Just a clarification: regarding the (probably very unwise) promise of "supporting &lt;span="file">rc.conf</span> forever", the intended meaning was that initscripts will support the syntax, not that initscripts themselves will always stay around (nor that systemd will gain support for the syntax in case initscripts is dropped).</p></p><p><p>At the moment systemd <strong>does</strong> support <span class="file">rc.conf</span> (when installed in conjunction with initscripts), but this is meant as a transitional measure only, and will likely go away eventually (though probably not soon).</p></blockquote></p>

<h4>Notes</h4>

<ol>
<li>Note this approach will <em>remove</em> sysvinit and initscripts and <code>mv /etc/rc.conf{,.pacsave}</code>.</li>
<li>Make sure you remove <code>quiet</code> from your kernel parameters for your first systemd
boot so you can see that everything starts correctly…</li>
</ol>


<p>Creative commons image on Flickr by
<a href="http://www.flickr.com/photos/sovietuk/486119799/" title="leap by rick harrison">Tricky</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sharing Mercurial Patchsets]]></title>
    <link href="http://jasonwryan.github.com/blog/2012/07/26/guards/"/>
    <updated>2012-07-26T18:48:00+12:00</updated>
    <id>http://jasonwryan.github.com/blog/2012/07/26/guards</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://dl.dropbox.com/u/261312/Blog-images/guard.jpg" title="'On Guard image on Flickr'" >
In my last post, on
<a href="http://jasonwryan.com/blog/2012/07/24/queues/" title="You should read it…">Mercurial Queues</a>,
I outlined how you might use MQ to manage a
<a href="http://dwm.suckless.org/" title="Dynamic window manager">dwm</a> patchset.
Mercurial makes this process ridiculously easy, and this functionality is more
than enough to recommend it. However, where I think it really gets interesting
is when you share that same patchset across multiple machines and are easily
able to customize which patches in the queue are applied, based upon the
particular machine you are building dwm on.</p>

<p>For example, in my case I use dwm on all three of my machines: my desktop at home,
my laptop at work and my EeePC. Given the nature of each of these three machines,
though, I want a slightly different stack of patches applied. These differences
might extend only to particular rules applied in <span class="file">config.def.h</span>
based upon the number of tags I use, or the different applications that I run
at home as opposed to at work.</p>

<p>In any event, what I want to be able to do is maintain
<a href="http://pikacode.com/jasonwryan/dwm-patchset/files/default" title="Patchset on Pikacode">a single patchset</a>
in a mercurial repository, clone it to all my machines and then, using MQ,
filter which specific patches are applied. This is all possible using a killer
feature of MQ called
<a href="http://hgbook.red-bean.com/read/advanced-uses-of-mercurial-queues.html%20'Advanced%20uses%20of%20MQ%20in%20the%20Mercurial%20book">guards</a>.
Guards allow you to conditionally apply patches in a queue. Essentially, in
a queue, you “tag” a patch with a guard and—depending on whether or not the
guard is positive (to be applied), or negative (to be skipped)—when you
<code>hg qpush -a</code> MQ takes care of applying the correct patches in the queue.</p>

<p>So, in the case of my work laptop, I begin by cloning dwm and intializing
a patch queue:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'><span class="nb">cd </span>Build/
</span><span class='line'>hg clone http://hg.suckless.org/dwm
</span><span class='line'>hg qinit -c
</span></code></pre></div></figure></notextile></div></p>

<p>I setup my <span class="file">.hgrc</span> within the patches directory so that
it points at the correct mercurial repository:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>.hg/patches/.hg/hgrc </span></figcaption>
 <div class="highlight"><pre><code class='sh'><span class='line'> <span class="c"># Mercurial config file</span>
</span><span class='line'><span class="o">[</span>ui<span class="o">]</span>
</span><span class='line'><span class="nv">username</span> <span class="o">=</span> jasonwryan &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;&amp;#x6d;&amp;#97;&amp;#105;&amp;#108;&amp;#x74;&amp;#x6f;&amp;#58;&amp;#106;&amp;#x61;&amp;#x73;&amp;#111;&amp;#110;&amp;#x77;&amp;#114;&amp;#x79;&amp;#x61;&amp;#x6e;&amp;#64;&amp;#103;&amp;#109;&amp;#97;&amp;#x69;&amp;#x6c;&amp;#x2e;&amp;#99;&amp;#111;&amp;#109;&quot;</span>&gt;&amp;#x6a;&amp;#97;&amp;#x73;&amp;#111;&amp;#x6e;&amp;#119;&amp;#114;&amp;#121;&amp;#x61;&amp;#x6e;&amp;#64;&amp;#x67;&amp;#109;&amp;#x61;&amp;#x69;&amp;#x6c;&amp;#x2e;&amp;#x63;&amp;#111;&amp;#109;&lt;/a&gt;
</span><span class='line'><span class="nv">ssh</span> <span class="o">=</span> ssh -i ~/.ssh/bb -C
</span><span class='line'><span class="o">[</span>paths<span class="o">]</span>
</span><span class='line'><span class="nv">default</span> <span class="o">=</span> ssh://hg@pikacode.com/jasonwryan/dwm-patchset
</span></code></pre></div></figure></notextile></div></p>

<p>Then I pull down my dwm patchset from the mercurial repository
with <code>hg pull</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>pulling from ssh://hg@pikacode.com/jasonwryan/dwm-patchset
</span><span class='line'>requesting all changes
</span><span class='line'>adding changesets
</span><span class='line'>adding manifests
</span><span class='line'>adding file changes
</span><span class='line'>added 6 changesets with 16 changes to 10 files
</span><span class='line'><span class="o">(</span>run <span class="s1">&#39;hg update&#39;</span> to get a working copy<span class="o">)</span>
</span></code></pre></div></figure></notextile></div></p>

<p>After I update my local repo,<sup>1</sup> I can see the full patchset with
<code>hg qseries</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>setup.makefile
</span><span class='line'>base.config.customizations
</span><span class='line'>statuscolours
</span><span class='line'>cycle
</span><span class='line'>push
</span><span class='line'>bstack
</span><span class='line'>centurion.config
</span></code></pre></div></figure></notextile></div></p>

<p>Then, as I decribed in my previous post, I make the changes to
<span class="file">config.def.h</span> that are specific to this
machine:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>hg qnew veles.config
</span><span class='line'> <span class="c"># “hack, hack, hack…”</span>
</span><span class='line'>hg qrefresh
</span><span class='line'>hg qcommit -m <span class="s1">&#39;Adaptions for Veles&#39;</span>
</span></code></pre></div></figure></notextile></div></p>

<p>My patchset now has an additional patch in it:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>┌─<span class="o">[</span>Veles ~/Build/dwm<span class="o">]</span>
</span><span class='line'>└─╼ hg qseries
</span><span class='line'>setup.makefile
</span><span class='line'>base.config.customizations
</span><span class='line'>statuscolours
</span><span class='line'>cycle
</span><span class='line'>push
</span><span class='line'>bstack
</span><span class='line'>centurion.config
</span><span class='line'>veles.config
</span></code></pre></div></figure></notextile></div></p>

<p>This is where guards come in to play. If I wasn't interested in sharing
the patchset, it would just be a matter of deleting the patch for Centurion.
However, what I want to do is direct MQ to ignore that specific patch
when applying the queue. I do that by creating a negative guard and then
activating it:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>hg qguard centurion.config -- -block
</span><span class='line'>hg qselect block
</span><span class='line'>number of unguarded, unapplied patches has changed from 8 to 7
</span></code></pre></div></figure></notextile></div></p>

<p>That's it! Adding a verbose flag to <code>hg qseries</code><sup>2</sup> will print out the
patchset and the accompanying guard status:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>┌─<span class="o">[</span>Veles ~/Build/dwm<span class="o">]</span>
</span><span class='line'>└─╼ hg qseries -v
</span><span class='line'>0 U setup.makefile
</span><span class='line'>1 U base.config.customizations
</span><span class='line'>2 U statuscolours
</span><span class='line'>3 U cycle
</span><span class='line'>4 U push
</span><span class='line'>5 U bstack
</span><span class='line'>6 G centurion.config
</span><span class='line'>7 U veles.config
</span></code></pre></div></figure></notextile></div></p>

<p>The real test, of course, is pushing the patchset onto the fresh
dwm code:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>┌─<span class="o">[</span>Veles ~/Build/dwm<span class="o">]</span>
</span><span class='line'>└─╼ hg qpush -a
</span><span class='line'>applying setup.makefile
</span><span class='line'>applying base.config.customizations
</span><span class='line'>applying statuscolours
</span><span class='line'>applying cycle
</span><span class='line'>applying push
</span><span class='line'>applying bstack
</span><span class='line'>skipping centurion.config - guarded by <span class="s1">&#39;-block&#39;</span>
</span><span class='line'>applying veles.config
</span><span class='line'>now at: veles.config
</span></code></pre></div></figure></notextile></div></p>

<p>How cool is that? One central patchset, applied conditionally depending
upon the machine you are using at the time.</p>

<h4>Notes</h4>

<ol>
<li>Any guards applied on other machines will be present in the newly
pulled <span class="file">series</span> file: these conflicts will need
to be manually merged…</li>
<li>The options for all of the <code>hg</code> commands can be read with
<code>hg -v help $command</code>. For those related to queues, just prepend
a <code>q</code> to <code>$command</code>.</li>
</ol>


<p>Creative Commons image on Flickr by
<a href="http://www.flickr.com/photos/alternatewords/4903560373/" title="On Guard on Flickr">Thorsten Becker</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Mercurial Queues]]></title>
    <link href="http://jasonwryan.github.com/blog/2012/07/24/queues/"/>
    <updated>2012-07-24T19:18:00+12:00</updated>
    <id>http://jasonwryan.github.com/blog/2012/07/24/queues</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://dl.dropbox.com/u/261312/Blog-images/queue.jpg" title="'Queue image on Flickr'" >
Over the last week or so, I have finally gotten around to digging into the whole concept of
using
<a href="http://hgbook.red-bean.com/read/managing-change-with-mercurial-queues.html" title="Chapter on queues in the Mercurial book">Mercurial Queues</a>
to manage patches against an upstream project; in my case
<a href="http://dwm.suckless.org" title="The truly suckless window manager…">dwm</a>.<sup>1</sup>
Essentially, this mercurial extension helps you manage a stack of patches on
top of a directory tree. This gives you quite a lot of fine-grained control
over your patchset and assists immeasurably with automating the application of
patches when the underlying codebase changes.</p>

<p>After having played around with queues for the last couple of days, I am quite
impressed: both the concept and the execution are simple and powerful. The concept
of Mercurial Queues is best described in the Mercurial book: the aptly titled,
<em>Mercurial: The Definitive Guide</em>:<sup>2</sup></p>

<p><blockquote><p>MQ's marriage of distributed revision control with patches makes it much easier to isolate your work. Your patches live on top of normal revision history, and you can make them disappear or reappear at will. If you don't like a patch, you can drop it. If a patch isn't quite as you want it to be, simply fix it—as many times as you need to, until you have refined it into the form you desire.</p><footer><strong>Mercurial, The Definitive Guide</strong> <cite><a href='http://hgbook.red-bean.com/read/managing-change-with-mercurial-queues.html'>hgbook.red-bean.com/read/&hellip;</a></cite></footer></blockquote></p>

<p>I followed Filippo Negroni's excellent
<a href="http://dwm.suckless.org/customisation/patch_queue" title="Step-by-step guide">tutorial on the dwm site</a>
to setup my own
<a href="http://pikacode.com/jasonwryan/dwm-patchset/files/default" title="Patchset on Pikacode">dwm patchset</a>
based on
<a href="http://hg.suckless.org/dwm" title="dwm hg repository">tip</a>, and the process was
surprisingly straightforward; the only caveat being it is a good idea to plan
quite carefully what changes you want in each particular patch. Once I had
completed the setup, it got me thinking about the fact that the final install
is done without <code>pacman</code>, just using <code>make install</code>. And, as a proof-of-concept
more than anything else, I wondered whether this functionality could be used
with <code>makepkg</code>.<sup>3</sup></p>

<p>Turns out, as you might expect with Arch, it was not much of a job to set it
up at all.</p>

<p><strong>Note</strong>: this doesn't mean I think it is a good idea; I was just interested
to see <em>if</em> it could be done and <em>how</em> it would work once it was set up. For something
like dwm, this is definitely a case of introducing a huge amount of complexity for
no apparent benefit (for those people running Gnome, this may quite appeal to you…).</p>

<p>I have a
<a href="http://pikacode.com/jasonwryan/Centurion/file/default/Build/dwm-hg/PKGBUILD" title="If you must…">working PKGBUILD</a>
that you can use if you want to follow along at home. Once you have downloaded
it into <span class="file">dwm-hg/</span>, run <code>makepkg</code> to clone the dwm
repository and build the binary.  Then you need to make sure that the mercurial
queue extension is enabled, so your <span class="file">.hgrc</span> needs to
contain:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'><span class="o">[</span>extensions<span class="o">]</span>
</span><span class='line'>hgext.mq <span class="o">=</span>
</span></code></pre></div></figure></notextile></div></p>

<p>Now, you need to setup the queue repository. We do this in <code>$srcdir</code>, which
is <span class="file">dwm-hg/src/dwm</span>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>hg qinit -c
</span></code></pre></div></figure></notextile></div></p>

<p>The next step is to start applying the various patches that you want to comprise
your patchset on dwm. In my case that is base customizations to <span class="file">config.def.h</span>
and three other patches:
<a href="http://pikacode.com/jasonwryan/dwm-patchset/file/default/statuscolours" title="Patch in mercurial queue">statuscolours</a>,
<a href="http://pikacode.com/jasonwryan/dwm-patchset/file/default/cycle" title="ditto">cycle</a>, and
<a href="http://pikacode.com/jasonwryan/dwm-patchset/file/default/push" title="etc…">push</a>.
There are other patches in my repository, one of which patches the appropriate
settings for an Arch build in the
<a href="http://pikacode.com/jasonwryan/dwm-patchset/file/default/setup.makefile" title="Arch settings for Makefiles">relevant makefiles</a>.
This is taken care of by the PKGBUILD in this case.</p>

<p>From here, it is very much as Filippo describes it in his tutorial: make
some changes, add them to the queue and rinse and repeat:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>hg qnew base.customizations
</span><span class='line'> <span class="c"># “hack hack hack…”</span>
</span><span class='line'>hg qrefresh
</span><span class='line'>hg qcommit -m <span class="s1">&#39;Added changes to config.def.h to customize&#39;</span>
</span></code></pre></div></figure></notextile></div></p>

<p>After committing each of your changes as a discrete patch, you can review the queue
with <code>hg qseries</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>┌─<span class="o">[</span>Centurion ~/Build/dwm-hg/src/dwm<span class="o">]</span>
</span><span class='line'>└─╼ hg qseries
</span><span class='line'>config.customizations
</span><span class='line'>statuscolours
</span><span class='line'>cycle
</span><span class='line'>push
</span></code></pre></div></figure></notextile></div></p>

<p>And <code>hg qapplied</code> will tell you which of the patches is currently
applied in the working repository; at this stage the list should look
the same as that in <code>hg qseries</code>. The next step is to remove all of the
patches from the queue so that we have a clean repository:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>┌─<span class="o">[</span>Centurion ~/Build/dwm-hg/src/dwm<span class="o">]</span>
</span><span class='line'>└─╼ hg qpop -a
</span><span class='line'>popping push
</span><span class='line'>popping cycle
</span><span class='line'>popping statuscolours
</span><span class='line'>popping config.customizations
</span><span class='line'>patch queue now empty
</span></code></pre></div></figure></notextile></div></p>

<p>Should you need to edit a patch, it is simply a matter of popping
to that spot in the stack (you can do so by name or by index
number, beginning at 0):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>┌─<span class="o">[</span>Centurion ~/Build/dwm-hg/src/dwm<span class="o">]</span>
</span><span class='line'>└─╼ hg qpop config.customizations
</span><span class='line'>popping push
</span><span class='line'>popping cycle
</span><span class='line'>popping statuscolours
</span><span class='line'>now at: config.customizations
</span><span class='line'> <span class="c"># “hack hack hack…”</span>
</span><span class='line'>hg qrefresh
</span><span class='line'>hg qpush -a
</span></code></pre></div></figure></notextile></div></p>

<p>Once you are satisfied with the state of the stack, remove all of the
patches to return to the original clean working directory and <code>cd</code> back
to <span class="file">dwm-hg/</span>. You can now use <code>makepkg -fi</code> to
rebuild the package and you should see the pushed patches as part of
the output:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'><span class="o">==</span>&gt; Starting build<span class="o">()</span>...
</span><span class='line'><span class="o">==</span>&gt; Pushing queued patchset
</span><span class='line'>applying config.customizations
</span><span class='line'>applying statuscolours
</span><span class='line'>applying cycle
</span><span class='line'>applying push
</span><span class='line'>now at: push
</span><span class='line'>dwm build options:
</span></code></pre></div></figure></notextile></div></p>

<p>…and when you restart dwm, your customizations will be applied.
When new changes are pushed to
<a href="http://hg.suckless.org/dwm" title="dwm mercurial repo">the dwm repo</a>
you can just <code>makepkg -fi</code>, and, if any of the patches fail due
to changes in the underlying code, pop the stack to the failed
patch, rebase the code, <code>hg qrefresh</code> and continue until done.</p>

<p>As I said at the beginning of this post, this isn't a particularly smart way to
use Mercurial Queues, PKGBUILDs or a combination of the two. You are much
better off just cloning dwm to your local repository, initializing a queue
repository and, once you are done setting up your patchset, issuing <code>make &amp;&amp;
sudo make install</code>.</p>

<p>If you have more than one machine, you can easily setup a repository for
your patchset on
<a href="https://bitbucket.org/" title="bitbucket free mercurial hosting">bitbucket</a>
or <a href="http://pikacode.com/" title="Free Mercurial and Git hosting">Pikacode</a>
and host it there: then just pull the patchset queue
from your other boxes and <code>hg qpush -a</code>. If you require a slightly
different patchset for each box, you can use MQ to manage this
process as well. This is where MQ really excels;
I'll cover this in more detail in my next post.</p>

<h4>Notes</h4>

<ol>
<li>See <a href="http://jasonwryan.com/blog/categories/dwm/" title="dwm category in the archives">related dwm posts</a>.</li>
<li>I can't recommend this {book,wiki} highly enough; it is an excellent
example of thorough, accessible documentation.</li>
<li>In the case of something like dwm, this is really irrelevant, as there
is a single tiny binary and a <code>man</code> page, so keeping track of these files on
your system is not an issue at all.</li>
</ol>


<p>Flickr Creative Commons image by
<a href="http://www.flickr.com/photos/bagelmouse/3936852444/" title="Queue image on Flickr">RachelH</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Myth of Breakage]]></title>
    <link href="http://jasonwryan.github.com/blog/2012/07/19/breakage/"/>
    <updated>2012-07-19T19:23:00+12:00</updated>
    <id>http://jasonwryan.github.com/blog/2012/07/19/breakage</id>
    <content type="html"><![CDATA[<p><img class="left" src="https://dl.dropbox.com/u/261312/Blog-images/broken.jpg" title="Image of breakage on Flickr" >
Breakage is one of the memes of the Arch Linux community; it is referenced frequently on the
<a href="https://bbs.archlinux.org/" title="Arch Linux BBS">Arch boards</a> and in the various
<a href="https://wiki.archlinux.org/index.php/IRC_Channels" title="Wiki page listing channels">IRC channels</a>.
It doesn't take newcomers long to realize that, whether something is actually broken or not,
there is always
<a href="http://allanmcrae.com/category/arch-linux/" title="Allan's Blog">someone they can blame</a>.<sup>1</sup></p>

<p>My experience of Arch, over the last three and a bit years, is quite the opposite. I have yet to
experience anything that would qualify as breakage. Sure, there have been bugs, mostly upstream,
and the more frequent moments where I haven't been as diligent as I should, but not once have I
had a machine that was unbootable or otherwise unusable. Arch has, on both my home and work
machines, been incredibly stable and reliable.</p>

<p>For a number of Arch Linux users, however, that was not their experience over the last week when
<a href="http://www.archlinux.org/news/the-lib-directory-becomes-a-symlink/" title="News item on the move">/lib was moved to /usr/lib</a>.
The volume of people on the boards and on IRC reporting unbootable or unusable systems was
remarkable. Remarkable because, despite the fact that the
<a href="http://www.archlinux.org/news/the-lib-directory-becomes-a-symlink/" title="Once more, just in case…">news item</a>, the
<a href="http://www.archlinux.org/news/the-lib-directory-becomes-a-symlink/" title="Arch wiki page on the change">wiki page</a>,
and the <a href="http://mailman.archlinux.org/pipermail/arch-announce/2012-July/000317.html" title="Mail archive">email to arch-announce</a>
all <em>explicitly</em> warned people not to use the <code>--force</code> option,<sup>2</sup> so many did.</p>

<p><span class='pullquote-right' data-pullquote='90% of the breakage was because people either didn&#8217;t see, or disregarded, that advice. '>
Sadly, these red-boxed warnings were apparently not enough.
90% of the breakage was because people either didn't see, or disregarded, that advice.
The remaining 10% were either in a hurry and didn't pay close attention to how
to deal with any leftover files in <span class="file">/lib</span> or <code>rm -rf</code>'ed
in the wrong directory.
<a href="http://www.gnu.org/fun/jokes/shit-happens.html" title="GNU Humour…">Accidents happen</a>.
</span></p>

<p>What I am interested in is the people who fell into the much larger category,
and principally those that didn't see any of the communications about this
change in advance of updating and reasoned, based on a recent change that did
<a href="http://www.archlinux.org/news/filesystem-upgrade-manual-intervention-required-1/" title="News item on filesystem upgrade">require the use of --force</a>,
that this was the most expedient way to resolve <code>pacman</code> reporting conflicting
files.</p>

<p>Some context. The <code>glibc</code> update was released to the
<a href="https://wiki.archlinux.org/index.php/Testing#.5Btesting.5D" title="Wiki entry on Testing">[testing] repository</a>
in the first week of July: and there were a couple of long threads<sup>3</sup>
about issues and fixes before it was pushed to [core]. By the time the
package was released for general consumption, it had been tested and the
developers had obviously planned how to make what is a fundamental system
change with a minimal amount of user intervention.  I think that, given the
magnitude of the challenge, they did a superb job.</p>

<p>How then did it go so wrong for so many?<sup>4</sup> To answer that, you have
to consider the nature of Arch. It's <em>not</em> the sort of distribution where you
install it and then just go on your merry way, installing
<a href="http://oswatershed.org/" title="It's SCIENCE, Jim">the least obsolete packages</a>,
revelling in the speed of the package manager and generally being
a 1337 h@x0r…</p>

<p>Successfully running a rolling release like Arch, irrespective of your level of
competence, means staying in touch with what is happening—in
<a href="http://kmkeen.com/pacmatic/" title="Pacman wrapper that pulls news updates">some form or other</a>.
Subscribing to the arch-general <acronym title="Mailing list">ML</acronym>,
visiting the forums, idling in IRC; somehow remaining connected to what is
going on in the community so that you don't blindly update one day and wonder
why your system is broken.</p>

<p>This strikes me as a real strength; by design Arch encourages its users to
participate in the community. Even if you are only lurking, over time you will
inevitably find yourself posting in a thread, responding to an email, editing
the wiki,
<a href="http://jasonwryan.com/blog/2012/03/09/aurphan/" title="Post on aurphan">adopting an orphaned package</a>—increasingly
getting involved and contributing.</p>

<p>This level of involvement is not for everyone. Some may find it onerous or
a waste of their time. That's fine. There are any number of other distros
that do not ask for this level of commitment. The <em>quid pro quo</em> for
running Arch, though, is that you are prepared, in whatever shape or form
best works for you, to give something back; at the very least, that is your
attention.</p>

<h4>Notes</h4>

<ol>
<li>This is, of course, a reference to said Arch meme: Allan is one
of the developers who has contributed an enormous amount to Arch and the fact
that his IRC nick is <code>allanbrokeit</code> is purely coincidental.</li>
<li>At the end of 2011, the short option <code>-f</code>
<a href="http://mailman.archlinux.org/pipermail/pacman-dev/2011-October/014589.html" title="Post to ML anouncing change">was removed</a>
from <code>pacman</code> so “it at least makes people read the word 'force' and maybe they
will have some sense to step back and think about what they are doing first.”</li>
<li><a href="https://bbs.archlinux.org/viewtopic.php?id=144620">https://bbs.archlinux.org/viewtopic.php?id=144620</a> and
<a href="https://bbs.archlinux.org/viewtopic.php?id=144616">https://bbs.archlinux.org/viewtopic.php?id=144616</a></li>
<li>Relatively speaking. In situations like this, the overwhelming amount of traffic
is about what went wrong, not people posting to say they had no difficulties whatsoever…</li>
</ol>


<p>Creative Commons image on Flickr from
<a href="http://www.flickr.com/photos/daviddoctorrose/431786001/" title="Broken keyboard on Flickr">djeucalyptus</a></p>
]]></content>
  </entry>
  
</feed>
