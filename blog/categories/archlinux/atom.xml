<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: archlinux | jasonwryan.com]]></title>
  <link href="http://jasonwryan.github.com/blog/categories/archlinux/atom.xml" rel="self"/>
  <link href="http://jasonwryan.github.com/"/>
  <updated>2013-06-26T13:59:38+12:00</updated>
  <id>http://jasonwryan.github.com/</id>
  <author>
    <name><![CDATA[Jason Ryan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Asking for Help]]></title>
    <link href="http://jasonwryan.github.com/blog/2013/06/15/asking/"/>
    <updated>2013-06-15T10:39:00+12:00</updated>
    <id>http://jasonwryan.github.com/blog/2013/06/15/asking</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://dl.dropbox.com/u/261312/Blog-images/bowl.jpg" title="'Flickr image of Begging Bowl'" >
Another great peristaltic movement in Arch's rolling release digestive system
happened over the last couple of weeks, the move of all binaries
<a href="https://www.archlinux.org/news/binaries-move-to-usrbin-requiring-update-intervention/" title="Arch News update">to /usr/bin</a>.
This move had been foreshadowed for several months and, despite announcements
on the front page of the Arch website, the mailing lists and the release going
through [testing] and the resulting thread on the forums, there was still a
surprising amount of carnage<sup>1</sup> in it's wake.</p>

<p>In the aftermath (although I expect that it will take some months for it to
completely pass through the system), what struck me was not so much the variety
and ingenuity of the ways people had managed to break their installs<sup>2</sup>
as how they approached the community seeking help afterwards.</p>

<p>There are already some fine guides on how to do this, notably
ESR's <a href="http://www.catb.org/esr/faqs/smart-questions.html" title="Just read it…">How to ask Questions the Smart Way</a>
and—specifically for Arch—zendeavour's
<a href="http://redd.it/tjjwr" title="On Reddit">troubleshooting for newcomers</a>;
this isn't an attempt to add or expand on that genre. Rather, it is
a look at a subset of attitudes that some people adopt<sup>3</sup>
as they seek the assistance of the community.</p>

<p>The first is the <strong>blamer</strong>. The proponent of the  “all-guns-blazing” approach.
I'll paraphrase, but there are enough examples on the boards to illustrate the
point: “my system can't boot, it's not my fault and I am here to let you know
that I am unhappy and demand recourse.” This is, unquestionably, the most
puzzling of all the strategies. It is often coupled with the (sadly almost
always empty) threat to abandon the distro and it's apparently beleaguered
community.</p>

<p>Puzzling because I have yet to encounter a single situation in life, online
or off, where opening with hostility and blame is an intelligent approach to
seeking assistance. If you are going to adopt this approach, please supersize
to “rage quit” and expend your energy actually delivering on your threat.</p>

<p>The next is the <strong>wheedler</strong>. Less objectionable than the incendiary approach,
it is nonetheless similarly ineffective. Wheedlers are distinguished by
peppering their posts liberally with declarations of their ineptitude and
“noobness”, in the mistaken belief that this will engender a wave of sympathy
prior to soothing hand-holding and spoon-feeding. There is a strong correlation
between this behaviour and the various types of
<a href="http://jasonwryan.com/blog/2012/03/17/vampires/" title="Post on the taxonomy of vampires">help vampirism</a>.</p>

<p>Wheedling won't lead to quicker, or more informed, advice and assistance; in
all likelihood it will just discourage others from helping because
they can see that rewarding this sort of behaviour has a longer-term
deleterious impact on the health of the community.</p>

<p>Then there is the <strong>Vulcan</strong>. A curiosity more than an annoyance, these
people seem to inhabit some sort of adolescent fantasy land where the Internet
is a venue for them to revel in their almost superhero-like powers of technical
<em>awesomeness</em>; said powers manifesting to others as a sort of benign
cluelessness.</p>

<p>Their posts are invariably brief and completely devoid of relevant detail to the
point of cryptic because, “hey, we all <em>know</em> what this issue is,” and are
littered with smilies and that stupid emoticon with the sunglasses. Rather than
actually describing their problem, they want people to think that, by a process
of <a href="http://en.memory-alpha.org/wiki/Vulcan_mind_meld" title="There is a Star Trek wiki?">mind-melding</a>,
other “hackers” will intuit the subtle depth and intricacy of the issue and
then type out a detailed step-by-step guide of how to solve it.</p>

<p>Finally, there is the <strong>conspiracist</strong>. These malcontents see every
significant change in Arch as being part of a wider agenda to corrupt the purity
of the UNIX® philosophy. They also tend to blame
<a href="https://en.wikipedia.org/wiki/Lennart_Poettering" title="Lennarts wikipedia page">Lennart Poettering</a>
for <em>everything</em>. These unfortunates are clearly already suffering such mental anguish
trying to reconcile their obsessiveness about the past with a rolling
release that they deserve our pity more than our contempt (but I am equally
happy providing either)…</p>

<p>As I said, these are fortunately just a subset and very much represent the
minority of attitudes.  The vast majority tend to be aware that, at
one time or another, <em>everyone</em> will need some help to solve a problem.
Therefore it is best to approach it in a matter-of-fact way, using the practical
guidance on asking questions on a technical forum, and with a degree of humility
and a willingness to learn from the people who are prepared to share their
knowledge and experience.</p>

<h4>Notes</h4>

<ol>
<li>Where “carnage” should be understood as a minor PEBKAC epidemia…</li>
<li>From shutting down mid-update (because a reboot fixes <em>everything</em>) to
still using <code>consolekit</code>, <code>initscripts</code> and <code>grub-legacy</code>: all deprecated some time
ago.</li>
<li>I resisted linking to specific posts on the boards to provide actual examples,
the more motivated among you will find them without difficulty.</li>
</ol>


<p>Flickr Creative Commons image by
<a href="http://www.flickr.com/photos/buddhist_fox/4795942625/">Buddhist Fox</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Replacing Google Reader]]></title>
    <link href="http://jasonwryan.github.com/blog/2013/05/25/greader/"/>
    <updated>2013-05-25T09:10:00+12:00</updated>
    <id>http://jasonwryan.github.com/blog/2013/05/25/greader</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://dl.dropbox.com/u/261312/Blog-images/commafeed.png" title="'CommaFeed Logo'" >
I have been using <a href="https://en.wikipedia.org/wiki/Google_reader" title="Wikipedi page">Google Reader</a>
everyday since I first discovered the service over seven years ago. It is my
primary source of news and information and the announcement that Google is, on July 1 this year,
set to <a href="http://googlereader.blogspot.ca/2013/03/powering-down-google-reader.html" title="Official announcemet on Google Blog">shut down Reader</a>
was something considerably more than just an inconvenience for me.</p>

<p>Over the years, I had looked at other <acronym title="Rich Site Summary">RSS</acronym>
readers but, for a variety of reasons, had invariably found that the speed,
simplicity and flexibility that Google Reader offered meant that any dalliances
were unsatisfactory and short-lived. I resigned myself to having to settle for
an inferior alternative, rather than moving to a genuine replacement.</p>

<p>On the recommendation of <a href="https://pinboard.in/" title="Not so-social bookmarking">@pinboard</a>,
I first signed up for a premium account at
<a href="https://www.newsblur.com/" title="NewsBlur website">NewsBlur</a>. It is open source and,
given the recommendation from Maciej<sup>1</sup>, I was hopeful that it would
bridge the gap. Newsblur is a good service (especially considering the rush of
signups in the days after the Google announcement), but it has a couple of
critical weaknesses for me: no search (yes, you read that correctly—there is <em>no
way to search through your feeds</em>) and, less importantly but just as annoying,
occasionally sluggish performance.</p>

<p>After a couple of weeks using NewBlur I happily stumbled across
<a href="https://www.commafeed.com/" title="CommaFeed homepage">CommaFeed</a>, a
Reader clone that emulates the austere minimalism of Google Reader. Apart from
the fact that it is open source, the other aspect that attracted me to it
was the ability to run it on Red Hat's Platform as a Service offering,
<a href="http://www.openshift.com/" title="Red Hat PaaS">OpenShift</a>.</p>

<p>The README on the <a href="https://github.com/Athou/commafeed" title="CommaFeed repo">Github repo</a>
explains how to set it all up. Unfortunately, due to an
<a href="https://github.com/Athou/commafeed/issues/91" title="OpenShift fails silently">open issue</a>,
some manual intervention is required, but it is still a very
straightforward and painless process to get your own instance of CommaFeed up
and running.</p>

<p>Creat an OpenShift account, log in and add the JBoss 6.0 application (or
cartridge as it is called on OpenShift) and the MySQL cartridge. Once your setup
is created, add your public <acronym title="Secure Shell">SSH</acronym> key and,
under your <code>My Applications</code> tab, copy down your Git repo address, which will be
of the form:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>ssh://76758382475ef809976543@<span class="nv">$appname</span>-<span class="nv">$namespace</span>.rhcloud.com/~/git/feeds.git/
</span></code></pre></div></figure></notextile></div></p>

<p>Then you need to make a local clone of CommaFeed and push it to the Red Hat
server:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>git clone https://github.com/Athou/commafeed.git
</span><span class='line'><span class="nb">cd </span>commafeed&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;add OpenShift as a repo&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;git remote add openshift -f ssh://76758382475ef809976543@<span class="nv">$appname</span>-<span class="nv">$namespace</span>.etc…
</span><span class='line'>git merge openshift/master -s recursive -X ours
</span><span class='line'>git push openshift master
</span></code></pre></div></figure></notextile></div></p>

<p>This will then trigger a series of hooks that build the application and restart
the server. If everything goes well you will see something like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>remote: <span class="o">[</span>INFO<span class="o">]</span> ------------------------------------------------------------------------
</span><span class='line'>remote: <span class="o">[</span>INFO<span class="o">]</span> BUILD SUCCESS
</span><span class='line'>remote: <span class="o">[</span>INFO<span class="o">]</span> ------------------------------------------------------------------------
</span><span class='line'>remote: <span class="o">[</span>INFO<span class="o">]</span> Total <span class="nb">time</span>: 3:18.195s
</span><span class='line'>remote: <span class="o">[</span>INFO<span class="o">]</span> Finished at: Mon May 20 03:21:37 EDT 2013
</span><span class='line'>remote: <span class="o">[</span>INFO<span class="o">]</span> Final Memory: 42M/185M
</span><span class='line'>remote: <span class="o">[</span>INFO<span class="o">]</span> ------------------------------------------------------------------------
</span><span class='line'>remote: Running .openshift/action_hooks/build
</span><span class='line'>remote: Running .openshift/action_hooks/deploy
</span><span class='line'>remote: <span class="nv">hot_deploy_added</span><span class="o">=</span><span class="nb">false</span>
</span><span class='line'>remote: MySQL already running
</span><span class='line'>remote: Found 127.12.712.712:8080 listening port
</span><span class='line'>remote: Done
</span><span class='line'>remote: Running .openshift/action_hooks/post_deploy
</span><span class='line'>To ssh://76758382475ef809976543@<span class="nv">$appname</span>-<span class="nv">$namespace</span>.rhcloud.com/~/git/feeds.git/
</span></code></pre></div></figure></notextile></div></p>

<p>You now have CommaFeed successfully running on OpenShift. After a couple of
minutes, visit the public <acronym title="Unique Resource Locator">URL</acronym>
and you will be able to login to your CommaFeed instance. Updating your
CommaFeed is as simple as pulling to your local repo, merging and
then pushing to <code>openshift master</code>.</p>

<p>Importing directly from Google Reader still seems broken (I was  getting
errors from builds late this week), but if you import from an existing <code>.opml</code>
or <code>.xml</code> file you will see CommaFeed in all it's glory:</p>

<p><img class="left" src="http://dl.dropbox.com/u/261312/Blog-images/commafeed_screen.png" title="'ComaFeed screenshot'" ></p>

<p>As you can see, it is remarkably similar to the Google Reader interface; a
clean, minimalist design that is focussed—quite rightly—on the content. There
is an option to load your own <code>.css</code> if you want to apply some additional
styling, but for me the base style is just about perfect.</p>

<p>More impressively, in the week or so that I have been using CommaFeed, the
developer,
<a href="https://github.com/Athou" title="Athou on Github">Athou</a>, has been committing
enhancements and bug fixes several times <em>a day</em>; almost every night,
I have pushed changes to OpenShift, reloaded my browser and found a
smoother, enhanced feed reader with additional functionality; it is
literally growing in leaps and bounds, and is a great reminder of the power
of open source<sup>2</sup>.</p>

<p>The performance of OpenShift has also been solid; feeds are delivered
seemingly instantaneously and, apart from the slight lag after restarting
the application, I haven't experienced any issues whatsoever in terms
of availability.</p>

<p>There are still a couple of areas where CommaFeed can be improved. Most
notably, there is an open feature request for a
<a href="https://github.com/Athou/commafeed/issues/54" title="Github Issue">mobile friendly CSS</a>
and this is badly needed, the site is pretty much unusable on my phone. With
any luck, some enterprising Android developer will build a CommaFeed app (for
which I would happily pay good money)…</p>

<p>In any event, if you are looking for a Google Reader replacement, try
running CommaFeed (either on your own server or one of Red Hat's); for
a project that is only a couple of months old, it has covered a
tremendous amount of ground and will undoubtedly continue to grow
and improve.</p>

<h4>Notes</h4>

<ol>
<li>In conjunction with his great advice about not being a
<a href="http://blog.pinboard.in/2011/12/don_t_be_a_free_user/" title="Pinboard blog">free user</a>.</li>
<li>The <a href="http://feeds-jwr.rhcloud.com/#/feeds/help" title="About and Help page">about page</a>
has a donate button: if you want to support an application which I have no doubt
will soon be even better than Google Reader, you might want to use it.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacking PKGBUILDs]]></title>
    <link href="http://jasonwryan.github.com/blog/2013/05/18/pkgbuilds/"/>
    <updated>2013-05-18T10:10:00+12:00</updated>
    <id>http://jasonwryan.github.com/blog/2013/05/18/pkgbuilds</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://dl.dropbox.com/u/261312/Blog-images/woodcutting.jpg" title="'Cutting wood'" >
I posted a couple of weeks ago about
<a href="http://jasonwryan.com/blog/2013/03/29/vim/" title="Post on Vim">Building Vim</a> and how,
using <a href="https://wiki.archlinux.org/index.php/Abs" title="Arch Build System on the Wiki">ABS</a>
and <code>makepkg</code> it is possible to customize packages in the repositories to suit your
individual requirements, in that case with a specific feature set.</p>

<p>One of Arch's real strengths is in the flexibility that <code>makepkg</code> and PKGBUILDs provide
the community; the ability to adapt official packages—or unofficial ones in the
<a href="https://aur.archlinux.org/" title="Arch User Repository">AUR</a>—as you see fit. As PKGBUILDs
are just shell scripts, the entry level to start playing around with them is quite
low<sup>1</sup>.</p>

<p>A fairly standard, and simple, example of the type of customization that I might make
is with <a href="http://tools.suckless.org/dmenu/" title="dmenu page">dmenu</a>, the suckless dynamic
menu, where the
<a href="https://www.archlinux.org/packages/community/x86_64/dmenu/" title="Arch package">standard package</a>
in the Arch repositories is not patched for Xft support. There is a patch for this on the
<a href="http://tools.suckless.org/dmenu/patches/xft" title="Xft patch on suckless.org">suckless wiki</a>, so it
is just a case of making the requisite changes in the PKGBUILD from ABS and building it.</p>

<p>As you can see from the <code>diff</code> below, there is not a lot involved in this exercize; essentially,
adding <code>libxft</code> as a dependency, sourcing the patch from the suckless site (and including the
hash for it), and then in the <code>build</code> function ensuring that the patch is applied and the
Makefile updated with the new library:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='diff'><span class='line'><span class="gd">--- PKGBUILD   2013-05-18 09:33:07.156328812 +1200</span>
</span><span class='line'><span class="gi">+++ PKGBUILD   2012-11-14 09:25:15.915335588 +1300</span>
</span><span class='line'><span class="gu">@@ -11,16 +6,22 @@</span>
</span><span class='line'> pkgdesc=&quot;A generic menu for X&quot;
</span><span class='line'> url=&quot;http://tools.suckless.org/dmenu/&quot;
</span><span class='line'> arch=(&#39;i686&#39; &#39;x86_64&#39;)
</span><span class='line'><span class="gi">+groups=(&#39;modified&#39;)</span>
</span><span class='line'> license=(&#39;MIT&#39;)
</span><span class='line'><span class="gd">-depends=(&#39;sh&#39; &#39;libxinerama&#39;)</span>
</span><span class='line'><span class="gd">-source=(http://dl.suckless.org/tools/$pkgname-$pkgver.tar.gz)</span>
</span><span class='line'><span class="gd">-md5sums=(&#39;9c46169ed703732ec52ed946c27d84b4&#39;)</span>
</span><span class='line'><span class="gi">+depends=(&#39;sh&#39; &#39;libxinerama&#39; &#39;libxft&#39;)</span>
</span><span class='line'><span class="gi">+source=(http://dl.suckless.org/tools/$pkgname-$pkgver.tar.gz</span>
</span><span class='line'><span class="gi">+http://tools.suckless.org/dmenu/patches/$pkgname-$pkgver-xft.diff)</span>
</span><span class='line'><span class="gi">+md5sums=(&#39;9c46169ed703732ec52ed946c27d84b4&#39;</span>
</span><span class='line'><span class="gi">+         &#39;d448ec9120718b0aedbdb338f4fa69ba&#39;)&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>&lt;p&gt; build(){
</span><span class='line'>   cd $srcdir/$pkgname-$pkgver
</span><span class='line'><span class="gi">+  patch -p1 &amp;lt; ../$pkgname-$pkgver-xft.diff</span>
</span><span class='line'><span class="gi">+  sed -i &#39;s:-I/usr/local/include/freetype2:-I/usr/include/freetype2:&#39; config.mk</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'>   make \
</span></code></pre></div></figure></notextile></div></p>

<p>Running <code>makepkg -i</code> will build and install dmenu with Xft support. This is the most
straightforward approach. I also, primarily by way of experimentation and in an effort
to try an understand how this actually works, have slightly more convoluted examples.
<a href="https://www.archlinux.org/packages/extra/x86_64/msmtp/" title="Arch package">msmtp</a>, the
<acronym title="Simple Mail Transfer Protocol">SMTP</acronym> client has a couple
of makedepends in
<a href="https://www.archlinux.org/packages/extra/x86_64/libgnome-keyring/" title="Arch package">libgnome-keyring</a>
and <a href="https://www.archlinux.org/packages/extra/any/texlive-core/" title="Arch package">texlive-core</a>; the former
I have zero use for and the latter is only installed on my desktop, so I have no wish to install it on
my laptop just to be able to send emails…</p>

<p>In this case, I modified the PKGBUILD to completely remove the <code>libgnome-keyring</code> dependency
and to only build the <code>msmtp</code> documentation in <code>.pdf</code> and <code>.html</code> if <code>texlive-core</code> was
already installed on the machine. Unfortunately, I wasn't able to test for the presence of
<code>texlive-core</code> with the standard utilities like <code>type</code> or <code>which</code>, so—as it is installed
on all my boxes—I went with <code>expac</code> (<code>pacman -Q</code> would also work):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='diff'><span class='line'><span class="gd">--- PKGBUILD    2013-05-18 09:32:07.393095131 +1200</span>
</span><span class='line'><span class="gi">+++ PKGBUILD    2013-05-18 09:31:55.449986364 +1200</span>
</span><span class='line'><span class="gu">@@ -1,7 +1,8 @@</span>
</span><span class='line'> arch=(&#39;i686&#39; &#39;x86_64&#39;)
</span><span class='line'><span class="gi">+groups=(&#39;modified&#39;)</span>
</span><span class='line'> license=(&#39;GPL3&#39;)
</span><span class='line'> url=&quot;http://msmtp.sourceforge.net&quot;
</span><span class='line'><span class="gd">-makedepends=(&#39;texlive-core&#39; &#39;gsasl&#39; &#39;libgnome-keyring&#39;)</span>
</span><span class='line'><span class="gi">+makedepends=(&#39;gsasl&#39;)</span>
</span><span class='line'> source=(http://download.sourceforge.net/sourceforge/msmtp/${pkgbase}-${pkgver}.tar.bz2)
</span><span class='line'> sha1sums=(&#39;c0edce1e1951968853f15209c8509699ff9e9ab5&#39;)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;@@ -12,19 +13,24 @@&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt; build() {
</span><span class='line'>   cd ${pkgbase}-${pkgver}
</span><span class='line'><span class="gd">-  ./configure --prefix=/usr --sysconfdir=/etc --with-ssl=gnutls</span>
</span><span class='line'><span class="gi">+  ./configure --prefix=/usr --sysconfdir=/etc --with-ssl=gnutls --without-gnome-keyring</span>
</span><span class='line'>   make
</span><span class='line'><span class="gd">-  make -C doc html pdf</span>
</span><span class='line'><span class="gi">+  if [[ -n $(expac -Q &#39;%n&#39; texlive-core) ]]; then</span>
</span><span class='line'><span class="gi">+      make -C doc html pdf</span>
</span><span class='line'><span class="gi">+  fi</span>
</span><span class='line'> }&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt; package_msmtp() {
</span><span class='line'>   pkgdesc=&quot;A mini smtp client&quot;
</span><span class='line'><span class="gd">-  depends=(&#39;gsasl&#39; &#39;libgnome-keyring&#39;)</span>
</span><span class='line'><span class="gi">+  depends=(&#39;gsasl&#39;)</span>
</span><span class='line'>   install=msmtp.install&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;   cd ${pkgbase}-${pkgver}
</span><span class='line'>   make DESTDIR=&quot;${pkgdir}&quot; install
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+  if [[ -n $(expac -Q &#39;%n&#39; texlive-core) ]]; then</span>
</span><span class='line'>   make DESTDIR=&quot;${pkgdir}&quot; -C doc install-html install-pdf
</span><span class='line'><span class="gi">+  fi&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>&lt;p&gt; # Installing example configs and scripts to /usr/share/doc/msmtp
</span></code></pre></div></figure></notextile></div></p>

<p>It isn't necessarily an attractive solution, but it works for me…
On the subject of unattractive solutions, as of pacman 4.1, released
last month, the packaging standards for
<a href="https://wiki.archlinux.org/index.php/VCS_PKGBUILD_Guidelines" title="Arch Wiki page">VCS PKGBUILDs</a>
have been changed, principally around how sources and versioning is handled. For
the couple of VCS packages I maintain in the <acronym title="Arch User
Repository">AUR</acronym><sup>2</sup>, I have been
experimenting with how to capture the <code>pkgver</code> in a way that conforms to the
standards and provides people with a meaningful version number.</p>

<p>By default, the version number for these projects from their git repos
is not that helpful:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>git describe --always
</span><span class='line'>4861046
</span></code></pre></div></figure></notextile></div></p>

<p>After looking through the git logs, and playing around with <code>awk</code> to filter
the results, I came up with this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>pkgver<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">cd</span> <span class="s2">&quot;$&lt;em&gt;gitname&quot;</span>
</span><span class='line'>  <span class="nb">printf</span> <span class="s1">&#39;%s\n&#39;</span> <span class="s2">&quot;$(awk &#39;/^ / {print $2}&#39; &amp;lt;(git log --grep=version -1))&lt;/em&gt;\</span>
</span><span class='line'><span class="s2">  $(git describe --always)&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></div></figure></notextile></div></p>

<p>This prints a more, for me anyway, intelligble package version: <code>vimprobable2-git
1.2.1_c5936cc-1</code> that relates back to the last stable release and appends the
current commit. I'm sure that this could be improved upon; suggestions are
welcome.</p>

<p>The other change to note in all of these PKGBUILDs is the inclusion of the
<code>groups</code> variable. By adding all of the modified packages from the official
repositories to the—imaginatively titled—<code>modified</code> group, I can then add a line
to <code>/etc/pacman.conf</code> that prevents those packages from being overwritten on
upgrade<sup>3</sup>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'><span class="nv">IgnoreGroup</span> <span class="o">=</span> modified
</span></code></pre></div></figure></notextile></div></p>

<p>Issuing <code>pacman -Syu</code>, or running <code>checkupdates</code> from a <code>cron</code> job, will
notify you that the packages have had a version bump and that they need
to be rebuilt. The PKGBUILDs for all of these packages can be found in
<a href="https://bitbucket.org/jasonwryan/centurion/src/ff3b3c9d805e197f35aa28dbeb6a9a6555ee7b63/Build?at=default" title="Files in bitbucket">my bitbucket repo</a>.</p>

<h4>Notes</h4>

<ol>
<li>As my experiments attest…</li>
<li><a href="https://aur.archlinux.org/packages/vimprobable2-git/">Vimprobable2-git</a>,
<a href="https://aur.archlinux.org/packages/surfraw-git/">Surfraw-git</a> and
<a href="https://aur.archlinux.org/packages/ruby-build-git/">ruby-build-git</a>.</li>
<li>All credit to ataraxia <a href="https://bbs.archlinux.org/viewtopic.php?pid=623841#p623841">for this idea</a>.</li>
</ol>


<p>Creative Commons image on Flickr by
<a href="http://www.flickr.com/photos/wellspwilson/6481217091/" title="Wood
Cutting Wood">Wells P. Wilson</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AUR Helpers]]></title>
    <link href="http://jasonwryan.github.com/blog/2013/04/09/helpers/"/>
    <updated>2013-04-09T19:07:00+12:00</updated>
    <id>http://jasonwryan.github.com/blog/2013/04/09/helpers</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://dl.dropbox.com/u/261312/Blog-images/crutches.jpg" title="'Crutches on Flickr'" ></p>

<h3>Or, "Why you should uninstall Yaourt and embrace <em>makepkg</em>…"</h3>

<p>The <a href="https://bbs.archlinux.org/viewtopic.php?id=160655" title="Announcement on the Arch boards">release of Pacman 4.1</a>
saw the same flurry of posts on the boards, in IRC and the mailing lists about
people being “unable” to upgrade or, worse, claiming that pacman was “broken”
because their upgrade was failing due to unsatisfied dependencies, that pretty
much every pacman upgrade ocassions. How is it possible that so many people can
run an operating system designed for competent users without having even a
basic understanding of how the package manager—one of the single most critical
components of the distribution—works?</p>

<p>Even a cursory perusal of the resulting threads on the boards will quickly
identify the common denominator in these cases:</p>

<p><blockquote><p>resolving dependencies...<br/>looking for inter-conflicts...<br/>error: failed to prepare transaction (could not satisfy dependencies)<br/>:: package-query: requires pacman&lt;4.1</p></blockquote></p>

<p><a href="https://aur.archlinux.org/packages/package-query/" title="AUR page">package-query</a>
is required by <a href="https://aur.archlinux.org/packages/yaourt/" title="yaourt on AUR">yaourt</a>;
so these upgrades have been stymied by a package that is in the (unsupported)
<acronym title="Arch User Repository">AUR</acronym>? There are a
<a href="https://wiki.archlinux.org/index.php/AUR_Helpers" title="Arch Wiki entry">multitude of AUR helpers</a>,
but <code>yaourt</code> is most commonly used by people who are new to Arch<sup>1</sup>
for two reasons.  First, it is one of the most “featureful” and secondly, and
more to the point of my argument, it can be installed by simply adding an
unsupported repo to <code>pacman.conf</code>; thereby effectively bypassing the need for
the hapless user ever having to use or understand <code>makepkg</code>.</p>

<p>Consequently, over time, people who are habitually using <code>yaourt -Syu --aur</code> to
update both the packages in the supported repositories and those they have
installed from the AUR lose the conceptual distinction between the two.
<code>yaourt</code> obscures this from them and—if they are completely reliant upon it, as
these threads attest they are—they have abnegated responsibility for managing
those unsupported packages and in doing so have found themselves incapable of
understanding the bind they are in.</p>

<p>This sort of obscuring of fundamental operating principles in the pursuit of
“convenience” is anathema to Arch and is precisely the reason I moved away from
using <code>yaourt</code> (and indeed from using Ubuntu when I jumped from that sinking
ship). Any convenience is purely illusory, in reality it just fosters
<a href="http://en.wikipedia.org/wiki/Learned_helplessness" title="Wikipedia entry">learned helplessness</a>.</p>

<p>I understand that the <code>yaourt</code> developer(s) was scratching their own itch, and
this post is not about maligning the project; but there are significant
unintended consequences of giving people a tool that abstracts such a
fundamental element of the distribution away from the user, especially for a
distribution where you are expected to have
<a href="https://wiki.archlinux.org/index.php/The_Arch_Way#User-centric" title="The Arch Way">complete control <em>and responsbility</em> over your system</a>.</p>

<p>To be clear, I don't have a complaint with the <em>concept</em> of AUR helpers. I used
<code>yaourt</code> initially before switching to
<a href="http://pbrisbin.com/posts/aurget" title="Patrick Brisbin's AUR helper">aurget</a> and then
alighting on
<a href="https://github.com/falconindy/cower" title="Cower on github">cower</a>, or more particularly,
a partial wrapper for <code>cower</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>cowerd </span></figcaption>
 <div class="highlight"><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;!/bin/sh&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;install AUR packages with cower&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;cd <span class="nv">$HOME</span>/Build &amp;amp;&amp;amp; cower -d <span class="s2">&quot;$1&quot;</span>
</span><span class='line'><span class="nv">builddir</span><span class="o">=</span><span class="s2">&quot;$_&quot;</span>
</span><span class='line'><span class="nb">cd</span> <span class="s2">&quot;$builddir&quot;</span> &amp;amp;&amp;amp; <span class="k">${</span><span class="nv">EDITOR</span><span class="k">:-</span><span class="nv">vi</span><span class="k">}</span> PKGBUILD&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;makepkg -si &amp;amp;&amp;amp; <span class="nb">cd</span> - &amp;amp;&gt;/dev/null&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;read -p <span class="s2">&quot;Remove Build directory? [Y/n]? &quot;</span> yn
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$yn&quot;</span> <span class="o">=</span> <span class="s2">&quot;y&quot;</span> <span class="o">]</span>; <span class="k">then</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;printf <span class="s2">&quot;\n%s\n&quot;</span> <span class="s2">&quot;Removing build directory...&quot;</span>
</span><span class='line'>rm -rf <span class="s2">&quot;$builddir&quot;</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;else&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;printf <span class="s2">&quot;%s\n&quot;</span> <span class="s2">&quot;Build completed.&quot;</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;fi
</span></code></pre></div></figure></notextile></div></p>

<p>This provides me the minimum level of automation I require—essentially only
around downloading and installing a package. It doesn't automatically handle
dependencies, nor manage updating the packages; that remains, rightly in my
view, <em>my</em> responsibility.</p>

<p>If I were to look to a more fully featured wrapper, I would undoubtedly choose
<a href="https://github.com/e36freak/meat" title="meat on Github">meat</a>, however as on my
desktop machine, I only have ~30 AUR packages installed, I don't really need
anything more sophisticated.</p>

<p>So by all means, use an AUR helper. But recognize that it is intended to help
you, not preclude you from being able to accomplish the most simple and
critical task of system maintenance, updating your package manager. Uninstall
<code>yaourt</code> if you are using it and familiarize yourself with <code>makepkg</code>; once you
do understand the relationship between the official repositories and the AUR,
download <code>cower</code> or <code>meat</code>, they are both <em>much</em> better solutions.</p>

<h4>Notes</h4>

<ol>
<li><a href="http://jasonwryan.com/blog/2009/11/21/dzen2-and-conky-cli-in-dwm/" title="Post from 2009">Myself included</a>…</li>
</ol>


<p>Creative Commons image of crutches by
<a href="http://www.flickr.com/photos/wheatfields/118700600/" title="Flickr CC image">net_efekt on Flickr</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Vim]]></title>
    <link href="http://jasonwryan.github.com/blog/2013/03/29/vim/"/>
    <updated>2013-03-29T10:17:00+13:00</updated>
    <id>http://jasonwryan.github.com/blog/2013/03/29/vim</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://dl.dropbox.com/u/261312/Blog-images/vim-logo.png" title="'Vim logo'" >
Apart from a brief, but nevertheless instructive, flirtation with
<a href="http://www.gnu.org/software/emacs/" title="Emacs homepage">Emacs</a><sup>1</sup> I have
been a consistent <a href="http://www.vim.org/" title="Vim home">Vim</a> user over the last three
or four years. Like most Vim users, I have made some progress over that time
in spite of Vim's
<a href="http://stackoverflow.com/a/1815372/712613" title="SO answer on Vim">notorious learning curve</a>
and have now reached the point where, belatedly, I think I understand it just enough
to really grasp how little I actually know. It's a milestone that speaks more to
necessity than gratification, granted.</p>

<p>In any event, as part of confronting my Vim shortcomings (no
<a href="http://www.vimgolf.com/" title="Vim golf…">golfing</a> for me), I have been able
to land on the features of Vim that I require to be enabled so that I am moderately
productive (in my own, admittedly cloistered, working environment). That, you will
probably not be surprised to read, does not include needing support for Arabic or
Farsi to be built into Vim.</p>

<p>Part of the beauty of Vim is that, unlike it's
<a href="http://en.wikipedia.org/wiki/Editor_war#Humor" title="…lacking a decent editor">operating system counterpart Emacs</a>,
you can choose how much functionality you wish to enable at compile-time. You do want
support for Farsi? Then the <code>--with-features=big</code> option is what you are looking for.
If, on the other hand, you just want the barest of bones, editor-wise, you could opt
for the austere minimalism that is <code>--with-features=tiny</code> and find yourself happily
transported back in time to
<a href="https://en.wikipedia.org/wiki/Vi" title="Wikipedia page on Vi">Bill Joy's lab in 1976</a>.</p>

<p>You can peruse all of the various features available to Vim using the <code>:help version</code>
command.<sup>2</sup> There is also
<a href="http://www.drchip.org/astronaut/vim/vimfeat.html" title="Vim's versions and features">this table</a>
where the various features are listed against the respective feature flags (tiny, small,
normal, big &amp; huge).</p>

<p>After this
<a href="https://bugs.archlinux.org/task/33019" title="Add +profile to gvim on Flyspray">bug report</a>
late last year, the default Arch PKGBUILD ships with <code>huge</code> as the feature set. Make
what you will of that, but for my purposes it is overkill. With all the magic of
<a href="https://wiki.archlinux.org/index.php/Abs" title="Arch Wiki page on ABS">ABS</a> and
<code>makepkg</code>, however, it is simple enough to build a Vim package that is tailored
to exactly your requirements. For me, that means this set of simplified <code>configure</code>
options:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>  ./configure <span class="se">\&lt;</span>/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;--prefix<span class="o">=</span>/usr <span class="se">\</span>
</span><span class='line'>--localstatedir<span class="o">=</span>/var/lib/vim <span class="se">\</span>
</span><span class='line'>--with-features<span class="o">=</span>normal <span class="se">\</span>
</span><span class='line'>--with-compiledby<span class="o">=</span>Arch:jwr <span class="se">\</span>
</span><span class='line'>--with-x<span class="o">=</span>yes <span class="se">\</span>
</span><span class='line'>--enable-acl <span class="se">\</span>
</span><span class='line'>--disable-gui <span class="se">\</span>
</span><span class='line'>--disable-signs <span class="se">\</span>
</span><span class='line'>--disable-netbeans <span class="se">\</span>
</span><span class='line'>--enable-multibyte
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></div></figure></notextile></div></p>

<p>With these options, I have the minimum amount of functionality I comfortably
require (including the ability to access the system clipboard, <code>--with-x=yes</code>)
but without the other bloat.</p>

<p>In addition to these changes to the config options, I also strip out all of the
<code>gvim</code>-related stuff from the PKGBUILD as I do not require it. Even though it
is a split package, just building <code>vim</code> still includes options superfluous to
my needs.  As a result, I get Vim with just the features I need, without the
dependencies of <code>ruby</code> and <code>lua</code> and god knows what else.</p>

<p>I'm not operating under any illusions about the fact that this is
really saving a huge amount of space or, for that matter, drastically reducing the
number of dependencies I have installed. It is partly about understanding how Vim
works at another level while also catering for the obsessive-compulsive drive to
micro-control what is and isn't installed on my systems. If you want to scratch either
of the same itches, you can see the full
<a href="https://bitbucket.org/jasonwryan/shiv/src/e6ccbe61780dfe24a5f7edda0d4b082dbb572e4a/Build/vim/PKGBUILD?at=default" title="Eviscerated Vim PKGBUILD">PKGBUILD in Bitbucket</a>.</p>

<h4>Notes</h4>

<ol>
<li>Still visible in some of my early Arch screenshots
<a href="http://www.flickr.com/photos/jasonwryan/3748882572/in/photostream" title="Emacs in Openbox">on Flickr</a>…</li>
<li>The official documentation for the features is also
<a href="http://vimdoc.sourceforge.net/htmldoc/various.html#+feature-list" title="Vim Feature list">online</a>.</li>
</ol>

]]></content>
  </entry>
  
</feed>
