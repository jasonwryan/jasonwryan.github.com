<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: archlinux | jasonwryan.com]]></title>
  <link href="http://jasonwryan.github.com/blog/categories/archlinux/atom.xml" rel="self"/>
  <link href="http://jasonwryan.github.com/"/>
  <updated>2012-05-12T17:10:19+12:00</updated>
  <id>http://jasonwryan.github.com/</id>
  <author>
    <name><![CDATA[Jason Ryan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[mutt and HTML email]]></title>
    <link href="http://jasonwryan.github.com/blog/2012/05/12/mutt/"/>
    <updated>2012-05-12T15:49:00+12:00</updated>
    <id>http://jasonwryan.github.com/blog/2012/05/12/mutt</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://dl.dropbox.com/u/261312/Blog-images/mutt-1.png" title="'mutt logo'" ></p>

<p>Following on from my <a href="http://jasonwryan.com/blog/2012/04/21/lbdb/" title="Using mutt, LDAP and SSL">last post about mutt</a>,
I have been tinkering more with the most suckless of mail clients to
get it to deal with—of all things—<acronym title="HyperText Markup Language">HTML</acronym>
emails. I will preface this post with a remark or two that amounts to a warning about
intemperate language, ranting and a generally cranky disposition: repeated contact with
email marketers can do that to you…</p>

<p>A further  brief digression is warranted here. HTML email is, without doubt,
evidence of the imminent end of civilized life as we know it; much like the
<a href="http://en.wikipedia.org/wiki/Places_in_The_Hitchhiker" title="s_Guide_to_the_Galaxy#Golgafrincham
'Wikipedia entry on HHGTTG">Golgafrincham diaspora</a>, it attributable to a depraved cabal of marketing consultants
and provides the same level of social good as syphilis and fistulas. Suffice to say, it is a blight.</p>

<p>Sadly, it is a blight that I have to deal with. Up until now, I had done that by using the
excellent <a href="http://w3m.sourceforge.net/" title="w3m homepage on sourceforge">w3m</a> to render
HTML as text in mutt itself. That is accomplished easily enough with an entry in
<span class="file">muttrc</span> and another in a <span class="file">mailcap</span> file.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>~/.mutt/muttrc </span></figcaption>
 <div class="highlight"><pre><code class='sh'><span class='line'>auto_view text/html                                      <span class="c"># view html automatically</span>
</span><span class='line'>alternative_order text/plain text/enriched text/html     <span class="c"># save html for last</span>
</span></code></pre></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>~/.mutt/mailcap </span></figcaption>
 <div class="highlight"><pre><code class='sh'><span class='line'>text/html; w3m -I %<span class="o">{</span>charset<span class="o">}</span> -T text/html; copiousoutput;
</span></code></pre></div></figure></notextile></div></p>

<p>This works for 80 percent of the HTML email I get. It is enough to confirm that the mail is useless
and can be discarded. The other 20 percent, however, is slightly more problematic. The initial
view in w3m is enough to tell me that, due to the outstanding incompetence of the idiots that
generated the email, there <em>is</em> actually some information that is contained in the email that I need
to access <strong>but it is not viewable in a text browser.</strong></p>

<p><img class="left" src="http://dl.dropbox.com/u/261312/Blog-images/mutt-2.png" title="'An example…'" ></p>

<p>For this special level of retardation, I need to be able to open the email in a ghraphical browser.
As I use vimprobable, that means sending the file to
<a href="http://jasonwryan.com/blog/2011/06/26/using-vimprobable/" title="My post on Using vimprobable">vimprobable running in tabbed</a>. Fortunately, as you would expect with superior software,
mutt has a way of handling this gracefully. In mutt's extensive documentation, there is a
<a href="http://www.mutt.org/doc/manual/manual-5.html" title="Go and read it…">page on mutt's MIME support</a>
that details how to set up a gradated response to this pernicious issue:</p>

<p><blockquote><p>In addition, you can use this with Autoview to denote two commands for viewing an attachment,<br/>one to be viewed automatically, the other to be viewed interactively from the attachment menu.</p><footer><strong>mutt manual</strong> <cite><a href='http://www.mutt.org/doc/manual/manual-5.html'>www.mutt.org/doc/manual/&hellip;</a></cite></footer></blockquote></p>

<p>So, you can have mutt render the HTML abomination in w3m in most cases, and when those
instances of particularly cretinous behaviour make it to your inbox, you can choose to
view them in your web browser. In my case, by altering the <span class="file">mailcap</span>
entry to look like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>text/html; vimprobtab.sh %s &amp;amp;; <span class="nb">test</span><span class="o">=</span><span class="nb">test</span> -n <span class="s2">&quot;$DISPLAY&quot;</span>; needsterminal;
</span><span class='line'>text/html; w3m -I %<span class="o">{</span>charset<span class="o">}</span> -T text/html; copiousoutput;
</span></code></pre></div></figure></notextile></div></p>

<p>The first entry tests that X is running, and if it is, it hands the file to vimprobable. The
default, however, is determined by the <code>copiousoutput</code> tag. So, in <code>mutt</code> it is just a matter
of hitting <kbd>v</kbd> to view the attached HTML and then <kbd>m</kbd> to send it to mailcap.
For convenience, I bind <kbd>Enter</kbd> to that function in <span class="file">muttrc</span>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'><span class="nb">bind </span>attach &lt;<span class="k">return</span>&gt;    view-mailcap
</span></code></pre></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using mutt, LDAP and SSL]]></title>
    <link href="http://jasonwryan.github.com/blog/2012/04/21/lbdb/"/>
    <updated>2012-04-21T11:23:00+12:00</updated>
    <id>http://jasonwryan.github.com/blog/2012/04/21/lbdb</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://dl.dropbox.com/u/261312/Blog-images/addressbook.png" title="'Address Book Icon by bertop on Flickr'" ></p>

<p>One of the great things about starting a new job at
<a href="http://jasonwryan.com/blog/2012/04/05/catalyst/" title="My post on joining Catalyst IT">an open source company</a>
is having the freedom to use the tools that suit your workflow, rather than
having to suffer the indignity of whatever the IT department consider to be the
lowest comon denominator. Suffice to say, I have had a lot of fun this week
setting up my working environment—and the ocassional hiccough as I was forced to learn
something new…</p>

<p>One of those “learning opportunities” consisted of trying to get my mail client,
<a href="http://www.mutt.org/" title="All mail clients suck. This one just sucks less.">mutt</a>
to talk to the <acronym title="Lightweight Directory Acces Protocol">LDAP</acronym>
directory over <acronym title="Secure Sockets Layer">SSL</acronym> so that I could
query the shared address book. There are a number of helpful blog posts that describe
using <a href="http://www.spinnaker.de/lbdb/" title="The Little Brother Database homepage">lbdb</a>
with <code>mutt</code><sup>1</sup>. Unfortunately, after a lot of searching, I was unable to find
any documentation on achieving this integration over a secure connection.
I kept seeing this error:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>Error: Search failed. LDAP server returned an error : 13, description: TLS
</span><span class='line'>confidentiality required at /usr/lib/mutt_ldap_query line 198, &lt;DATA&gt; line 558.
</span></code></pre></div></figure></notextile></div></p>

<p>Several hours later, and with some
help from <a href="https://twitter.com/#!/ibeardslee" title="Ian on Twitter: follow him…">@ibeardslee</a>,
I managed to set it up, and it was definitely worth the effort.</p>

<p>You will need to install <code>lbdb</code> from
<a href="http://aur.archlinux.org/packages.php?ID=10225" title="AUR package">the AUR</a>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>cowerd lbdb     <span class="c"># 2</span>
</span></code></pre></div></figure></notextile></div></p>

<p>…and a couple of packages from the repos to make it all work:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>pacman -S perl-ldap perl-io-socket-ssl netkit-bsd-finger
</span></code></pre></div></figure></notextile></div></p>

<p>Then it is a matter of configuring <code>lbdb</code> to both
query the LDAP directory and be able to be called from <code>mutt</code>.
First, copy the config files into your <span class="file">$HOME</span>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>mkdir .lbdb
</span><span class='line'>cp /etc/lbdb.rc .lbdb/lbdbrc
</span><span class='line'>cp /etc/lbdb_ldap.rc .lbdb/ldap.rc
</span></code></pre></div></figure></notextile></div></p>

<p>And then modify the two configuration files to suit your setup:
The first, <span class="file">$HOME/.lbdb/lbdbrc</span>, is well commented and
self-explanatory; add <code>ldap</code> to the methods and the
nickname of your server:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'><span class="nv">METHODS</span><span class="o">=</span><span class="s2">&quot;m_abook m_ldap&quot;</span>
</span><span class='line'><span class="nv">LDAP_NICKS</span><span class="o">=</span><span class="s2">&quot;catalyst&quot;</span>
</span></code></pre></div></figure></notextile></div></p>

<p>The second config file, <span class="file">$HOME/.lbdb/ldap.rc</span>
is written in Perl and is a bit of a shocker:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='perl'><span class='line'><span class="nv">%ldap_server_db</span> <span class="o">=</span> <span class="p">(</span><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;</span><span class="s">&#39;catalyst&#39;</span> <span class="o">=&amp;</span><span class="ow">gt</span><span class="p">;</span> <span class="p">[</span><span class="s">&#39;ldaps://ldap.catalyst.net.nz:636&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s">&#39;ou=Staff,ou=People,dc=catalyst,dc=net,dc=nz&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s">&#39;givenname sn cn mail&#39;</span><span class="p">,</span> <span class="s">&#39;givenname sn cn mail&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s">&#39;${mail}&#39;</span><span class="p">,</span> <span class="s">&#39;${givenname} ${sn}&#39;</span><span class="p">]</span>
</span><span class='line'><span class="sr">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span><span class="p">);</span><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;</span><span class="n">hostname</span> <span class="n">of</span> <span class="n">your</span> <span class="n">ldap</span> <span class="n">server</span><span class="sr">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span><span class="nv">$ldap_server</span> <span class="o">=</span> <span class="s">&#39;ldaps://ldap.catalyst.net.nz:636&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$search_base</span> <span class="o">=</span> <span class="s">&#39;ou=Staff,ou=People,dc=catalyst,dc=net,dc=nz&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$ldap_search_fields</span>    <span class="o">=</span> <span class="s">&#39;givenname sn cn mail&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$ldap_expected_answers</span> <span class="o">=</span> <span class="s">&#39;givenname sn cn mail&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$ldap_result_email</span>     <span class="o">=</span> <span class="s">&#39;${mail}&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$ldap_result_realname</span>  <span class="o">=</span> <span class="s">&#39;${givenname} ${sn}&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$ignorant</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="nv">$ldap_bind_dn</span> <span class="o">=</span> <span class="s">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$ldap_bind_password</span> <span class="o">=</span> <span class="s">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="mi">1</span><span class="p">;</span>
</span></code></pre></div></figure></notextile></div></p>

<p>The key is to ensure that you use both the <code>ldaps</code>
prefix <strong>and</strong> explicitely specify the SSL port, 636. Without both of these, you will
get the TLS confidentiality error.</p>

<p>You can then test that it is working correctly by running a query:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>lbdbq jemima
</span></code></pre></div></figure></notextile></div></p>

<p>All going well, if there is indeed a Jemima in the shared address book, you will see her
contact details miraculously appear before you. If there is more than one, you will have a
list to choose from.</p>

<p>Finally, you just need to set up <code>mutt</code> to query <code>lbdb</code>.
In your <span class="file">muttrc</span>, add the following:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'><span class="nb">set </span><span class="nv">query_command</span> <span class="o">=</span> <span class="s2">&quot;lbdbq %s 2&gt;/dev/null&quot;</span>
</span></code></pre></div></figure></notextile></div></p>

<p>I found that suppressing the errors made the whole experience a little smoother. You
may not require it… Now, hitting <kbd>Shift</kbd><kbd>q</kbd> in <code>mutt</code>
brings up a prompt to query the LDAP directory (and my <a href="http://abook.sourceforge.net/" title="abook homepage">abook</a> address book that I share via
<a href="https://www.dropbox.com/" title="Dropbox homepage">dropbox</a>). You can also access the directory
by starting to type an email address and then hitting <kbd>Ctrl</kbd><kbd>t</kbd> to see
a list of possible completions.</p>

<h4>Notes</h4>

<ol>
<li><p><a href="http://www.christianschenk.org/blog/integrating-ldap-into-mutt/" title="Integrating LDAP into Mutt">Christian Schenk's post</a> got me started.</p></li>
<li><p>A <a href="https://bitbucket.org/jasonwryan/eeepc/src/f15bf6e51e62/Scripts/cowerd" title="Script in bitbucket repo">wrapper script for cower</a></p></li>
</ol>


<p>Creative Commons image <a href="http://www.flickr.com/photos/bertop/2530620838/">by bertop on Flickr</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving to Octopress]]></title>
    <link href="http://jasonwryan.github.com/blog/2012/03/30/octopress/"/>
    <updated>2012-03-30T12:30:00+13:00</updated>
    <id>http://jasonwryan.github.com/blog/2012/03/30/octopress</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://dl.dropbox.com/u/261312/Blog-images/octopress_logo.png" width="240" height="240" title="Octopress Logo" ></p>

<p>Over the last week I have been moving my blog over to <a href="http://octopress.org/">Octopress</a>,
a lightweight blogging framework for <a href="https://github.com/mojombo/jekyll">Jekyll</a>,
the static site generator powering <a href="http://pages.github.com/">Github Pages</a>. I had previously
been posting to a <a href="https://www.tumblr.com/">tumblr</a> page and, over the nearly four years that
I had been doing that I had somehow racked up just over 4000 posts. I was <em>not</em>
looking forward to migrating across.</p>

<p>However, the fact that the Jekyll project has a number of scripts for
<a href="https://github.com/mojombo/jekyll/wiki/blog-migrations">migrating from other platforms</a>
assuaged my concerns about the difficulty of this task. That sense of relief was shortlived.
Neither of the two tumblr migration scripts were of any assistance: both would die during their
initial runs, probably due to some funky characters in the post titles, or perhaps the posts themselves.</p>

<p>I certainly had no intention of trying to wade through the entire back catalogue identifying the
rogue posts. Rather that admit defeat, and probably more due to a sense of misguided optimism about the
“straightforward” nature of the task, I saw this setback as an opportunity to cull all of the
cruft<sup>1</sup> from the blog and decided to manually import the fifty posts that I thought were of
some interest.</p>

<p>Being an assiduous record keeper, all of the posts were helpfully bookmarked on
<a href="https://pinboard.in/u:jasonwryan/t:jwr/">Pinboard under one tag</a>, and therefore it was
simple enough to create a list of the required <acronym title="Unique Resource Locator">URLs</acronym>.
Armed with this list, it was just a matter of cobbling together a script to do the bulk of
the work for me.</p>

<p>The first task was to retrieve the posts from the list:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;grab files&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;while <span class="nb">read </span>url; <span class="k">do</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;wget --adjust-extension <span class="s2">&quot;${url}&quot;</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;done &amp;lt; /home/jason/Scripts/list
</span></code></pre></div></figure></notextile></div></p>

<p>Then I needed to remove all of the <acronym title="HyperText Markup Language">HTML</acronym>
surrounding the actual posts: an <code>awk</code> one-liner took care of that.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;strip HTML cruft&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;for file in &lt;em&gt;.html; <span class="k">do</span>
</span><span class='line'><span class="k">  </span>awk <span class="s1">&#39;/&lt;h3&gt;/ {flag=1;next} /&amp;lt;\/div&gt;/{flag=0} flag {print}&#39;</span> <span class="s2">&quot;$file&quot;</span> &gt; <span class="s2">&quot;${file%%.&lt;/em&gt;}&quot;</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>mkdir html &amp;amp;&amp;amp; mv *.html html/
</span></code></pre></div></figure></notextile></div></p>

<p>The final task of this part of the migration was to convert the HTML into
<a href="http://daringfireball.net/projects/markdown/">markdown</a>,
the format that Octopress uses. <a href="http://johnmacfarlane.net/pandoc/">Pandoc</a>
the "universal document converter" handled that job:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;convert to markdown format&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;for file in *; <span class="k">do</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;pandoc -f html -t markdown <span class="s2">&quot;$file&quot;</span> &amp;gt; <span class="s2">&quot;$file&quot;</span>.md
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;done
</span></code></pre></div></figure></notextile></div></p>

<p>The final result was fifty markdown files holding all of my posts, almost ready to
be committed to github. I say “almost” because the files still required what turned out to
be a reasonable amount of cleaning up. Pandoc did a great job, for example, but would
inexpicably break <a href="http://www.notareallink.com">multi word
hyperlinks</a> over two lines. Similarly all of the internal
links to my other posts pointed to the (meaningless) tumblr URLs<sup>2</sup>.</p>

<p>Setting up Octopress was extremely simple and quick by comparison: the
<a href="http://octopress.org/docs/">documentation is very helpful</a>. There was one slight
hitch, a <a href="https://github.com/tmm1/pygments.rb/issues/10">known issue on Arch x86_64</a>,
which was simple enough to deal with.</p>

<p>While the migration was not entirely pain-free, I am pleased that I have done it. Tumblr's service
increasingly <a href="https://twitter.com/#!/jasonwryan/statuses/176543962276954112">left a lot to be desired</a>
but as it was a free service, I couldn't complain too much. Or, more accurately, when I did complain,
no-one actually listened…</p>

<p>Indeed, moving to a paid service like Github
(yes, it's free at first, but once you have enough data there you need to pay a small amount
every month) <a href="http://blog.pinboard.in/2011/12/don_t_be_a_free_user/">makes a lot of sense</a>.
The paid services I do use, like <a href="http://pinboard.in/">Pinboard</a> and
<a href="http://www.tarsnap.com/">Tarsnap</a> are both inexpensive and much more
reliable than their free counterparts<sup>3</sup>; and you get to invest in great
software that is a pleasure to use.</p>

<h5>Notes</h5>

<ol>
<li>Initially, I had set up the site as a simple holding page and dumped a whole lot
of feeds into it: twitter, bookmarks, scrobbled music, etc. Those 4000 posts were
mostly just that sort of internet detritus…</li>
<li>For creating redirections (Github pages do <em>not</em> support <span class="file">.htaccess</span>)
I can't recommend enough the
<a href="https://github.com/rawsyntax/jekyll_alias_generator/blob/master/_plugins/alias_generator.rb">Jekyll Alias Generator</a>.
Just. Brilliant.</li>
<li>And <strong>much</strong> more scrupulous about how they use your personal data.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Signing Your Own Key]]></title>
    <link href="http://jasonwryan.github.com/blog/2012/03/23/key/"/>
    <updated>2012-03-23T11:36:00+13:00</updated>
    <id>http://jasonwryan.github.com/blog/2012/03/23/key</id>
    <content type="html"><![CDATA[<p><img src="http://dl.dropbox.com/u/261312/Blog-images/key.jpg" alt="image" /></p>

<p>Some time in the last couple of days, the last of the packages in the
Community repository were signed and, thanks to the tremendous work of
the Arch developers and Trusted Users, you can fully implement package
signing in your <span class="file">/etc/pacman.conf</span>.</p>

<p>You can check the state of the signed packages with this <code>expac</code>
one-liner; it will return a list of any <em>unsigned</em> packages:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>expac -S <span class="s1">&#39;%r %n %g&#39;</span> | awk <span class="s1">&#39;$3==&quot;(null)&quot; {print $1 &quot;/&quot; $2}&#39;</span>
</span></code></pre></div></figure></notextile></div></p>

<p>Now that the packages are all signed, I updated my <span class="file">/etc/pacman.conf</span> to
take advantage of this. My overall <code>SigLevel</code> setting requires signed
packages, and—as of yesterday—I was able to move the last repository
entry over to do the same:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'><span class="nv">SigLevel</span> <span class="o">=</span> Required DatabaseOptional TrustedOnly&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">[</span>core<span class="o">]</span>
</span><span class='line'><span class="nv">SigLevel</span> <span class="o">=</span> PackageRequired
</span><span class='line'><span class="nv">Include</span> <span class="o">=</span> /etc/pacman.d/mirrorlist&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">[</span>extra<span class="o">]</span>
</span><span class='line'><span class="nv">SigLevel</span> <span class="o">=</span> PackageRequired
</span><span class='line'><span class="nv">Include</span> <span class="o">=</span> /etc/pacman.d/mirrorlist&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">[</span>community<span class="o">]</span>
</span><span class='line'><span class="nv">SigLevel</span> <span class="o">=</span> PackageRequired
</span><span class='line'><span class="nv">Include</span> <span class="o">=</span> /etc/pacman.d/mirrorlist&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">[</span>multilib<span class="o">]</span>
</span><span class='line'><span class="nv">SigLevel</span> <span class="o">=</span> PackageRequired
</span><span class='line'><span class="nv">Include</span> <span class="o">=</span> /etc/pacman.d/mirrorlist
</span></code></pre></div></figure></notextile></div></p>

<p>The next step was to add my key to pacman’s keychain so that I could
sign the packages that I build using ABS or from the
<a href="https://aur.archlinux.org/" title="Arch User Repository">AUR</a>. Allan has an
<a href="http://allanmcrae.com/2011/08/pacman-package-signing-1-makepkg-and-repo-add/" title="The first in a series of four posts on signing: read them all">excellent post on setting this up</a>.</p>

<p>First, import your key into pacman’s keyring:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>pacman-key -r 0xB1BD4E40
</span></code></pre></div></figure></notextile></div></p>

<p>Then follow the prompts as you edit the key to sign, set a trust level
and save your key:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>pacman-key --edit-key 0xB1BD4E40
</span><span class='line'>gpg&gt; lsign
</span><span class='line'>...
</span><span class='line'>gpg&gt; trust
</span><span class='line'>...
</span><span class='line'>gpg&gt; save
</span></code></pre></div></figure></notextile></div></p>

<p>Then it is just a matter of changing the <code>BUILDENV</code> option in your
<span class="file">/etc/makepkg.conf</span>, which is set to <code>!sign</code>
by default. Remove the bang and include the details of the key you wish to use:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;-- Packager: name/email of the person or organization building packages&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;PACKAGER<span class="o">=</span><span class="s2">&quot;Jason Ryan &lt;a href=&quot;</span>&amp;#109;&amp;#97;&amp;#x69;&amp;#108;&amp;#x74;&amp;#x6f;&amp;#58;&amp;#106;&amp;#x61;&amp;#x73;&amp;#111;&amp;#110;&amp;#119;&amp;#x72;&amp;#x79;&amp;#x61;&amp;#x6e;&amp;#64;&amp;#x67;&amp;#x6d;&amp;#x61;&amp;#105;&amp;#108;&amp;#46;&amp;#99;&amp;#111;&amp;#109;<span class="s2">&quot;&gt;&amp;#106;&amp;#97;&amp;#115;&amp;#x6f;&amp;#110;&amp;#x77;&amp;#x72;&amp;#x79;&amp;#97;&amp;#110;&amp;#x40;&amp;#103;&amp;#x6d;&amp;#x61;&amp;#x69;&amp;#x6c;&amp;#x2e;&amp;#99;&amp;#x6f;&amp;#109;&lt;/a&gt;&quot;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;-- Specify a key to use <span class="k">for </span>package signing&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;GPGKEY<span class="o">=</span><span class="s2">&quot;B1BD4E40&quot;</span>
</span></code></pre></div></figure></notextile></div></p>

<p>Now, when you build a package, you will be prompted for your key’s
passphrase:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'><span class="o">==</span>&gt; Signing package...&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;You need a passphrase to unlock the secret key <span class="k">for</span>
</span><span class='line'>user: <span class="s2">&quot;Jason W Ryan &lt;a href=&quot;</span>&amp;#109;&amp;#x61;&amp;#x69;&amp;#x6c;&amp;#116;&amp;#x6f;&amp;#58;&amp;#x6a;&amp;#x61;&amp;#115;&amp;#x6f;&amp;#110;&amp;#119;&amp;#x72;&amp;#x79;&amp;#97;&amp;#110;&amp;#64;&amp;#x67;&amp;#109;&amp;#97;&amp;#x69;&amp;#x6c;&amp;#46;&amp;#99;&amp;#111;&amp;#x6d;<span class="s2">&quot;&gt;&amp;#x6a;&amp;#97;&amp;#115;&amp;#x6f;&amp;#110;&amp;#x77;&amp;#x72;&amp;#121;&amp;#97;&amp;#110;&amp;#64;&amp;#x67;&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#46;&amp;#x63;&amp;#x6f;&amp;#109;&lt;/a&gt;&quot;</span>
</span><span class='line'>2048-bit RSA key, ID B1BD4E40, created 2010-08-21&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Enter passphrase:
</span></code></pre></div></figure></notextile></div></p>

<p>Enter the correct passphrase and your package is built and signed:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>-&gt; Created signature file /home/jason/Build/<span class="o">{</span>pkg<span class="o">}</span>.pkg.tar.xz.sig.
</span></code></pre></div></figure></notextile></div></p>

<p>Creative Commons image by
<a href="http://www.flickr.com/photos/donovan_beeson/3185668524/" title="Coraline key on Flickr">donovanbeeson</a>
on Flickr.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple aurphan notifier]]></title>
    <link href="http://jasonwryan.github.com/blog/2012/03/09/aurphan/"/>
    <updated>2012-03-09T16:52:00+13:00</updated>
    <id>http://jasonwryan.github.com/blog/2012/03/09/aurphan</id>
    <content type="html"><![CDATA[<p><img src="http://dl.dropbox.com/u/261312/Blog-images/aurphan.png" alt="image" /></p>

<p>If you are an Arch Linux user and you are not using
<a href="http://www.archlinux.org/packages/community/any/aurphan/" title="aurphan package details">aurphan</a>,
you can take a moment to hang your head in shame before you click on to
whatever the next thing is. The package description sums up perfectly
what aurphan does:</p>

<blockquote><p>Finds packages in need of maintainers, bug fixes and patches. Adopt
today!</p></blockquote>

<p>Running <code>aurphan -a</code>, for example, will identify any
<a href="https://aur.archlinux.org/" title="Arch User Repository">AUR packages</a> in your
database that are not currently maintained; allowing you to log in to
the AUR and hit the ‘Adopt’ button, leaving you feeling all worthy and
fulfilled.<sup>1</sup></p>

<p>If, like most Archers, you have a compulsive desire to automate
<em>everything</em> then clearly typing (or even remembering to type) <code>aurphan
-a</code> into a terminal periodically is as ludicrous as it is onerous. The
obvious answer is some shell script and a cron job.</p>

<p>First, the <code>cron</code> job:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>crontab -e
</span><span class='line'>@hourly aurphan -a &gt;/tmp/aurphans
</span></code></pre></div></figure></notextile></div></p>

<p>Then, as part of my
<a href="https://bitbucket.org/jasonwryan/eeepc/src/241da582a0fd/Scripts/dwm-status" title="Script in mercurial repo">dwm-status script</a>,
a function to check that there are no new additions to the file and, if
there are, flash a highlight:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><pre><code class='sh'><span class='line'>aur<span class="o">(){</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;aurphans<span class="o">=</span><span class="s2">&quot;$(awk &#39;$0 !~ /^No /&#39; /tmp/aurphans | wc -l)&quot;</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$aurphans</span> -gt 0 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> -en <span class="s2">&quot;\x03*\x01&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">}</span>
</span></code></pre></div></figure></notextile></div></p>

<p>The awk filter excludes a null return, which is “No aurphans found.”
Now, if any of the packages that I use from the AUR are disowned, I’ll
be the first to know about it.</p>

<h5>Notes</h5>

<ol>
<li>Actual feeling may differ depending on the package you have adopted
and the amount of prescription painkillers that you are currently
ingesting…</li>
</ol>

]]></content>
  </entry>
  
</feed>
