<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: archlinux | jasonwryan.com]]></title>
  <link href="http://jasonwryan.github.com/blog/categories/archlinux/atom.xml" rel="self"/>
  <link href="http://jasonwryan.github.com/"/>
  <updated>2012-03-31T16:39:16+13:00</updated>
  <id>http://jasonwryan.github.com/</id>
  <author>
    <name><![CDATA[Jason Ryan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Moving to Octopress]]></title>
    <link href="http://jasonwryan.github.com/blog/2012/03/30/octopress/"/>
    <updated>2012-03-30T12:30:00+13:00</updated>
    <id>http://jasonwryan.github.com/blog/2012/03/30/octopress</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://dl.dropbox.com/u/261312/Blog-images/octopress_logo.png" width="240" height="240" title="Octopress Logo" ></p>

<p>Over the last week I have been moving my blog over to <a href="http://octopress.org/">Octopress</a>,
a lightweight blogging framework for <a href="https://github.com/mojombo/jekyll">Jekyll</a>,
the static site generator powering <a href="http://pages.github.com/">Github Pages</a>. I had previously
been posting to a <a href="https://www.tumblr.com/">tumblr</a> page and, over the nearly four years that
I had been doing that I had somehow racked up just over 4000 posts. I was <em>not</em>
looking forward to migrating across.</p>

<p>However, the fact that the Jekyll project has a number of scripts for
<a href="https://github.com/mojombo/jekyll/wiki/blog-migrations">migrating from other platforms</a>
assuaged my concerns about the difficulty of this task. That sense of relief was shortlived.
Neither of the two tumblr migration scripts were of any assistance: both would die during their
initial runs, probably due to some funky characters in the post titles, or perhaps the posts themselves.</p>

<p>I certainly had no intention of trying to wade through the entire back catalogue identifying the
rogue posts. Rather that admit defeat, and probably more due to a sense of misguided optimism about the
“straightforward” nature of the task, I saw this setback as an opportunity to cull all of the
cruft<sup>1</sup> from the blog and decided to manually import the fifty posts that I thought were of
some interest.</p>

<p>Being an assiduous record keeper, all of the posts were helpfully bookmarked on
<a href="https://pinboard.in/u:jasonwryan/t:jwr/">Pinboard under one tag</a>, and therefore it was
simple enough to create a list of the required <acronym title="Unique Resource Locator">URLs</acronym>.
Armed with this list, it was just a matter of cobbling together a script to do the bulk of
the work for me.</p>

<p>The first task was to retrieve the posts from the list:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;grab files&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;while <span class="nb">read </span>url; <span class="k">do</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;wget --adjust-extension <span class="s2">&quot;${url}&quot;</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;done &amp;lt; /home/jason/Scripts/list
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then I needed to remove all of the <acronym title="HyperText Markup Language">HTML</acronym>
surrounding the actual posts: an <code>awk</code> one-liner took care of that.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;strip HTML cruft&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;for file in &lt;em&gt;.html; <span class="k">do</span>
</span><span class='line'><span class="k">  </span>awk <span class="s1">&#39;/&lt;h3&gt;/ {flag=1;next} /&amp;lt;\/div&gt;/{flag=0} flag {print}&#39;</span> <span class="s2">&quot;$file&quot;</span> &gt; <span class="s2">&quot;${file%%.&lt;/em&gt;}&quot;</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>mkdir html &amp;amp;&amp;amp; mv *.html html/
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The final task of this part of the migration was to convert the HTML into
<a href="http://daringfireball.net/projects/markdown/">markdown</a>,
the format that Octopress uses. <a href="http://johnmacfarlane.net/pandoc/">Pandoc</a>
the "universal document converter" handled that job:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;convert to markdown format&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;for file in *; <span class="k">do</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;pandoc -f html -t markdown <span class="s2">&quot;$file&quot;</span> &amp;gt; <span class="s2">&quot;$file&quot;</span>.md
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;done
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The final result was fifty markdown files holding all of my posts, almost ready to
be committed to github. I say “almost” because the files still required what turned out to
be a reasonable amount of cleaning up. Pandoc did a great job, for example, but would
inexpicably break <a href="http://www.notareallink.com">multi word
hyperlinks</a> over two lines. Similarly all of the internal
links to my other posts pointed to the (meaningless) tumblr URLs<sup>2</sup>.</p>

<p>Setting up Octopress was extremely simple and quick by comparison: the
<a href="http://octopress.org/docs/">documentation is very helpful</a>. There was one slight
hitch, a <a href="https://github.com/tmm1/pygments.rb/issues/10">known issue on Arch x86_64</a>,
which was simple enough to deal with.</p>

<p>While the migration was not entirely pain-free, I am pleased that I have done it. Tumblr's service
increasingly <a href="https://twitter.com/#!/jasonwryan/statuses/176543962276954112">left a lot to be desired</a>
but as it was a free service, I couldn't complain too much. Or, more accurately, when I did complain,
no-one actually listened…</p>

<p>Indeed, moving to a paid service like Github
(yes, it's free at first, but once you have enough data there you need to pay a small amount
every month) <a href="http://blog.pinboard.in/2011/12/don_t_be_a_free_user/">makes a lot of sense</a>.
The paid services I do use, like <a href="http://pinboard.in/">Pinboard</a> and
<a href="http://www.tarsnap.com/">Tarsnap</a> are both inexpensive and much more
reliable than their free counterparts<sup>3</sup>; and you get to invest in great
software that is a pleasure to use.</p>

<h5>Notes</h5>

<ol>
<li>Initially, I had set up the site as a simple holding page and dumped a whole lot
of feeds into it: twitter, bookmarks, scrobbled music, etc. Those 4000 posts were
mostly just that sort of internet detritus…</li>
<li>For creating redirections (Github pages do <em>not</em> support <span class="file">.htaccess</span>)
I can't recommend enough the
<a href="https://github.com/rawsyntax/jekyll_alias_generator/blob/master/_plugins/alias_generator.rb">Jekyll Alias Generator</a>.
Just. Brilliant.</li>
<li>And <strong>much</strong> more scrupulous about how they use your personal data.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Signing Your Own Key]]></title>
    <link href="http://jasonwryan.github.com/blog/2012/03/23/key/"/>
    <updated>2012-03-23T11:36:00+13:00</updated>
    <id>http://jasonwryan.github.com/blog/2012/03/23/key</id>
    <content type="html"><![CDATA[<p><img src="http://dl.dropbox.com/u/261312/Blog-images/key.jpg" alt="image" /></p>

<p>Some time in the last couple of days, the last of the packages in the
Community repository were signed and, thanks to the tremendous work of
the Arch developers and Trusted Users, you can fully implement package
signing in your <span class="file">/etc/pacman.conf</span>.</p>

<p>You can check the state of the signed packages with this <code>expac</code>
one-liner; it will return a list of any <em>unsigned</em> packages:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>expac -S <span class="s1">&#39;%r %n %g&#39;</span> | awk <span class="s1">&#39;$3==&quot;(null)&quot; {print $1 &quot;/&quot; $2}&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now that the packages are all signed, I updated my <span class="file">/etc/pacman.conf</span> to
take advantage of this. My overall <code>SigLevel</code> setting requires signed
packages, and—as of yesterday—I was able to move the last repository
entry over to do the same:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">SigLevel</span> <span class="o">=</span> Required DatabaseOptional TrustedOnly&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">[</span>core<span class="o">]</span>
</span><span class='line'><span class="nv">SigLevel</span> <span class="o">=</span> PackageRequired
</span><span class='line'><span class="nv">Include</span> <span class="o">=</span> /etc/pacman.d/mirrorlist&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">[</span>extra<span class="o">]</span>
</span><span class='line'><span class="nv">SigLevel</span> <span class="o">=</span> PackageRequired
</span><span class='line'><span class="nv">Include</span> <span class="o">=</span> /etc/pacman.d/mirrorlist&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">[</span>community<span class="o">]</span>
</span><span class='line'><span class="nv">SigLevel</span> <span class="o">=</span> PackageRequired
</span><span class='line'><span class="nv">Include</span> <span class="o">=</span> /etc/pacman.d/mirrorlist&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">[</span>multilib<span class="o">]</span>
</span><span class='line'><span class="nv">SigLevel</span> <span class="o">=</span> PackageRequired
</span><span class='line'><span class="nv">Include</span> <span class="o">=</span> /etc/pacman.d/mirrorlist
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The next step was to add my key to pacman’s keychain so that I could
sign the packages that I build using ABS or from the
<a href="https://aur.archlinux.org/" title="Arch User Repository">AUR</a>. Allan has an
<a href="http://allanmcrae.com/2011/08/pacman-package-signing-1-makepkg-and-repo-add/" title="The first in a series of four posts on signing: read them all">excellent post on setting this up</a>.</p>

<p>First, import your key into pacman’s keyring:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>pacman-key -r 0xB1BD4E40
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then follow the prompts as you edit the key to sign, set a trust level
and save your key:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>pacman-key --edit-key 0xB1BD4E40
</span><span class='line'>gpg&gt; lsign
</span><span class='line'>...
</span><span class='line'>gpg&gt; trust
</span><span class='line'>...
</span><span class='line'>gpg&gt; save
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then it is just a matter of changing the <code>BUILDENV</code> option in your
<span class="file">/etc/makepkg.conf</span>, which is set to <code>!sign</code>
by default. Remove the bang and include the details of the key you wish to use:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;-- Packager: name/email of the person or organization building packages&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;PACKAGER<span class="o">=</span><span class="s2">&quot;Jason Ryan &lt;a href=&quot;</span>&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#x6f;&amp;#58;&amp;#106;&amp;#97;&amp;#x73;&amp;#111;&amp;#110;&amp;#119;&amp;#x72;&amp;#x79;&amp;#x61;&amp;#x6e;&amp;#64;&amp;#103;&amp;#x6d;&amp;#x61;&amp;#105;&amp;#x6c;&amp;#x2e;&amp;#99;&amp;#111;&amp;#109;<span class="s2">&quot;&gt;&amp;#x6a;&amp;#97;&amp;#115;&amp;#x6f;&amp;#110;&amp;#119;&amp;#114;&amp;#121;&amp;#97;&amp;#x6e;&amp;#64;&amp;#103;&amp;#x6d;&amp;#x61;&amp;#105;&amp;#x6c;&amp;#46;&amp;#99;&amp;#111;&amp;#x6d;&lt;/a&gt;&quot;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;-- Specify a key to use <span class="k">for </span>package signing&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;GPGKEY<span class="o">=</span><span class="s2">&quot;B1BD4E40&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now, when you build a package, you will be prompted for your key’s
passphrase:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">==</span>&gt; Signing package...&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;You need a passphrase to unlock the secret key <span class="k">for</span>
</span><span class='line'>user: <span class="s2">&quot;Jason W Ryan &lt;a href=&quot;</span>&amp;#x6d;&amp;#97;&amp;#x69;&amp;#108;&amp;#x74;&amp;#x6f;&amp;#x3a;&amp;#106;&amp;#97;&amp;#x73;&amp;#111;&amp;#x6e;&amp;#x77;&amp;#114;&amp;#x79;&amp;#x61;&amp;#110;&amp;#x40;&amp;#103;&amp;#109;&amp;#97;&amp;#105;&amp;#x6c;&amp;#x2e;&amp;#99;&amp;#x6f;&amp;#109;<span class="s2">&quot;&gt;&amp;#106;&amp;#x61;&amp;#115;&amp;#x6f;&amp;#110;&amp;#119;&amp;#114;&amp;#x79;&amp;#x61;&amp;#x6e;&amp;#64;&amp;#x67;&amp;#x6d;&amp;#97;&amp;#x69;&amp;#x6c;&amp;#x2e;&amp;#x63;&amp;#111;&amp;#x6d;&lt;/a&gt;&quot;</span>
</span><span class='line'>2048-bit RSA key, ID B1BD4E40, created 2010-08-21&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Enter passphrase:
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Enter the correct passphrase and your package is built and signed:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>-&gt; Created signature file /home/jason/Build/<span class="o">{</span>pkg<span class="o">}</span>.pkg.tar.xz.sig.
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Creative Commons image by
<a href="http://www.flickr.com/photos/donovan_beeson/3185668524/" title="Coraline key on Flickr">donovanbeeson</a>
on Flickr.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple aurphan notifier]]></title>
    <link href="http://jasonwryan.github.com/blog/2012/03/09/aurphan/"/>
    <updated>2012-03-09T16:52:00+13:00</updated>
    <id>http://jasonwryan.github.com/blog/2012/03/09/aurphan</id>
    <content type="html"><![CDATA[<p><img src="http://dl.dropbox.com/u/261312/Blog-images/aurphan.png" alt="image" /></p>

<p>If you are an Arch Linux user and you are not using
<a href="http://www.archlinux.org/packages/community/any/aurphan/" title="aurphan package details">aurphan</a>,
you can take a moment to hang your head in shame before you click on to
whatever the next thing is. The package description sums up perfectly
what aurphan does:</p>

<blockquote><p>Finds packages in need of maintainers, bug fixes and patches. Adopt
today!</p></blockquote>

<p>Running <code>aurphan -a</code>, for example, will identify any
<a href="https://aur.archlinux.org/" title="Arch User Repository">AUR packages</a> in your
database that are not currently maintained; allowing you to log in to
the AUR and hit the ‘Adopt’ button, leaving you feeling all worthy and
fulfilled.<sup>1</sup></p>

<p>If, like most Archers, you have a compulsive desire to automate
<em>everything</em> then clearly typing (or even remembering to type) <code>aurphan
-a</code> into a terminal periodically is as ludicrous as it is onerous. The
obvious answer is some shell script and a cron job.</p>

<p>First, the <code>cron</code> job:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>crontab -e
</span><span class='line'>@hourly aurphan -a &gt;/tmp/aurphans
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then, as part of my
<a href="https://bitbucket.org/jasonwryan/eeepc/src/241da582a0fd/Scripts/dwm-status" title="Script in mercurial repo">dwm-status script</a>,
a function to check that there are no new additions to the file and, if
there are, flash a highlight:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>aur<span class="o">(){</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;aurphans<span class="o">=</span><span class="s2">&quot;$(awk &#39;$0 !~ /^No /&#39; /tmp/aurphans | wc -l)&quot;</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$aurphans</span> -gt 0 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> -en <span class="s2">&quot;\x03*\x01&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The awk filter excludes a null return, which is “No aurphans found.”
Now, if any of the packages that I use from the AUR are disowned, I’ll
be the first to know about it.</p>

<h5>Notes</h5>

<ol>
<li>Actual feeling may differ depending on the package you have adopted
and the amount of prescription painkillers that you are currently
ingesting…</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chroot in LVM on LUKS on Raid: Arch Linux]]></title>
    <link href="http://jasonwryan.github.com/blog/2012/02/13/chroot/"/>
    <updated>2012-02-13T10:25:00+13:00</updated>
    <id>http://jasonwryan.github.com/blog/2012/02/13/chroot</id>
    <content type="html"><![CDATA[<p><img src="http://dl.dropbox.com/u/261312/Blog-images/chroot-lvm.jpg" alt="image" /></p>

<p>In <a href="http://jasonwryan.com/blog/2012/02/11/lvm/" title="Post on setting this system up">my previous post describing this setup</a>
I made the point that grub won’t be installed and that it is necessary
to <code>chroot</code> in to install grub on both drives. This is the procedure I use
to do that—and to perfrom any other maintenance that requires working
from a live environment.</p>

<p>Again, most of this information is on the
<a href="https://wiki.archlinux.org/index.php/Chroot" title="Arch wiki page">Arch Wiki chroot page</a>, I
am just going to fill in the detail around this setup: LVM on LUKS on
Raid1.</p>

<p>Once you have booted into your live environment, load the modules that
are required; in this case: <code>raid1</code>, <code>dm-mod</code> and <code>dm-crypt</code>.</p>

<p>Check that udev hasn’t helpfully read the superblock of your Raid drives
and assembled phantom arrays:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>cat /proc/mdstat
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I find that there are a couple there generally assigned the names
<span class="file">/dev/md126</span> and <span class="file">/dev/md127</span>.
These need to be stopped before assembling the correct arrays:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>mdadm --stop /dev/md12<span class="o">[</span>67<span class="o">]</span>
</span><span class='line'>mdadm --assemble /dev/md0 /dev/sd<span class="o">[</span>ab<span class="o">]</span>1
</span><span class='line'>mdadm --assemble /dev/md1 /dev/sd<span class="o">[</span>ab<span class="o">]</span>2
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You should now have both your arrays up and running. The next step is to
unlock your encrypted device:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>cryptsetup luksOpen /dev/md1 cryptdisk
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>After entering your passphrase, your device will be unlocked. Next, make
the logical volumes available, and then check they are correct:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>vgchange --available y vgroup
</span><span class='line'>lvscan
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>At this point, you are ready to mount the devices and <code>chroot</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>mkdir /mnt/arch
</span><span class='line'>mount /dev/mapper/vgroup-lvroot /mnt/arch
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The next steps are straight from the wiki:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">cd</span> /mnt/arch
</span><span class='line'>mount -t proc proc proc/
</span><span class='line'>mount -t sysfs sys sys/
</span><span class='line'>mount -o <span class="nb">bind</span> /dev dev/
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Mount the other parts of the system that you need to use in your
recovery – in this case, I need my <span class="file">/boot</span> partition:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>mount /dev/md0 boot/
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now <code>chroot</code> to the device and define your shell:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>chroot . /bin/bash
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The wiki has some good advice about customizing your prompt to reinforce
the fact that you are in a chroot:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">export </span><span class="nv">PS1</span><span class="o">=</span><span class="s2">&quot;(chroot) $PS1&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>With everything mounted, it is just a matter of performing your
maintenance. To reinstall <code>grub</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;grub&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;grub&gt; find /grub/stage1
</span><span class='line'>grub&gt; device <span class="o">(</span>hd0<span class="o">)</span> /dev/sda
</span><span class='line'>grub&gt; root <span class="o">(</span>hd0,0<span class="o">)</span>
</span><span class='line'>grub&gt; setup <span class="o">(</span>hd0<span class="o">)</span>
</span><span class='line'>grub&gt; quit
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Repeat for <span class="file">/dev/sdb</span> and both your drives will be bootable in the event
that one fails.</p>

<p>With the maintenance accomplished, all that remains is to exit the
<code>chroot</code> and unmount the devices cleanly:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">exit</span>
</span><span class='line'>umount <span class="o">{</span>proc,sys,dev,boot...<span class="o">}</span>
</span><span class='line'><span class="nb">cd</span> ..
</span><span class='line'>umount arch/
</span><span class='line'>reboot
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Simple.</p>

<p>Creative Commons image by
<a href="http://www.flickr.com/photos/mpd01605/4152508668/" title="Rescue Engine 6 on Flickr">MPD01605</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LVM on LUKS on RAID1 on Arch Linux]]></title>
    <link href="http://jasonwryan.github.com/blog/2012/02/11/lvm/"/>
    <updated>2012-02-11T15:58:00+13:00</updated>
    <id>http://jasonwryan.github.com/blog/2012/02/11/lvm</id>
    <content type="html"><![CDATA[<p><img src="http://dl.dropbox.com/u/261312/Blog-images/lvm-luks-raid.png" alt="image" /></p>

<p>After much procrastination, I finally got around to moving the last of
my machines to Arch Linux:
<a href="http://jasonwryan.com/blog/2010/10/04/the-setup/" title="The Setup post">my home desktop</a>,
which has been running Ubuntu since the end of 2007. I’d like to share a
few thoughts about why I finally walked away from Ubuntu, but I’ll save
that for another long post.</p>

<p>Anyway, the setup I decided on was reasonably straightforward: two 1TB
drives comprising two Raid1 devices, one for a small (150Mb)
<span class="file">/boot</span> and the other holding three logical volumes
in a LUKS crypt. This way, I have the flexibility to grow the volumes as
needed, and only require thesingle passphrase at boot to unlock the
enclosed partitions: <span class="file">/root</span>, <span class="file">swap</span>
and <span class="file">/home</span>.</p>

<p>Almost all of the information here has been gleaned gratefully from
other sources; principally the Arch Wiki entries on
<a href="https://wiki.archlinux.org/index.php/LUKS" title="Arch wiki entry">LUKS</a> and
<a href="https://wiki.archlinux.org/index.php/Lvm" title="Arch LVM article">LVM</a> and
this <a href="http://www.pindarsign.de/webblog/?p=767" title="Blog post on LUKS and LVM">helpful blog post</a>.
This post (and the next) are notes to remind me how I got here and, in
the follow-up, what I need to do to restore this build…</p>

<p>First up, prepare the two hard drives. This took roughly ~90 hours for
the 1TB drives, so allow some time:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>dd <span class="k">if</span><span class="o">=</span>/dev/random <span class="nv">of</span><span class="o">=</span>/dev/sd<span class="o">[</span>a,b<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Once the drives are scrubbed (read the Arch Wiki on why that is
necessary), you can move to the actual installation business. I used a
256Mb thumb drive with the most recent x86_64 netinstall image burned
to it. Boot into the live environment and set up the initial partitions
using <code>cfdisk</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>cfdisk /dev/sda
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I created a 150Mb partition for <span class="file">/boot</span> - marked
with the boot flag, and then partitoned the rest of the drive. Both partitons
should be primary and be <code>FSType linux_raid</code> (the FD option). Write the
partition tabel toa file and then import it to the second drive so both are exactly the
same:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sfdisk -d /dev/sda &gt; part-table
</span><span class='line'>sfdisk /dev/sdb &amp;lt; part-table
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now, set up the Raid arrays. Start by loading the required modules and
then create the two arrays. The metadata flag is important: if you are
using legacy grub, as I did, you must use the 0.90 type or your MBR will
get overwritten:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>modprobe raid1 &amp;amp;&amp;amp; modprobe dm-mod
</span><span class='line'>mdadm --create /dev/md0 --level<span class="o">=</span>1 --raid-devices<span class="o">=</span>2 <span class="se">\&lt;</span>/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;--metadata<span class="o">=</span>0.90 /dev/sd<span class="o">[</span>ab<span class="o">]</span>1
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;mdadm --create /dev/md1 --level<span class="o">=</span>1 --raid-devices<span class="o">=</span>2 /dev/sd<span class="o">[</span>ab<span class="o">]</span>2
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><sup>NOTE: I have split some of the lines of code in this post to ensure they remain readable…</sup></p>

<p>At this point, you can switch to another TTY to watch the disks
sync—again, this could take some time, depending on the size of the
drives.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>watch -n1 cat /proc/mdstat
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Check that it all went to plan…</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>mdadm --misc --detail /dev/md<span class="o">[</span>01<span class="o">]</span> | less
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Once the drives are synched and pronounced clean, it it time to encrypt
the second Raid device, <span class="file">dev/md1</span>. You can’t encrypt
the array that contains <span class="file">/boot</span>,
but having it duplicated in a Raid array means that, ifone drive goes down,
you can still boot the other.</p>

<p>Load the module for encryption, and then set it up:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>modprobe dm-crypt
</span><span class='line'>cryptsetup --cipher<span class="o">=</span>aes-xts-plain --verify-passphrase <span class="se">\&lt;</span>/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;--key-size<span class="o">=</span>512 luksFormat /dev/md1
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now, open the encrypted device to create the logical volumes:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>cryptsetup luksOpen /dev/md1 cryptdisk   <span class="o">[</span>1<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The three next steps create, in this order, the physical volume (the
container, if you will), the group and then the individual volumes
contained in the group. Choose simple, memorable names and do not
hypenate them. The {pv,vg,lv}display commands print out the details of
the devices once created.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>pvcreate /dev/mapper/cryptdisk&lt;br/&gt;
</span><span class='line'>pvdisplay&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;vgcreate vgroup /dev/mapper/cryptdisk&lt;br/&gt;
</span><span class='line'>vgdisplay&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;lvcreate --size 20G --name lvroot vgroup
</span><span class='line'>lvcreate --contiguous y --size 2G --name lvswap vgroup
</span><span class='line'>lvcreate --extents +100%FREE --name lvdata vgroup
</span><span class='line'>lvdisplay
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It should be pointed out that the
<a href="https://github.com/Dieterbe/aif" title="AIF on Github">Arch Installer Framework</a> supports
LUKS and LVM, so you can accomplish these last two steps from within the
installer. I tried both and I found that I had a little more control
doing it manually, but YMMV.</p>

<p>At this point, you are ready to enter the installer and complete the
install. Run /arch/setup and move through the early setup until you
reach the 'Prepare Hard Drives' section. Select option 3, 'Configure block
devices, mountpoints and filesystems'. Make sure that the only “raw”
device that you configure is <span class="file">/dev/md0</span>, your
<span class="file">/boot</span> partition. Otherwise,
you are configuring the logical volumes, <em>not</em> the devices they are
built on.</p>

<p>After succesfully setting up the drives, install the base packages and
then, once that is complete, switch TTYs and update your Raid
configuration <em>prior to configuring your system</em>. This means that when
your <code>initrd</code> is regenerated, it will inlcude the correct Raid
information:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>mdadm --examine --scan &gt; /mnt/etc/mdadm.conf
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>When you are done, move to configure your system and make sure to add
the relevant details to both your <span class="file">/etc/rc.conf</span> and your
<span class="file">/etc/mkinitcpio.conf</span>. In the former:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">USELVM</span><span class="o">=</span><span class="s2">&quot;yes&quot;</span>
</span><span class='line'><span class="nv">USEDMRAID</span><span class="o">=</span><span class="s2">&quot;yes&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>and in /etc/mkinitcpio.conf:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">MODULES</span><span class="o">=</span><span class="s2">&quot;... dm_mod dm_crypt aes_x86_64 raid1 ...&quot;</span>
</span><span class='line'><span class="nv">HOOKS</span><span class="o">=</span><span class="s2">&quot;... udev mdadm encrypt lvm2 filesystems ...&quot;</span>  <span class="o">[</span>2<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>That is the straightforward part of the install over. The final step is
a little more tricky: installing a bootloader. My experience, and I
tried a number of times using different approaches, is that this <em>won’t
work</em>. The installer doesn’t seem to like the Raid setup, so it
complains about it:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="s2">&quot;Missing/Invalid root device for /dev/md0&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It’s not all bad, as this is the final hurdle and it is not a
particularly high one.</p>

<p>The important step is to ensure that your <span class="file">/boot/grub/menu.lst</span> is setup
correctly. Given the names I chose above for my devices, mine looks like
this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">(</span>0<span class="o">)</span> Arch&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;title  Arch Linux
</span><span class='line'>root   <span class="o">(</span>hd0,0<span class="o">)</span>
</span><span class='line'>kernel /vmlinuz26 <span class="nv">root</span><span class="o">=</span>/dev/mapper/vgroup-lvroot <span class="se">\</span>
</span><span class='line'><span class="nv">cryptdevice</span><span class="o">=</span>/dev/md1:vgroup ro
</span><span class='line'>initrd /kernel26.img&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">(</span>1<span class="o">)</span> Arch Fallback&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;title  Arch Linux Fallback
</span><span class='line'>root   <span class="o">(</span>hd0,0<span class="o">)</span>
</span><span class='line'>kernel /vmlinuz26 <span class="nv">root</span><span class="o">=</span>/dev/mapper/vgroup-lvroot <span class="se">\</span>
</span><span class='line'><span class="nv">cryptdevice</span><span class="o">=</span>/dev/md1:vgroup ro
</span><span class='line'>initrd /kernel26-fallback.img
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Once it is all setup, simply exit the installer. At this point, you have
a perfectly secure, redundant, new Arch Linux install that you can’t
boot into. You have two choices; chroot in and manually install grub
now, or reboot and do it then. I opted for the latter as it would be
more like a recovery mission—and I wanted to make sure that I was
capable enough to manage that before committing all of my backed-up data
to the machine.</p>

<p>I’ll post the details of the relatively straightforward steps required
to chroot into the system and install grub on both hard drives in a
couple of days.</p>

<h5>Notes</h5>

<ol>
<li><p>The name <code>cryptdisk</code> is arbitrary - just make it memorable and use it
consistently…</p></li>
<li><p>I am not sure how necessary it is to have the Raid modules included
here, given they are explicitly called in <span class="file">/etc/rc.conf</span>, but caution is
warranted.</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
