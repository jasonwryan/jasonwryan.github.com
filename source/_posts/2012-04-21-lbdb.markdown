---
layout: post
title: "Using Mutt, LDAP and SSL"
date: 2012-04-21 11:23
comments: true
categories: [archlinux, hack, mutt]
---
{% img left /images/post_images/addressbook.png 'Address Book Icon by bertop on Flickr' %}

One of the great things about starting a new job at 
[an open source company](http://jasonwryan.com/blog/2012/04/05/catalyst/ 'My post on joining Catalyst IT')
is having the freedom to use the tools that suit your workflow, rather than 
having to suffer the indignity of whatever the IT department consider to be the
lowest comon denominator. Suffice to say, I have had a lot of fun this week
setting up my working environment—and the ocassional hiccough as I was forced to learn
something new…

One of those “learning opportunities” consisted of trying to get my mail client, 
[Mutt](http://www.mutt.org/ 'All mail clients suck. This one just sucks less.')
to talk to the <acronym title="Lightweight Directory Acces Protocol">LDAP</acronym>
directory over <acronym title="Secure Sockets Layer">SSL</acronym> so that I could 
query the shared address book. There are a number of helpful blog posts that describe
using [lbdb](http://www.spinnaker.de/lbdb/ 'The Little Brother Database homepage')
with `mutt`<sup>1</sup>. Unfortunately, after a lot of searching, I was unable to find 
any documentation on achieving this integration over a secure connection. 
I kept seeing this error:

{% codeblock lang:sh %}
Error: Search failed. LDAP server returned an error : 13, description: TLS
confidentiality required at /usr/lib/mutt_ldap_query line 198, <DATA> line 558.
{% endcodeblock %}

Several hours later, and with some
help from [@ibeardslee](https://twitter.com/#!/ibeardslee 'Ian on Twitter: follow him…'),
I managed to set it up, and it was definitely worth the effort.

You will need to install `lbdb` from 
[the AUR](http://aur.archlinux.org/packages.php?ID=10225 'AUR package'):

{% codeblock lang:sh %}
cowerd lbdb     # 2
{% endcodeblock %}

…and a couple of packages from the repos to make it all work:

{% codeblock lang:sh %}
pacman -S perl-ldap perl-io-socket-ssl netkit-bsd-finger
{% endcodeblock %}

Then it is a matter of configuring `lbdb` to both
query the LDAP directory and be able to be called from `mutt`.
First, copy the config files into your <span class="file">$HOME</span>:

{% codeblock lang:sh %}
mkdir .lbdb
cp /etc/lbdb.rc .lbdb/lbdbrc
cp /etc/lbdb_ldap.rc .lbdb/ldap.rc
{% endcodeblock %}

And then modify the two configuration files to suit your setup:
The first, <span class="file">$HOME/.lbdb/lbdbrc</span>, is well commented and
self-explanatory; add `ldap` to the methods and the
nickname of your server:

{% codeblock lang:sh %}
METHODS="m_abook m_ldap"
LDAP_NICKS="catalyst"
{% endcodeblock %}

The second config file, <span class="file">$HOME/.lbdb/ldap.rc</span>
is written in Perl and is a bit of a shocker:

{% codeblock lang:perl %}
%ldap_server_db = (
    'catalyst' => ['ldaps://ldap.catalyst.net.nz:636',
                    'ou=Staff,ou=People,dc=catalyst,dc=net,dc=nz',
                    'givenname sn cn mail', 'givenname sn cn mail',
                    '${mail}', '${givenname} ${sn}']
);

# hostname of your ldap server
$ldap_server = 'ldaps://ldap.catalyst.net.nz:636';
$search_base = 'ou=Staff,ou=People,dc=catalyst,dc=net,dc=nz';
$ldap_search_fields    = 'givenname sn cn mail';
$ldap_expected_answers = 'givenname sn cn mail';
$ldap_result_email     = '${mail}';
$ldap_result_realname  = '${givenname} ${sn}';
$ignorant = 0;
$ldap_bind_dn = '';
$ldap_bind_password = '';
1;
{% endcodeblock %}

The key is to ensure that you use both the `ldaps`
prefix **and** explicitely specify the SSL port, 636. Without both of these, you will
get the TLS confidentiality error.

You can then test that it is working correctly by running a query:

{% codeblock lang:sh %}
lbdbq jemima
{% endcodeblock %}

All going well, if there is indeed a Jemima in the shared address book, you will see her
contact details miraculously appear before you. If there is more than one, you will have a 
list to choose from.

Finally, you just need to set up `mutt` to query `lbdb`.
In your <span class="file">muttrc</span>, add the following:

{% codeblock lang:sh %}
set query_command = "lbdbq %s 2>/dev/null"
{% endcodeblock %}

I found that suppressing the errors made the whole experience a little smoother. You
may not require it… Now, hitting <kbd>Shift</kbd><kbd>q</kbd> in `mutt`
brings up a prompt to query the LDAP directory (and my [abook](http://abook.sourceforge.net/ 
'abook homepage') address book that I share via 
[dropbox](https://www.dropbox.com/ 'Dropbox homepage')). You can also access the directory 
by starting to type an email address and then hitting <kbd>Ctrl</kbd><kbd>t</kbd> to see 
a list of possible completions. 

#### Notes
1. [Christian Schenk's post](http://www.christianschenk.org/blog/integrating-ldap-into-mutt/ 
'Integrating LDAP into Mutt') got me started.
2. A [wrapper script for cower](https://bitbucket.org/jasonwryan/eeepc/src/f15bf6e51e62/Scripts/cowerd 
'Script in bitbucket repo')

Creative Commons image [by bertop on Flickr](http://www.flickr.com/photos/bertop/2530620838/)

