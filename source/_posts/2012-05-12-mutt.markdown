---
layout: post
title: "mutt and HTML email"
date: 2012-05-12 15:49
comments: true
categories: [archlinux]
---

{% img left http://dl.dropbox.com/u/261312/Blog-images/mutt-1.png 'mutt logo' %}

Following on from my [last post about mutt](http://jasonwryan.com/blog/2012/04/21/lbdb/ 
'Using mutt, LDAP and SSL'),
I have been tinkering more with the most suckless of mail clients to 
get it to deal with—of all things—<acronym title="HyperText Markup Language">HTML</acronym>
emails. I will preface this post with a remark or two that amounts to a warning about
intemperate language, ranting and a generally cranky disposition: repeated contact with
email marketers can do that to you…

A further  brief digression is warranted here. HTML email is, without doubt, 
evidence of the imminent end of civilized life as we know it; much like the 
[Golgafrincham diaspora](http://en.wikipedia.org/wiki/Places_in_The_Hitchhiker's_Guide_to_the_Galaxy#Golgafrincham
'Wikipedia entry on HHGTTG'), it attributable to a depraved cabal of marketing consultants
and provides the same level of social good as syphilis and fistulas. Suffice to say, it is a blight.

Sadly, it is a blight that I have to deal with. Up until now, I had done that by using the
excellent [w3m](http://w3m.sourceforge.net/ 'w3m homepage on sourceforge') to render 
HTML as text in mutt itself. That is accomplished easily enough with an entry in 
<span class="file">muttrc</span> and another in a <span class="file">mailcap</span> file.

{% codeblock lang:sh ~/.mutt/muttrc %}
auto_view text/html                                      # view html automatically
alternative_order text/plain text/enriched text/html     # save html for last
{% endcodeblock %}

{% codeblock lang:sh ~/.mutt/mailcap %}
text/html; w3m -I %{charset} -T text/html; copiousoutput;
{% endcodeblock %}

This works for 80 percent of the HTML email I get. It is enough to confirm that the mail is useless
and can be discarded. The other 20 percent, however, is slightly more problematic. The initial
view in w3m is enough to tell me that, due to the outstanding incompetence of the idiots that
generated the email, there *is* actually some information that is contained in the email that I need
to access **but it is not viewable in a text browser.** 

{% img left http://dl.dropbox.com/u/261312/Blog-images/mutt-2.png 'An example…' %}

For this special level of retardation, I need to be able to open the email in a ghraphical browser.
As I use vimprobable, that means sending the file to 
[vimprobable running in tabbed](http://jasonwryan.com/blog/2011/06/26/using-vimprobable/
'My post on Using vimprobable'). Fortunately, as you would expect with superior software,
mutt has a way of handling this gracefully. In mutt's extensive documentation, there is a 
[page on mutt's MIME support](http://www.mutt.org/doc/manual/manual-5.html 'Go and read it…')
that details how to set up a gradated response to this pernicious issue:

{% blockquote mutt manual http://www.mutt.org/doc/manual/manual-5.html %}
In addition, you can use this with Autoview to denote two commands for viewing an attachment,
one to be viewed automatically, the other to be viewed interactively from the attachment menu. 
{% endblockquote %}

So, you can have mutt render the HTML abomination in w3m in most cases, and when those
instances of particularly cretinous behaviour make it to your inbox, you can choose to
view them in your web browser. In my case, by altering the <span class="file">mailcap</span>
entry to look like this:

{% codeblock lang:sh %}
text/html; vimprobtab.sh %s &amp;; test=test -n "$DISPLAY"; needsterminal;
text/html; w3m -I %{charset} -T text/html; copiousoutput;
{% endcodeblock %}

The first entry tests that X is running, and if it is, it hands the file to vimprobable. The
default, however, is determined by the `copiousoutput` tag. So, in `mutt` it is just a matter
of hitting <kbd>v</kbd> to view the attached HTML and then <kbd>m</kbd> to send it to mailcap.
For convenience, I bind <kbd>Enter</kbd> to that function in <span class="file">muttrc</span>:

{% codeblock lang:sh %}
bind attach <return>    view-mailcap
{% endcodeblock %}
